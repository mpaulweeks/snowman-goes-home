{"version":3,"sources":["utils/moves.ts","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","fe/manager.ts","fe/GameView.tsx","fe/MenuView.tsx","fe/App.tsx","script/index.ts","index.js"],"names":["Move","Block","Moves","Object","keys","filter","k","isNaN","Number","map","PointHistory","point","points","moves","classCallCheck","this","createClass","key","value","newPoint","move","push","_this","m","history","clone","toConsumableArray","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Left","Right","Up","Down","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","level","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","started","Date","elapsed","getTime","time","ProgressionByDifficulty","_ProgressionByDifficu","defineProperty","Test","dimensions","minMoves","levelsPerTier","totalLevels","secondsPerLevel","Easy","Medium","Hard","World","difficulty","progression","levelsByMoves","loaded","onLoad","registerLoaded","obj","num","Promise","resolve","reject","sort","a","remainingMinMoves","getLevelKeys","generateLevels","l","tier","_loadNow","asyncToGenerator","regenerator_default","mark","_callee","_this2","wrap","_context","prev","apply","abrupt","stop","arguments","WorldLoader","loaders","d","toLoad","w","console","log","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","loadImage","url","img","Image","state","image","onload","src","GameManager","canvasElm","world","ctx","currentLevel","currentLevelIndex","sprites","loadedAssets","pendingAnimations","document","body","clientHeight","getContext","allSprites","values","all","s","then","window","addEventListener","e","code","undefined","handleMove","reset","draw","nextLevel","loop","requestAnimationFrame","moveHero","animateMove","_nextLevel","_callee2","_context2","loadNow","sent","printMoves","_this$pendingAnimatio","animations","p","stopwatch","_draw","_callee3","blockWidth","blockHeight","_context3","fillStyle","fillRect","font","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","block","blueLevel","getPercent","drawImage","Container","styled","div","_templateObject","Canvas","canvas","_templateObject2","GameView","_React$Component","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","manager","React","createRef","inherits","react_default","createElement","displayName","ref","Component","LevelOptionContainer","MenuView_templateObject","LevelOption","MenuView_templateObject2","LoadingButton","_templateObject3","ReadyButton","_templateObject4","MenuView","_getPrototypeOf2","_this$state","_len","args","Array","_key","worldLoader","setState","loadWorld","_this3","onClick","App_templateObject","App","loadInBackground","App_Container","GameView_GameView","MenuView_MenuView","script","testLevelGen","l1","print","l2","scripts","ReactDOM","render","App_App","getElementById"],"mappings":"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","file":"static/js/main.5e781e18.chunk.js","sourcesContent":["import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = Object\n  .keys(Move)\n  .filter(k => isNaN(Number(k)))\n  .map(k => Move[k]);\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Point>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [current];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push(next);\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport enum Difficulty {\n  Test = 1,\n  Easy, // 1s\n  Medium, // 2s\n  Hard, // 9s\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  dimensions: Point,\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel: number;\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Test]: {\n    dimensions: new Point(10, 8),\n    minMoves: 7,\n    levelsPerTier: 1,\n    totalLevels: 2,\n    secondsPerLevel: 10,\n  },\n  [Difficulty.Easy]: {\n    dimensions: new Point(10, 8),\n    minMoves: 7,\n    levelsPerTier: 2,\n    totalLevels: 10,\n    secondsPerLevel: 10,\n  },\n  [Difficulty.Medium]: {\n    dimensions: new Point(15, 12),\n    minMoves: 10,\n    levelsPerTier: 2,\n    totalLevels: 20,\n    secondsPerLevel: 7,\n  },\n  [Difficulty.Hard]: {\n    dimensions: new Point(20, 16),\n    minMoves: 10,\n    levelsPerTier: 2,\n    totalLevels: 30,\n    secondsPerLevel: 7,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport class World {\n  difficulty: Difficulty;\n  progression: Progression;\n  levelsByMoves: LevelsByMoves;\n  loaded = false;\n  onLoad: Promise<World>;\n  private registerLoaded = () => { };\n\n  constructor(difficulty: Difficulty) {\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { levelsByMoves, progression } = this;\n    const { dimensions, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const gen = new Generator({\n      width: dimensions.x,\n      height: dimensions.y,\n      blockPercentMin: 0.2,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadNow() {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels;\n  }\n\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor() {\n    this.loaders = [\n      Difficulty.Test,\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n    ].map(d => new World(d));\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds: number) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getTime(): number {\n    const elapsed = new Date().getTime() - this.started.getTime();\n    return this.milliseconds - elapsed;\n  }\n  getPercent(): number {\n    return this.getTime() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n}\n","import { Move, MoveInformation, PlayableLevel, Point, Stopwatch, World } from \"../utils\";\n\nconst moveMap: { [code: string]: Move } = {\n  'ArrowLeft': Move.Left,\n  'ArrowRight': Move.Right,\n  'ArrowUp': Move.Up,\n  'ArrowDown': Move.Down,\n};\n\ninterface Sprite {\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n}\n\ninterface Sprites {\n  hero: Sprite;\n};\n\nfunction loadImage(url: string) {\n  const img = new Image();\n  const state: Sprite = {\n    image: img,\n    loaded: new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n    }),\n  };\n  img.src = url;\n  return state;\n}\n\nexport interface Animation {\n  point: Point,\n  stopwatch: Stopwatch,\n}\n\nexport class GameManager {\n  canvasElm: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  currentLevel: (PlayableLevel | undefined);\n  currentLevelIndex = 0;\n  sprites: Sprites;\n  loadedAssets: Promise<boolean>;\n  pendingAnimations: Array<Animation> = [];\n  world: World;\n\n  constructor(canvasElm: HTMLCanvasElement, world: World) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = document.body.clientHeight;\n    canvasElm.height = document.body.clientHeight * 0.8;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n\n    this.sprites = {\n      hero: loadImage('img/ice_blue.png'),\n    };\n    const allSprites = Object.values(this.sprites);\n    this.loadedAssets = Promise.all(allSprites.map(s => s.loaded)).then(() => true);\n\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.currentLevel && this.currentLevel.reset();\n        this.draw();\n      }\n      if (e.code === 'KeyN') {\n        this.nextLevel();\n      }\n    });\n\n    this.world = world;\n    this.nextLevel();\n\n    // setup passive draw loop\n    this.loop();\n  }\n\n  async loop() {\n    await this.draw();\n    window.requestAnimationFrame(() => this.loop());\n  }\n\n  handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    this.animateMove(moveInfo);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('todo this should be impossible');\n    }\n    this.pendingAnimations = [];\n    const levels = await world.loadNow(); // todo rewrite to not use async?\n    const nextLevel = levels[currentLevelIndex];\n    this.currentLevel = nextLevel && new PlayableLevel(nextLevel);\n    if (nextLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.currentLevelIndex += 1;\n    }\n  }\n\n  animateMove(moveInfo: MoveInformation) {\n    const animations = moveInfo.traveled.map((p, i, arr) => ({\n      point: p,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n    }));\n    this.pendingAnimations.push(...animations);\n  }\n  async draw() {\n    const { canvasElm, ctx, currentLevel, loadedAssets, sprites } = this;\n    const { width, height } = canvasElm;\n\n    await loadedAssets;\n\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, width, height);\n\n    if (!currentLevel) {\n      ctx.font = '20px monospace';\n      ctx.fillStyle = 'white';\n      ctx.fillText('you win! refresh the page to start over', 100, 100);\n      return;\n    }\n\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n\n    // grid\n    ctx.strokeStyle = 'white';\n    for (let y = 1; y < currentLevel.level.height; y++) {\n      ctx.beginPath();\n      ctx.moveTo(0, y * blockHeight);\n      ctx.lineTo(width, y * blockHeight);\n      ctx.stroke();\n    }\n    for (let x = 1; x < currentLevel.level.width; x++) {\n      ctx.beginPath();\n      ctx.moveTo(x * blockWidth, 0);\n      ctx.lineTo(x * blockWidth, height);\n      ctx.stroke();\n    }\n\n    ctx.fillStyle = 'grey';\n    ctx.fillRect(currentLevel.level.start.x * blockWidth, currentLevel.level.start.y * blockHeight, blockWidth, blockHeight);\n\n    ctx.fillStyle = 'lightgreen';\n    ctx.fillRect(currentLevel.level.win.x * blockWidth, currentLevel.level.win.y * blockHeight, blockWidth, blockHeight);\n\n    ctx.fillStyle = 'lightgrey';\n    currentLevel.level.blocks.forEach(block => {\n      ctx.fillRect(block.x * blockWidth, block.y * blockHeight, blockWidth, blockHeight);\n    });\n\n    this.pendingAnimations = this.pendingAnimations.filter(a => a.stopwatch.getTime() > 0);\n    this.pendingAnimations.forEach(a => {\n      const { point, stopwatch } = a;\n      const blueLevel = stopwatch.getPercent();\n      ctx.fillStyle = `rgba(150, 150, 255, ${blueLevel})`;\n      ctx.fillRect(\n        point.x * blockWidth + blockWidth * 0.2,\n        point.y * blockHeight + blockHeight * 0.2,\n        blockWidth * 0.6,\n        blockHeight * 0.6\n      );\n    });\n\n    ctx.drawImage(\n      sprites.hero.image,\n      currentLevel.hero.point.x * blockWidth + blockWidth * 0.2,\n      currentLevel.hero.point.y * blockHeight + blockHeight * 0.2,\n      blockWidth * 0.6,\n      blockHeight * 0.6\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { GameManager } from './manager';\nimport { World } from '../utils';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  margin: 2rem;\n\n  width: 100vh;\n  height: 80vh;\n`;\n\ninterface Props {\n  world: World;\n};\n\nexport class GameView extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  manager: (GameManager | undefined) = undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.manager = new GameManager(canvasElm, this.props.world);\n    }\n  }\n\n  render() {\n    const { world } = this.props;\n    return (\n      <Container>\n        <p>\n          use arrow keys to move. press R to restart the level\n          <br />\n          {world.displayName()} has {world.progression.totalLevels} levels, and they get harder as you go. try to beat them all!\n        </p>\n        <Canvas ref={this.canvasRef} />\n      </Container>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty, WorldLoader } from '../utils';\n\nconst LevelOptionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst LevelOption = styled.div`\n  margin: 2em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst LoadingButton = styled.div`\n  padding: 1em;\n  width: 5em;\n\n  border: 2px solid grey;\n  border-radius: 0.5em;\n`;\nconst ReadyButton = styled(LoadingButton)`\n  cursor: pointer;\n  border: 2px solid white;\n\n  &:hover {\n    color: black;\n    background-color: white;\n  }\n`;\n\ninterface Props {\n  worldLoader: WorldLoader;\n  loadWorld: (w: World) => void;\n};\n\ninterface State {\n  [Difficulty.Test]: boolean,\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n};\n\nexport class MenuView extends React.Component<Props> {\n  state = {\n    [Difficulty.Test]: false,\n    [Difficulty.Easy]: false,\n    [Difficulty.Medium]: false,\n    [Difficulty.Hard]: false,\n  }\n\n  componentDidMount() {\n    this.props.worldLoader.loaders.forEach(world => {\n      world.onLoad.then(() => {\n        this.setState({\n          [world.difficulty]: true,\n        });\n      });\n    });\n  }\n\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.loadWorld(world);\n    }\n  }\n\n  render() {\n    const { worldLoader } = this.props;\n    const { state } = this;\n    return (\n      <div>\n        <h1>\n          ice slide puzzle game\n        </h1>\n        <p>\n          select your difficulty level\n        </p>\n        <LevelOptionContainer>\n          {worldLoader.loaders.map(world => (\n            <LevelOption key={world.difficulty}>\n              <h2>\n                {world.displayName()}\n              </h2>\n              <div>\n                {world.progression.totalLevels} levels\n              </div>\n              <h3>\n                {state[world.difficulty] ? (\n                  <ReadyButton onClick={() => this.loadWorld(world)}>\n                    PLAY\n                </ReadyButton>\n                ) : (\n                    <LoadingButton>\n                      loading\n                </LoadingButton>\n                  )}\n              </h3>\n            </LevelOption>\n          ))}\n        </LevelOptionContainer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { WorldLoader, World } from '../utils';\nimport { MenuView } from './MenuView';\n\nconst Container = styled.div`\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\ninterface State {\n  world?: World;\n};\n\nexport class App extends React.Component<any, State> {\n  worldLoader = new WorldLoader();\n  state = {\n    world: undefined,\n  };\n\n  componentDidMount() {\n    this.loop();\n  }\n\n  loop() {\n    if (!this.state.world) {\n      this.worldLoader.loadInBackground();\n      window.requestAnimationFrame(() => this.loop());\n    }\n  }\n\n  loadWorld(world: World) {\n    this.setState({\n      world,\n    });\n  }\n\n  render() {\n    const { worldLoader } = this;\n    const { world } = this.state;\n    return (\n      <Container>\n        {world ? (\n          <GameView world={world} />\n        ) : (\n            <MenuView worldLoader={worldLoader} loadWorld={w => this.loadWorld(w)} />\n          )}\n      </Container>\n    );\n  }\n}\n","import { Generator, Level, Point } from '../utils';\n\nfunction testLevelGen() {\n  const l1 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(2, 4),\n    ]\n  );\n  console.log(l1.print())\n  console.log(l1.solve())\n\n  const l2 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(4, 0),\n    ]\n  );\n  console.log(l2.print())\n  console.log(l2.solve())\n\n  const gen = new Generator(5, 5, 0.1, 5);\n  const levels = gen.generateLevels(10, 1000);\n  levels.forEach(l => {\n    console.log(l.level.print())\n    console.log('Solution:', l.soln.printMoves())\n    console.log('\\n');\n  });\n};\n\nexport default {\n  testLevelGen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport scripts from './script';\n\n// debug scripts via the browser console\nwindow.scripts = scripts;\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}