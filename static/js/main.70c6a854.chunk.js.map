{"version":3,"sources":["utils/moves.ts","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","fe/sprite.ts","fe/style.ts","fe/AudioPlayer.tsx","fe/mobileCheck.js","redux/reducers/index.ts","redux/actionTypes/index.ts","redux/actions/index.ts","redux/index.ts","fe/common.tsx","fe/GameView.tsx","fe/MenuView.tsx","fe/OptionsView.tsx","fe/ScoreView.tsx","fe/manager.ts","fe/HowToPlayView.tsx","fe/AboutView.tsx","fe/App.tsx","index.js"],"names":["Move","Block","Moves","Up","Down","Left","Right","PointHistory","point","points","moves","Object","classCallCheck","this","createClass","key","value","newPoint","move","push","_this","map","m","history","clone","toConsumableArray","k","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","level","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","arguments","undefined","started","Date","getTime","getElapsed","getRemaining","time","ProgressionByDifficulty","_ProgressionByDifficu","defineProperty","Easy","boilFps","gridSize","levelsPerTier","minMoves","totalLevels","Medium","Hard","Infinite","secondsPerLevel","BasicWorld","dimensions","difficulty","progression","loaded","onLoad","registerLoaded","Promise","resolve","reject","startTime","isInfinite","FiniteWorld","_this2","possibleConstructorReturn","getPrototypeOf","call","levelsByMoves","obj","num","keys","sort","a","remainingMinMoves","getLevelKeys","filter","scaledDimensions","generateLevels","l","tier","apply","_this3","InfiniteWorld","_this4","lastIndex","_this$levels","gen","console","log","WorldLoader","loaders","d","w","toLoad","SpriteFrame","spriteName","url","image","img","Image","onload","src","Sprite","spriteNames","frames","default","all","f","then","every","atFrame","frameCount","spriteImages","heroLeft","heroRight","groundIceBlue","groundIceGray","groundIceNavy","groundIceWhite","treeLight","treeHeavy","igloo","Sprites","objectSpread","values","s","Gifs","GlobalStyle","StyleByDifficulty","_StyleByDifficulty","gridColor","ground","music","overlay","Hidden","styled","div","_templateObject","_AudioPlayer","elmMenu","elmsByDiff","desiredVolume","prevProps","props","store","audioPlaying","lastWorld","world","currWorld","stopAll","currWorldAudioElm","playElm","react_default","createElement","loop","ref","elm","diff","volume","play","pause","currentTime","stopElm","React","Component","AudioPlayer","connect","mobileCheck","check","navigator","userAgent","vendor","window","opera","test","substr","initialState","isGameOver","isMobile","secondsElapsed","secondsRemaining","shouldDrawGrid","shouldDrawTouch","showAbout","showHow2Play","showOptions","showTutorial","reducer","state","action","type","payload","stopwatch","formatElapsed","formatRemaining","setTimer","setWorld","toggleAbout","toggleHow2Play","toggleMusic","toggleOptions","createStore","rootReducer","Row","common_templateObject","RowWithPadding","_templateObject2","RowWithMargin","_templateObject3","Column","_templateObject4","ColumnWithPadding","_templateObject5","MenuTitle","h1","_templateObject6","AbsoluteContainer","_templateObject7","IcyContainer","_templateObject8","BubbleArea","_templateObject9","LoadingButton","_templateObject10","ActionButton","_templateObject11","GameTitle","alt","Container","GameView_templateObject","SubContainer","GameView_templateObject2","Header","GameView_templateObject3","Footer","GameView_templateObject4","CanvasContainer","GameView_templateObject5","CanvasOverlay","GameView_templateObject6","_GameView","_this$props","gm","_this$props$store","onTouchStart","children","onClick","clickReset","GameView","WorldOptionContainer","MenuView_templateObject","WorldTitle","span","MenuView_templateObject2","WorldInfo","MenuView_templateObject3","defaultState","_defaultState","_MenuView","reset","setState","worldLoader","displayOrder","common_GameTitle","getLoaderByDifficulty","displayName","loadWorld","MenuView","_OptionsView","onReset","unsetWorld","toggleDrawGrid","toggleDrawTouch","OptionsView","_ScoreView","className","ScoreView","moveMap","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","facingMap","_facingMap","CanvasNotReadyError","GameManager","dispatch","isDebug","location","href","worldDimensions","canvasDimensions","canvasElm","ctx","currentLevel","currentLevelIndex","spriteFacing","travelAnimations","touchAnimations","clearAnimations","touchPolygonByMove","frameTick","evt","touchEvt","nativeEvent","touches","rect","target","getBoundingClientRect","clientX","left","clientY","top","px","py","isTopRight","isTopLeft","handleMove","clickUp","clickDown","clickLeft","clickRight","DEBUG","screenHeight","document","body","clientHeight","screenWidth","clientWidth","canvasHeight","canvasWidth","addEventListener","e","code","nextLevel","_this$touchPolygonByM","getContext","qw","qh","TopLeft","TopLeftCenter","TopRight","TopRightCenter","BottomLeft","BottomLeftCenter","BottomRight","BottomRightCenter","createStopwatch","moveHero","animateMove","_nextLevel","asyncToGenerator","regenerator_default","mark","_callee","nextSolvableLevel","wrap","_context","prev","loadLevel","sent","printMoves","addTime","origin","triggerGameOver","stop","_callee2","_context2","draw","getState","loadInBackground","requestAnimationFrame","facing","_this$travelAnimation","animations","slice","t","sprite","scale","blockWidth","blockHeight","drawImage","alpha","oldAlpha","globalAlpha","drawSprite","_draw","_callee3","worldStyle","_y","_x","_context3","abrupt","fillStyle","fillRect","opacity","getPercent","strokeStyle","beginPath","moveTo","reverse","p","lineTo","fill","stroke","block","drawSpriteWithOpacity","maxRadius","arc","PI","_HowToPlayView","HowToPlayView","_AboutView","AboutView","App_templateObject","Canvas","canvas","App_templateObject2","_App","canvasRef","createRef","setup","App_Container","App","ReactDOM","render","es","getElementById"],"mappings":"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","file":"static/js/main.70c6a854.chunk.js","sourcesContent":["import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = [\n  Move.Up,\n  Move.Down,\n  Move.Left,\n  Move.Right,\n];\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface Traveled {\n  move: Move,\n  point: Point,\n}\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Traveled>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [{\n      move: move,\n      point: current,\n    }];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push({ move: move, point: next });\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(start: number, length: number): Array<number> {\n  return range(length).map(i => i + start);\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range, rangeFrom } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\nimport { Stopwatch } from \"./stopwatch\";\n\nexport enum Difficulty {\n  Easy = 1,\n  Medium,\n  Hard,\n  Infinite,\n  // Test,\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  gridSize: (number);\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel?: number;\n  boilFps: number;\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Easy]: {\n    boilFps: 3,\n    gridSize: 1,\n    levelsPerTier: 1,\n    minMoves: 5,\n    totalLevels: 5,\n  },\n  [Difficulty.Medium]: {\n    boilFps: 3,\n    gridSize: 1.5,\n    levelsPerTier: 1,\n    minMoves: 10,\n    totalLevels: 10,\n  },\n  [Difficulty.Hard]: {\n    boilFps: 6,\n    gridSize: 2,\n    levelsPerTier: 2,\n    minMoves: 12,\n    totalLevels: 16,\n  },\n  [Difficulty.Infinite]: {\n    boilFps: 9,\n    gridSize: 1.5,\n    levelsPerTier: 3,\n    minMoves: 7,\n    secondsPerLevel: 10,\n    totalLevels: 20,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport interface World {\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded: boolean;\n  onLoad: Promise<World>;\n  displayName: () => string;\n  isInfinite: () => boolean;\n  createStopwatch: () => Stopwatch;\n  generateLevels: () => void;\n  loadLevel: (i: number) => Promise<SolvableLevel | undefined>;\n}\n\nclass BasicWorld implements World {\n  dimensions: Point;\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded = false;\n  onLoad: Promise<World>;\n  registerLoaded = () => { };\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    this.dimensions = dimensions;\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n    this.totalLevels = this.progression.totalLevels;\n  }\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n  isInfinite() {\n    return this.difficulty === Difficulty.Infinite;\n  }\n  createStopwatch() {\n    const secondsPerLevel = this.progression.secondsPerLevel || 0;\n    const startTime = 1000 * (60 - secondsPerLevel);\n    // const startTime = 5; // for testing infinite mode\n    return new Stopwatch(this.isInfinite() ? startTime : undefined);\n  }\n\n  generateLevels() {\n    throw new Error('base class');\n  }\n  loadLevel(index: number): Promise<SolvableLevel | undefined> {\n    throw new Error('base class');\n  }\n}\n\nclass FiniteWorld extends BasicWorld {\n  levelsByMoves: LevelsByMoves;\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    super(dimensions, difficulty);\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { dimensions, levelsByMoves, progression } = this;\n    const { gridSize, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadLevel(index: number) {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels[index];\n  }\n}\n\nclass InfiniteWorld extends BasicWorld {\n  levels: Array<SolvableLevel> = [];\n  lastIndex = 0;\n\n  constructor(dimensions: Point) {\n    super(dimensions, Difficulty.Infinite);\n  }\n\n  generateLevels() {\n    const { dimensions, levels, progression, lastIndex } = this;\n    const { gridSize } = progression;\n    if (levels.length > lastIndex + 10) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    // todo randomize gridSize, minMoves\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: rangeFrom(progression.minMoves, 10),\n    })\n    this.levels.push(...gen.generateLevels(10, 10));\n    if (levels.length > lastIndex + 10) {\n      console.log('infinite loaded!');\n    }\n  }\n\n  async loadLevel(index: number) {\n    while (index > this.levels.length) {\n      this.generateLevels();\n    }\n    this.lastIndex = index;\n    return this.levels[index];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor(dimensions: Point) {\n    this.loaders = [\n      new InfiniteWorld(dimensions),\n      ...[\n        Difficulty.Easy,\n        Difficulty.Medium,\n        Difficulty.Hard,\n      ].map(d => new FiniteWorld(dimensions, d)),\n    ];\n  }\n\n  getLoaderByDifficulty(difficulty: Difficulty) {\n    return this.loaders.filter(w => w.difficulty === difficulty)[0];\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds = 0) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getElapsed(): number {\n    return new Date().getTime() - this.started.getTime();\n  }\n  getRemaining(): number {\n    return this.milliseconds - this.getElapsed();\n  }\n  getPercent(): number {\n    return this.getRemaining() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n  formatElapsed(): string {\n    return Math.floor(this.getElapsed() / 1000).toString(10);\n  }\n  formatRemaining(): string {\n    return Math.floor(this.getRemaining() / 1000).toString(10);\n  }\n}\n","export class SpriteFrame {\n  url: string;\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n\n  constructor(spriteName: string) {\n    const url = `sprite/${spriteName}.png`;\n    const img = new Image();\n    const loaded = new Promise<boolean>((resolve, reject) => {\n      img.onload = () => resolve(true);\n    });\n    img.src = url;\n\n    this.url = url;\n    this.image = img;\n    this.loaded = loaded;\n  }\n}\n\nexport class Sprite {\n  frames: Array<SpriteFrame>;\n  loaded: Promise<boolean>;\n  default: SpriteFrame;\n\n  constructor(spriteNames: Array<string>) {\n    this.frames = spriteNames.map(spriteName => new SpriteFrame(spriteName));\n    this.loaded = Promise.all(this.frames.map(f => f.loaded)).then(arr => arr.every(b => b));\n    this.default = this.atFrame(0);\n  }\n\n  atFrame(frameCount: number) {\n    const { frames } = this;\n    const index = Math.floor(frameCount) % frames.length;\n    return frames[index];\n  }\n}\n\nexport interface SpriteManager {\n  loaded: Promise<boolean>,\n  heroLeft: Sprite;\n  heroRight: Sprite;\n  groundIceBlue: Sprite,\n  groundIceGray: Sprite,\n  groundIceNavy: Sprite,\n  groundIceWhite: Sprite,\n  treeLight: Sprite,\n  treeHeavy: Sprite,\n  igloo: Sprite,\n};\n\n// load sprites\nconst spriteImages = {\n  heroLeft: new Sprite(['snowman_left']),\n  heroRight: new Sprite(['snowman_right']),\n  groundIceBlue: new Sprite(['ground_ice_blue']),\n  groundIceGray: new Sprite(['ground_ice_gray']),\n  groundIceNavy: new Sprite(['ground_ice_navy']),\n  groundIceWhite: new Sprite(['ground_ice_white']),\n  treeLight: new Sprite(['tree_light', 'tree_light_left', 'tree_light', 'tree_light_right']),\n  treeHeavy: new Sprite(['tree_heavy', 'tree_heavy_right', 'tree_heavy', 'tree_heavy_left']),\n  igloo: new Sprite(['igloo']),\n};\nexport const Sprites: SpriteManager = {\n  ...spriteImages,\n  loaded: Promise.all(Object.values(spriteImages).map(s => s.loaded)).then(() => true),\n};\n\nexport const Gifs = {\n  snowDiagonal: 'gif/snow_diagonal.gif',\n  snowLoose: 'gif/snow_loose.gif',\n};\n","import { Difficulty } from '../utils';\nimport { Gifs, Sprite, Sprites } from './sprite';\n\nexport const GlobalStyle = {\n  backgroundColor: 'white', // matching css\n  menuMusic: 'music/visager_shrine.mp3',\n};\n\ninterface IStyle {\n  music: string;\n  ground: Sprite;\n  gridColor: string;\n  overlay: string;\n}\ninterface IStyleByDifficulty {\n  [diff: string]: IStyle;\n}\n\nexport const StyleByDifficulty: IStyleByDifficulty = {\n  [Difficulty.Easy]: {\n    gridColor: 'black',\n    ground: Sprites.groundIceWhite,\n    music: 'music/visager_village_dreaming.mp3',\n    overlay: Gifs.snowLoose,\n  },\n  [Difficulty.Medium]: {\n    gridColor: 'black',\n    ground: Sprites.groundIceBlue,\n    music: 'music/visager_the_final_road.mp3',\n    overlay: Gifs.snowLoose,\n  },\n  [Difficulty.Hard]: {\n    gridColor: 'white',\n    ground: Sprites.groundIceGray,\n    music: 'music/visager_the_great_forest.mp3',\n    overlay: Gifs.snowDiagonal,\n  },\n  [Difficulty.Infinite]: {\n    gridColor: 'white',\n    ground: Sprites.groundIceNavy,\n    music: 'music/visager_dark_sanctum.mp3',\n    overlay: Gifs.snowDiagonal,\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { DataState } from '../redux/reducers';\nimport { GlobalStyle, StyleByDifficulty } from './style';\n\nconst Hidden = styled.div`\n  display: none;\n`;\n\ninterface Props {\n  store: DataState;\n};\ninterface State { };\n\ninterface ElmsByDiff {\n  [diff: string]: HTMLAudioElement;\n};\n\nclass _AudioPlayer extends React.Component<Props, State> {\n  elmMenu?: HTMLAudioElement;\n  elmsByDiff: ElmsByDiff = {};\n  desiredVolume = 0.5;\n\n  componentDidUpdate(prevProps: Props) {\n    const { elmMenu, elmsByDiff } = this;\n    const { audioPlaying } = this.props.store;\n    if (!audioPlaying) {\n      // if props gets set to false, make sure we dont have pointers to deleted DOM objects\n      this.elmsByDiff = {};\n      return;\n    }\n\n    const lastWorld = prevProps.store.world;\n    const currWorld = this.props.store.world;\n    if (lastWorld !== currWorld) {\n      // if changing to new world, stop old music\n      this.stopAll();\n    }\n\n    // figure out audio element for the world we're playing now\n    const currWorldAudioElm = currWorld ? elmsByDiff[currWorld.difficulty] : elmMenu;\n    if (!currWorldAudioElm) {\n      return;\n    }\n    this.playElm(currWorldAudioElm);\n  }\n  render() {\n    const { audioPlaying } = this.props.store;\n    return audioPlaying && (\n      <Hidden>\n        <audio\n          loop\n          src={GlobalStyle.menuMusic}\n          ref={elm => elm && (this.elmMenu = elm)}\n        ></audio>\n        {\n          Object.keys(StyleByDifficulty).map(diff => (\n            <audio\n              key={diff}\n              loop\n              src={StyleByDifficulty[diff].music}\n              ref={elm => elm && (this.elmsByDiff[diff] = elm)}\n            ></audio>\n          ))\n        }\n      </Hidden >\n    );\n  }\n  private playElm(elm: HTMLAudioElement) {\n    const { desiredVolume } = this;\n    if (elm.volume !== desiredVolume) {\n      elm.volume = desiredVolume;\n    }\n    elm.play();\n  }\n  private stopElm(elm: HTMLAudioElement) {\n    elm.pause();\n    elm.currentTime = 0;\n  }\n  private stopAll() {\n    const { elmMenu, elmsByDiff } = this;\n    elmMenu && this.stopElm(elmMenu);\n    Object.keys(elmsByDiff).forEach(diff => this.stopElm(elmsByDiff[diff]));\n  }\n}\n\nexport const AudioPlayer = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_AudioPlayer);\n","// https://stackoverflow.com/a/11381730\nexport const mobileCheck = function () {\n  var check = false;\n  //eslint-disable-next-line\n  (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n};\n","import { Reducer } from 'redux';\nimport { mobileCheck } from '../../fe/mobileCheck';\nimport { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_ABOUT, TOGGLE_DRAW_GRID, TOGGLE_DRAW_TOUCH, TOGGLE_HOW2PLAY, TOGGLE_MUSIC, TOGGLE_OPTIONS } from '../actionTypes';\n\nexport interface DataState {\n  audioPlaying: boolean;\n  isGameOver: boolean;\n  isMobile: boolean;\n  level: number;\n  secondsElapsed: string;\n  secondsRemaining: string;\n  shouldDrawGrid: boolean;\n  shouldDrawTouch: boolean;\n  showAbout: boolean;\n  showHow2Play: boolean;\n  showOptions: boolean;\n  showTutorial: boolean;\n  world?: World;\n}\n\ninterface DataAction {\n  type: string;\n  payload: {\n    stopwatch?: Stopwatch;\n    level?: number;\n    world?: World;\n  };\n}\n\nconst initialState: DataState = {\n  audioPlaying: false,\n  isGameOver: false,\n  isMobile: mobileCheck(),\n  level: 0,\n  secondsElapsed: '',\n  secondsRemaining: '',\n  shouldDrawGrid: false,\n  shouldDrawTouch: mobileCheck(),\n  showAbout: false,\n  showHow2Play: true,\n  showOptions: false,\n  showTutorial: true,\n  world: undefined,\n};\n\nconst reducer: Reducer<DataState, DataAction> = (state = initialState, action: DataAction) => {\n  switch (action.type) {\n    case SET_GAME_OVER: {\n      return {\n        ...state,\n        isGameOver: true,\n      };\n    }\n    case SET_LEVEL: {\n      const { level } = action.payload;\n      return {\n        ...state,\n        level: level || 0,\n      };\n    }\n    case SET_TIMER: {\n      const { stopwatch } = action.payload;\n      return {\n        ...state,\n        secondsElapsed: stopwatch ? stopwatch.formatElapsed() : '',\n        secondsRemaining: stopwatch ? stopwatch.formatRemaining() : '',\n      };\n    }\n    case SET_WORLD: {\n      const { world } = action.payload;\n      return {\n        ...state,\n        isGameOver: false,\n        world,\n      };\n    }\n    case TOGGLE_ABOUT: {\n      return {\n        ...state,\n        showAbout: !state.showAbout,\n      };\n    }\n    case TOGGLE_DRAW_GRID: {\n      return {\n        ...state,\n        shouldDrawGrid: !state.shouldDrawGrid,\n      };\n    }\n    case TOGGLE_DRAW_TOUCH: {\n      return {\n        ...state,\n        shouldDrawTouch: !state.shouldDrawTouch,\n      };\n    }\n    case TOGGLE_HOW2PLAY: {\n      return {\n        ...state,\n        showHow2Play: !state.showHow2Play,\n        showTutorial: false,\n      };\n    }\n    case TOGGLE_MUSIC: {\n      return {\n        ...state,\n        audioPlaying: !state.audioPlaying,\n      };\n    }\n    case TOGGLE_OPTIONS: {\n      return {\n        ...state,\n        showOptions: !state.showOptions,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_LEVEL = 'SET_LEVEL';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_WORLD = 'SET_WORLD';\nexport const TOGGLE_ABOUT = 'TOGGLE_ABOUT';\nexport const TOGGLE_DRAW_GRID = 'TOGGLE_DRAW_GRID';\nexport const TOGGLE_DRAW_TOUCH = 'TOGGLE_DRAW_TOUCH';\nexport const TOGGLE_HOW2PLAY = 'TOGGLE_HOW2PLAY';\nexport const TOGGLE_MUSIC = 'TOGGLE_MUSIC';\nexport const TOGGLE_OPTIONS = 'TOGGLE_OPTIONS';\n","import { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_ABOUT, TOGGLE_DRAW_GRID, TOGGLE_DRAW_TOUCH, TOGGLE_HOW2PLAY, TOGGLE_MUSIC, TOGGLE_OPTIONS } from '../actionTypes';\n\nexport const setGameOver = () => ({\n  type: SET_GAME_OVER,\n  payload: {},\n});\n\nexport const setLevel = (level: number) => ({\n  type: SET_LEVEL,\n  payload: {\n    level,\n  },\n});\n\nexport const setTimer = (stopwatch: Stopwatch) => ({\n  type: SET_TIMER,\n  payload: {\n    stopwatch,\n  },\n});\n\nexport const setWorld = (world?: World) => ({\n  type: SET_WORLD,\n  payload: {\n    world,\n  },\n});\n\nexport const toggleAbout = () => ({\n  type: TOGGLE_ABOUT,\n  payload: {},\n});\n\nexport const toggleDrawGrid = () => ({\n  type: TOGGLE_DRAW_GRID,\n  payload: {},\n});\n\nexport const toggleDrawTouch = () => ({\n  type: TOGGLE_DRAW_TOUCH,\n  payload: {},\n});\n\nexport const toggleHow2Play = () => ({\n  type: TOGGLE_HOW2PLAY,\n  payload: {},\n});\n\nexport const toggleMusic = () => ({\n  type: TOGGLE_MUSIC,\n  payload: {},\n});\n\nexport const toggleOptions = () => ({\n  type: TOGGLE_OPTIONS,\n  payload: {},\n});\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer);\nexport * from './actions';\nexport * from './reducers';\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Sprites } from './sprite';\nimport { mobileCheck } from './mobileCheck';\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: stretch;\n  flex-wrap: nowrap;\n`;\nexport const RowWithPadding = styled(Row)`\n  margin: 1em 0.5em;\n`;\nexport const RowWithMargin = styled(RowWithPadding)`\n  margin-top: 0em;\n  &:first-child {\n    margin-top: 1em;\n  }\n`;\nexport const Column = styled(Row)`\n  flex-direction: column;\n`;\nexport const ColumnWithPadding = styled(Column)`\n  margin: 1em 0.5em;\n`;\n\nexport const MenuTitle = styled.h1`\n  text-align: center;\n  margin: 0em 0.5em;\n  font-family: monospace;\n  font-style: italic;\n\n  & img {\n    margin-left: 0.5em;\n    margin-right: 0.5em;\n  }\n\n  & ${Row} {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport const AbsoluteContainer = styled(Column)`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  width: 100%;\n  height: 100vh;\n\n  background-color: var(--background);\n`;\nexport const IcyContainer = styled(AbsoluteContainer)`\n  justify-content: center;\n  background-image: url('${Sprites.groundIceWhite.default.url}');\n  background-repeat: repeat;\n`;\n\nexport const BubbleArea = styled.div`\n  padding: 0.5em;\n  margin: 0.5em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  background-color: var(--background);\n  border-radius: 1em;\n  border: 1px solid var(--snow);\n  box-sizing: border-box;\n`;\n\nexport const LoadingButton = styled.div`\n  min-width: 4em;\n  padding: 0.25em 0.75em;\n  margin: 0 0.3em;\n  border-radius: 1em;\n\n  border: 2px solid grey;\n  font-style: italic;\n  color: grey;\n  background-color: var(--background);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\nexport const ActionButton = styled(LoadingButton)`\n  cursor: pointer;\n  text-transform: uppercase;\n\n  border-color: var(--foreground);\n  font-style: normal;\n  color: var(--foreground);\n\n  ${!mobileCheck() && `\n    &:hover {\n      color: var(--background);\n      background-color: var(--foreground);\n    }\n  `}\n`;\n\nexport const GameTitle = () => (\n  <Row>\n    <BubbleArea>\n      <MenuTitle>\n        <Row>\n          Snowman\n          <img alt=\"\" src={Sprites.heroLeft.default.url} />\n        </Row>\n        <Row>\n          <img alt=\"\" src={Sprites.igloo.default.url} />\n          Goes\n          Home\n        </Row>\n      </MenuTitle>\n    </BubbleArea>\n  </Row>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DataState, toggleOptions } from '../redux';\nimport { connect } from 'react-redux';\nimport { GameManager } from './manager';\nimport { Row, Column, ActionButton } from './common';\nimport { StyleByDifficulty } from './style';\n\ntype UrlProps = {\n  url: string,\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst SubContainer = styled(Row)`\n  width: 100%;\n  margin: 0px;\n`;\nconst Header = styled(SubContainer)`\n  height: 10vh;\n  font-family: monospace;\n  font-size: 1.8em;\n  font-weight: bold;\n`;\nconst Footer = styled(SubContainer)`\n  height: 10vh;\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n`;\n\nconst CanvasOverlay = styled.div<UrlProps>`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: url('${props => props.url}');\n  background-size: contain;\n  background-repeat: none;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleOptions: () => void;\n};\n\nclass _GameView extends React.Component<Props> {\n  render() {\n    const { gm, store } = this.props;\n    const { world, level, secondsRemaining, secondsElapsed } = this.props.store;\n    const overlay = store.world ? StyleByDifficulty[store.world.difficulty].overlay : '';\n    return (\n      <Container>\n        <Header>\n          <Column>\n            <div>\n              Level {level + 1} / {world && (world.isInfinite() ? '∞' : world.totalLevels)}\n            </div>\n          </Column>\n          <Column>\n            <div>\n              {world && world.isInfinite() ? secondsRemaining : secondsElapsed}s\n            </div>\n          </Column>\n        </Header>\n        <CanvasContainer onTouchStart={gm.onTouchStart}>\n          {this.props.children}\n          <CanvasOverlay url={overlay} />\n        </CanvasContainer>\n        <Footer>\n          <Column>\n            <ActionButton onClick={gm.clickReset}>\n              reset\n            </ActionButton>\n          </Column>\n          <Column>\n            <ActionButton onClick={() => this.props.toggleOptions()}>\n              options\n            </ActionButton>\n          </Column>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\n\nexport const GameView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleOptions,\n  }\n)(_GameView);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState, toggleMusic, toggleOptions } from '../redux';\nimport { GameManager } from './manager';\nimport { Sprites } from './sprite';\nimport { IcyContainer, LoadingButton, ActionButton, Row, BubbleArea, RowWithMargin, ColumnWithPadding, GameTitle } from './common';\n\nconst WorldOptionContainer = styled(Row)`\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst WorldTitle = styled.span`\n  font-weight: bold;\n  text-transform: uppercase;\n`;\nconst WorldInfo = styled.span`\n  font-size: 0.8em;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic(): void;\n  toggleOptions(): void;\n};\n\ninterface State {\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n  [Difficulty.Infinite]: boolean,\n};\n\nconst defaultState = {\n  [Difficulty.Easy]: false,\n  [Difficulty.Medium]: false,\n  [Difficulty.Hard]: false,\n  [Difficulty.Infinite]: false,\n};\n\nclass _MenuView extends React.Component<Props, State> {\n  state = { ...defaultState };\n\n  componentDidMount() {\n    this.reset();\n  }\n  reset() {\n    this.setState({\n      ...defaultState,\n    }, () => {\n      this.props.gm.worldLoader.loaders.forEach(world => {\n        world.onLoad.then(() => {\n          Sprites.loaded.then(() => {\n            this.setState({\n              [world.difficulty]: true,\n            });\n          });\n        });\n      });\n    });\n  }\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.gm.setWorld(world);\n      this.reset();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { state } = this;\n    const { worldLoader } = this.props.gm;\n    if (store.world) {\n      return '';\n    }\n    const displayOrder = [\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n      Difficulty.Infinite,\n    ];\n    return (\n      <IcyContainer>\n        <GameTitle />\n        <WorldOptionContainer>\n          {displayOrder.map(d => worldLoader.getLoaderByDifficulty(d)).map((world) => (\n            <BubbleArea key={world.difficulty}>\n              <ColumnWithPadding>\n                <Row>\n                  <WorldTitle>\n                    {world.displayName()}\n                  </WorldTitle>\n                </Row>\n                <Row>\n                  {state[world.difficulty] ? (\n                    <ActionButton onClick={() => this.loadWorld(world)}>\n                      PLAY\n                </ActionButton>\n                  ) : (\n                      <LoadingButton>\n                        loading\n                </LoadingButton>\n                    )}\n                </Row>\n                <Row>\n                  <WorldInfo>\n                    {world.isInfinite() ? 'Limited Time' : world.totalLevels + ' Levels'}\n                  </WorldInfo>\n                </Row>\n              </ColumnWithPadding>\n            </BubbleArea>\n          ))}\n        </WorldOptionContainer>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleMusic}>\n                music is {this.props.store.audioPlaying ? 'on' : 'off'}\n              </ActionButton>\n            </RowWithMargin>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleOptions}>\n                options\n              </ActionButton>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const MenuView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleMusic,\n    toggleOptions,\n  }\n)(_MenuView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState, toggleAbout, toggleDrawGrid, toggleDrawTouch, toggleHow2Play, toggleMusic, toggleOptions } from '../redux';\nimport { GameManager } from './manager';\nimport { IcyContainer, Row, RowWithMargin, BubbleArea, MenuTitle, ActionButton } from './common';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleAbout(): void;\n  toggleDrawGrid(): void;\n  toggleDrawTouch(): void;\n  toggleHow2Play(): void;\n  toggleMusic(): void;\n  toggleOptions(): void;\n};\ninterface State { };\n\nclass _OptionsView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    if (!store.showOptions) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <MenuTitle> OPTIONS </MenuTitle>\n            </RowWithMargin>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleMusic}>\n                music is {this.props.store.audioPlaying ? 'on' : 'off'}\n              </ActionButton>\n            </RowWithMargin>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleDrawGrid}>\n                grid is {this.props.store.shouldDrawGrid ? 'on' : 'off'}\n              </ActionButton>\n            </RowWithMargin>\n            {store.isMobile && (\n              <RowWithMargin>\n                <ActionButton onClick={this.props.toggleDrawTouch}>\n                  touch indicators are {this.props.store.shouldDrawTouch ? 'on' : 'off'}\n                </ActionButton>\n              </RowWithMargin>\n            )}\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleHow2Play}>\n                how to play\n              </ActionButton>\n            </RowWithMargin>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleAbout}>\n                about\n              </ActionButton>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleOptions}>\n                {store.world ? 'back to game' : 'back to menu'}\n              </ActionButton>\n            </RowWithMargin>\n            {store.world && (\n              <RowWithMargin>\n                <ActionButton onClick={() => { gm.unsetWorld(); this.props.toggleOptions(); }}>\n                  quit to menu\n              </ActionButton>\n              </RowWithMargin>\n            )}\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const OptionsView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleAbout,\n    toggleDrawGrid,\n    toggleDrawTouch,\n    toggleHow2Play,\n    toggleMusic,\n    toggleOptions,\n  }\n)(_OptionsView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux';\nimport { ActionButton, BubbleArea, IcyContainer, MenuTitle, Row, RowWithMargin } from './common';\nimport { GameManager } from './manager';\nimport { Sprites } from './sprite';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\ninterface State { };\n\nclass _ScoreView extends React.Component<Props, State> {\n  render() {\n    const { gm, store } = this.props;\n    const { world, isGameOver } = store;\n    if (!(world && isGameOver)) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <MenuTitle>\n                {world.isInfinite() ? `GAME OVER!` : `YOU WIN!`}\n              </MenuTitle>\n            </RowWithMargin>\n            <RowWithMargin>\n              <img alt=\"\" src={Sprites.igloo.default.url} />\n              <img className=\"rotate\" alt=\"\" src={Sprites.heroLeft.default.url} />\n            </RowWithMargin>\n            {world.isInfinite() ? (\n              <div>\n                <RowWithMargin>\n                  You managed to complete {store.level - 1} levels.\n                </RowWithMargin>\n              </div>\n            ) : (\n                <div>\n                  <RowWithMargin>\n                    You managed to beat {world.displayName()} in {store.secondsElapsed} seconds.\n                </RowWithMargin>\n                  <RowWithMargin>\n                    Try to beat it faster or play a higher difficulty!\n                </RowWithMargin>\n                </div>\n              )}\n            <RowWithMargin>\n              <ActionButton onClick={() => gm.unsetWorld()}>MENU</ActionButton>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const ScoreView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_ScoreView);\n","import { setGameOver, setLevel, setTimer, setWorld, store } from '../redux';\nimport { Move, MoveInformation, PlayableLevel, Point, Stopwatch, Traveled, World, WorldLoader } from '../utils';\nimport { Sprite, Sprites } from './sprite';\nimport { GlobalStyle, StyleByDifficulty } from './style';\n\nconst moveMap: { [code: string]: Move } = {\n  ArrowDown: Move.Down,\n  ArrowLeft: Move.Left,\n  ArrowRight: Move.Right,\n  ArrowUp: Move.Up,\n};\n\nconst facingMap: { [move: string]: Sprite } = {\n  [Move.Down]: Sprites.heroRight,\n  [Move.Left]: Sprites.heroLeft,\n  [Move.Right]: Sprites.heroRight,\n  [Move.Up]: Sprites.heroLeft,\n};\n\ninterface Animation {\n  stopwatch: Stopwatch;\n}\ninterface TravelAnimation extends Animation {\n  facing: Sprite;\n  traveled: Traveled;\n}\ninterface TouchAnimation extends Animation {\n  move: Move;\n}\ninterface ClearAnimation extends Animation {\n  origin: Point;\n}\ninterface TouchTriangleByMove {\n  [move: string]: Point[];\n}\n\nconst CanvasNotReadyError = new Error('canvas is not loaded yet');\n\nexport class GameManager {\n  public worldLoader: WorldLoader;\n  private dispatch = store.dispatch;\n  private isDebug = window.location.href.includes('localhost');\n  private worldDimensions: Point;\n  private canvasDimensions: Point;\n  private canvasElm?: HTMLCanvasElement;\n  private ctx?: CanvasRenderingContext2D;\n  private world?: World;\n  private stopwatch = new Stopwatch();\n  private currentLevel: (PlayableLevel | undefined);\n  private currentLevelIndex = 0;\n  private spriteFacing = Sprites.heroRight;\n  private travelAnimations: TravelAnimation[] = [];\n  private touchAnimations: TouchAnimation[] = [];\n  private clearAnimations: ClearAnimation[] = [];\n  private touchPolygonByMove: TouchTriangleByMove = {};\n  private frameTick = 0;\n\n  constructor() {\n    const { isDebug } = this;\n    if (isDebug) {\n      const w: any = window;\n      w.DEBUG = this;\n    }\n\n    // determine largest possible canvas size\n    const screenHeight = document.body.clientHeight * 0.8; // matching css of 80vh\n    const screenWidth = document.body.clientWidth;\n\n    // determine canvas orientation\n    const isVertical = screenHeight > screenWidth;\n    const dimensions = isVertical ? new Point(8, 10) : new Point(10, 8);\n    this.worldDimensions = dimensions;\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n\n    // shrink down canvas size until it fits on this screen\n    let canvasHeight = screenHeight;\n    let canvasWidth = canvasHeight * dimensions.x / dimensions.y;\n    while (canvasWidth > screenWidth) {\n      canvasHeight -= 1;\n      canvasWidth = canvasHeight * dimensions.x / dimensions.y;\n    }\n    this.canvasDimensions = new Point(canvasWidth, canvasHeight);\n\n    // setup key listeners\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.clickReset();\n      }\n      if (e.code === 'KeyN' && isDebug) {\n        this.nextLevel();\n      }\n    });\n\n    // setup passive draw/load loop\n    this.loop();\n  }\n  public setup(canvasElm: HTMLCanvasElement) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = this.canvasDimensions.x;\n    canvasElm.height = this.canvasDimensions.y;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n\n    // setup touchPolygonByMove\n    const qw = canvasElm.width / 4;\n    const qh = canvasElm.height / 4;\n    const TopLeft = new Point(-qw, -qh);\n    const TopLeftCenter = new Point(qw, qh);\n    const TopRight = new Point(qw * 5, -qh);\n    const TopRightCenter = new Point(qw * 3, qh);\n    const BottomLeft = new Point(-qw, qh * 5);\n    const BottomLeftCenter = new Point(qw, qh * 3);\n    const BottomRight = new Point(qw * 5, qh * 5);\n    const BottomRightCenter = new Point(qw * 3, qh * 3);\n    this.touchPolygonByMove = {\n      [Move.Left]: [TopLeft, TopLeftCenter, BottomLeftCenter, BottomLeft],\n      [Move.Right]: [TopRight, TopRightCenter, BottomRightCenter, BottomRight],\n      [Move.Up]: [TopLeft, TopLeftCenter, TopRightCenter, TopRight],\n      [Move.Down]: [BottomLeft, BottomLeftCenter, BottomRightCenter, BottomRight],\n    };\n  }\n\n  public clickReset = () => {\n    if (this.currentLevel) {\n      this.currentLevel.reset();\n    }\n  }\n  public onTouchStart = (evt: React.TouchEvent<HTMLElement>) => {\n    const touchEvt = evt.nativeEvent.touches[0];\n    const rect = (evt.target as HTMLElement).getBoundingClientRect();\n    const x = touchEvt.clientX - rect.left;\n    const y = touchEvt.clientY - rect.top;\n\n    // check if not close enough to the edges\n    const isCenter = (\n      rect.width * 0.25 < x &&\n      x < rect.width * 0.75 &&\n      rect.height * 0.25 < y &&\n      y < rect.height * 0.75\n    );\n    if (isCenter) {\n      return;\n    }\n\n    const px = x / rect.width;\n    const py = y / rect.height;\n    const isTopRight = px > py;\n    const isTopLeft = px + py < 1;\n    const move = (\n      (isTopLeft && isTopRight && Move.Up) ||\n      (!isTopLeft && isTopRight && Move.Right) ||\n      (!isTopLeft && !isTopRight && Move.Down) ||\n      (isTopLeft && !isTopRight && Move.Left)\n    );\n    if (move) {\n      this.handleMove(move);\n    }\n  }\n  public clickUp = () => {\n    this.handleMove(Move.Up);\n  }\n  public clickDown = () => {\n    this.handleMove(Move.Down);\n  }\n  public clickLeft = () => {\n    this.handleMove(Move.Left);\n  }\n  public clickRight = () => {\n    this.handleMove(Move.Right);\n  }\n\n  public setWorld(world: World) {\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.world = world;\n    this.currentLevelIndex = 0;\n    this.stopwatch = world.createStopwatch();\n    this.nextLevel();\n    this.dispatch(setWorld(world));\n  }\n  public unsetWorld() {\n    // todo score should dispatch this action\n    this.world = undefined;\n    this.dispatch(setWorld(undefined));\n  }\n  private triggerGameOver() {\n    this.world = undefined;\n    this.dispatch(setGameOver());\n  }\n\n  private handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    // sprite show face left/right or keep its current direction\n    this.spriteFacing = [Move.Left, Move.Right].includes(move) ? facingMap[move] : this.spriteFacing;\n    this.animateMove(move, moveInfo, this.spriteFacing);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  private async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('this should be impossible');\n    }\n    const nextSolvableLevel = await world.loadLevel(currentLevelIndex);\n    this.currentLevel = nextSolvableLevel && new PlayableLevel(nextSolvableLevel);\n    if (this.currentLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.dispatch(setLevel(this.currentLevelIndex));\n      this.currentLevelIndex += 1;\n      this.stopwatch.addTime(1000 * (world.progression.secondsPerLevel || 0));\n      this.travelAnimations = [];\n      this.clearAnimations.push({\n        origin: this.currentLevel.level.start,\n        stopwatch: new Stopwatch(500),\n      }, {\n          origin: this.currentLevel.level.win,\n          stopwatch: new Stopwatch(500),\n        });\n    } else {\n      this.triggerGameOver();\n    }\n  }\n\n  private async loop() {\n    const { world, stopwatch } = this;\n    if (world) {\n      await this.draw();\n      if (world.isInfinite()) {\n        world.generateLevels();\n        if (stopwatch.formatRemaining() !== store.getState().secondsRemaining) {\n          this.dispatch(setTimer(stopwatch));\n        }\n        if (stopwatch.getRemaining() < 0) {\n          this.triggerGameOver();\n        }\n      } else {\n        if (stopwatch.formatElapsed() !== store.getState().secondsElapsed) {\n          this.dispatch(setTimer(stopwatch));\n        }\n      }\n    } else if (!store.getState().isGameOver) {\n      this.worldLoader.loadInBackground();\n    }\n    window.requestAnimationFrame(() => this.loop());\n  }\n  private animateMove(move: Move, moveInfo: MoveInformation, facing: Sprite) {\n    const animations = moveInfo.traveled.slice(0, -1).map((t, i, arr) => ({\n      facing,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n      traveled: t,\n    }));\n    this.travelAnimations.push(...animations);\n    if (store.getState().shouldDrawTouch) {\n      this.touchAnimations.push({\n        move,\n        stopwatch: new Stopwatch(200),\n      });\n    }\n  }\n  private drawSprite(sprite: Sprite, x: number, y: number, scale?: number) {\n    const { canvasElm, ctx, currentLevel } = this;\n    if (!canvasElm || !ctx || !currentLevel) {\n      return;\n    }\n    const { width, height } = canvasElm;\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    scale = scale || 1;\n    ctx.drawImage(\n      sprite.atFrame(this.frameTick).image,\n      x * blockWidth + (blockWidth * (1 - scale) / 2),\n      y * blockHeight + (blockHeight * (1 - scale) / 2),\n      blockWidth * scale,\n      blockHeight * scale,\n    );\n  }\n  private drawSpriteWithOpacity(alpha: number, sprite: Sprite, x: number, y: number, scale?: number) {\n    const { ctx } = this;\n    if (!ctx) {\n      throw CanvasNotReadyError;\n    }\n    const oldAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = alpha;\n    this.drawSprite(sprite, x, y, scale);\n    ctx.globalAlpha = oldAlpha;\n  }\n  private async draw() {\n    const { canvasElm, ctx, currentLevel, world, touchPolygonByMove } = this;\n    if (!canvasElm || !ctx) {\n      return;\n    }\n    const { width, height } = canvasElm;\n\n    await Sprites.loaded;\n\n    if (!currentLevel || !world) {\n      return;\n    }\n\n    this.frameTick = Math.floor(world.progression.boilFps * new Date().getTime() / 1000);\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    const worldStyle = StyleByDifficulty[world.difficulty];\n\n    // background\n    ctx.fillStyle = GlobalStyle.backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    for (let y = 0; y < currentLevel.level.height; y++) {\n      for (let x = 0; x < currentLevel.level.width; x++) {\n        this.drawSprite(worldStyle.ground, x, y);\n      }\n    }\n\n    // touch indicator\n    this.touchAnimations = this.touchAnimations.filter((a) => a.stopwatch.getRemaining() > 0);\n    this.touchAnimations.forEach((a) => {\n      const { move, stopwatch } = a;\n      const points = touchPolygonByMove[move];\n      const opacity = stopwatch.getPercent();\n      ctx.strokeStyle = `rgba(100, 100, 100, ${opacity})`;\n      ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\n      ctx.beginPath();\n      ctx.moveTo(points[0].x, points[0].y);\n      points.reverse().forEach((p) => {\n        ctx.lineTo(p.x, p.y);\n      });\n      ctx.fill();\n      ctx.stroke();\n    });\n\n    // grid\n    if (store.getState().shouldDrawGrid) {\n      ctx.strokeStyle = worldStyle.gridColor;\n      for (let y = 1; y < currentLevel.level.height; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * blockHeight);\n        ctx.lineTo(width, y * blockHeight);\n        ctx.stroke();\n      }\n      for (let x = 1; x < currentLevel.level.width; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * blockWidth, 0);\n        ctx.lineTo(x * blockWidth, height);\n        ctx.stroke();\n      }\n    }\n\n    // blocks\n    currentLevel.level.blocks.forEach(block => {\n      const sprite = (block.x + block.y) % 2 === 0 ? Sprites.treeLight : Sprites.treeHeavy;\n      this.drawSprite(sprite, block.x, block.y);\n    });\n\n    // ghosts\n    this.travelAnimations = this.travelAnimations.filter((a) => a.stopwatch.getRemaining() > 0);\n    this.travelAnimations.forEach((a) => {\n      const { facing, traveled, stopwatch } = a;\n      const opacity = stopwatch.getPercent() * 0.7;\n      this.drawSpriteWithOpacity(\n        opacity,\n        facing,\n        traveled.point.x,\n        traveled.point.y,\n        1.2,\n      );\n    });\n\n    // clear whiteout\n    this.clearAnimations = this.clearAnimations.filter((a) => a.stopwatch.getRemaining() > 0);\n    this.clearAnimations.forEach((a) => {\n      const { origin, stopwatch } = a;\n      const maxRadius = Math.max(width, height);\n      ctx.fillStyle = 'white';\n      ctx.beginPath();\n      ctx.arc(\n        (origin.x + 0.5) * blockWidth,\n        (origin.y + 0.5) * blockHeight,\n        maxRadius * stopwatch.getPercent(),\n        0, 2 * Math.PI, false,\n      );\n      ctx.fill();\n    });\n\n    // goal square\n    this.drawSprite(Sprites.igloo, currentLevel.level.win.x, currentLevel.level.win.y);\n\n    // hero\n    this.drawSprite(\n      this.spriteFacing,\n      currentLevel.hero.point.x, currentLevel.hero.point.y, 1.2);\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState, toggleHow2Play } from '../redux';\nimport { BubbleArea, IcyContainer, Row, RowWithMargin, MenuTitle, ActionButton, GameTitle } from './common';\n\ninterface Props {\n  store: DataState;\n  toggleHow2Play: () => void;\n};\ninterface State { };\n\nclass _HowToPlayView extends React.Component<Props, State> {\n  render() {\n    const { showHow2Play, isMobile, showTutorial } = this.props.store;\n    if (!showHow2Play) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        {showTutorial && <GameTitle />}\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <MenuTitle> HOW TO PLAY </MenuTitle>\n            </RowWithMargin>\n            <RowWithMargin>\n              {isMobile ? 'Tap the edges of the snow field to move (left, right, up, down)' : 'Use the arrow keys to move (left, right, up, down)'}\n            </RowWithMargin>\n            <RowWithMargin>\n              Navigate your snowman across the slippery ice to the igloo!\n            </RowWithMargin>\n            <RowWithMargin>\n              If you get stuck, press the RESET button{!isMobile && ' or R key'}.\n            </RowWithMargin>\n            {showTutorial && (\n              <RowWithMargin>\n                You can view these instructions again from the options menu.\n              </RowWithMargin>\n            )}\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleHow2Play}>\n                {showTutorial ? 'ok' : 'back'}\n              </ActionButton>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const HowToPlayView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleHow2Play,\n  }\n)(_HowToPlayView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState, toggleAbout } from '../redux';\nimport { BubbleArea, IcyContainer, Column, Row, RowWithMargin, MenuTitle, ActionButton } from './common';\n\ninterface Props {\n  store: DataState;\n  toggleAbout: () => void;\n};\ninterface State { };\n\nclass _AboutView extends React.Component<Props, State> {\n  render() {\n    const { store } = this.props;\n    if (!store.showAbout) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <MenuTitle> ABOUT </MenuTitle>\n            </RowWithMargin>\n            <RowWithMargin>\n              <div>\n                made by <a href=\"https://www.mpaulweeks.com\">mpaulweeks</a>\n              </div>\n            </RowWithMargin>\n            <RowWithMargin>\n              <Column>\n                <div>\n                  original assets by <a href=\"https://www.kenney.nl\">Kenney</a>\n                </div>\n                <div>\n                  with edits by <a href=\"https://amyjxu.me\">Amy Xu</a>\n                </div>\n              </Column>\n            </RowWithMargin>\n            <RowWithMargin>\n              <div>\n                music by <a href=\"https://visager.bandcamp.com/album/songs-from-an-unmade-world\">Visager</a>\n              </div>\n            </RowWithMargin>\n            <RowWithMargin>\n              <div>\n                ❄️<i>August 2019</i> ❄️\n              </div>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <RowWithMargin>\n              <ActionButton onClick={this.props.toggleAbout}>\n                back\n              </ActionButton>\n            </RowWithMargin>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const AboutView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleAbout,\n  }\n)(_AboutView);\n","import React from 'react';\nimport { AudioPlayer } from './AudioPlayer';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { MenuView } from './MenuView';\nimport { OptionsView } from './OptionsView';\nimport { ScoreView } from './ScoreView';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\nimport { HowToPlayView } from './HowToPlayView';\nimport { AboutView } from './AboutView';\n\nconst Container = styled.div`\n  max-width: 50vh;\n  margin: 0px auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  border-radius: 5%;\n`;\n\ninterface Props {\n  store: DataState;\n}\n\nclass _App extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  gm = new GameManager();\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.gm.setup(canvasElm);\n    }\n  }\n\n  render() {\n    const { gm } = this;\n    return (\n      <Container>\n        <AudioPlayer />\n        <GameView gm={gm}>\n          <Canvas ref={this.canvasRef} />\n        </GameView>\n        <MenuView gm={gm} />\n        <ScoreView gm={gm} />\n        <OptionsView gm={gm} />\n        <HowToPlayView />\n        <AboutView />\n      </Container>\n    );\n  }\n}\n\nexport const App = connect(\n  (store: DataState) => ({ store })\n)(_App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport { store } from './redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}