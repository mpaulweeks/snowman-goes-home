{"version":3,"sources":["utils/moves.ts","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","fe/sprite.ts","fe/style.ts","fe/AudioPlayer.tsx","redux/actionTypes/index.ts","redux/reducers/index.ts","redux/actions/index.ts","redux/index.ts","fe/common.ts","fe/GameView.tsx","fe/MenuView.tsx","fe/OptionsView.tsx","fe/ScoreView.tsx","fe/manager.ts","fe/App.tsx","script/index.ts","index.js"],"names":["Move","Block","Moves","Object","keys","filter","k","isNaN","Number","map","PointHistory","point","points","moves","classCallCheck","this","createClass","key","value","newPoint","move","push","_this","m","history","clone","toConsumableArray","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Left","Right","Up","Down","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","level","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","arguments","undefined","started","Date","getTime","getElapsed","getRemaining","time","ProgressionByDifficulty","_ProgressionByDifficu","defineProperty","Easy","boilFps","gridSize","minMoves","levelsPerTier","totalLevels","Medium","Hard","Infinite","secondsPerLevel","BasicWorld","dimensions","difficulty","progression","loaded","onLoad","registerLoaded","Promise","resolve","reject","startTime","isInfinite","FiniteWorld","_this2","possibleConstructorReturn","getPrototypeOf","call","levelsByMoves","obj","num","sort","a","remainingMinMoves","getLevelKeys","scaledDimensions","generateLevels","l","tier","apply","_this3","InfiniteWorld","_this4","lastIndex","_this$levels","gen","console","log","WorldLoader","loaders","d","w","toLoad","SpriteFrame","spriteName","url","image","img","Image","onload","src","Sprite","spriteNames","frames","default","all","f","atFrame","frameCount","spriteImages","heroLeft","heroRight","groundIceBlue","groundIceGray","groundIceNavy","groundIceWhite","treeLight","treeHeavy","igloo","Sprites","objectSpread","values","s","then","window","Gifs","GlobalStyle","StyleByDifficulty","_StyleByDifficulty","music","ground","gridColor","overlay","Hidden","styled","div","_templateObject","_AudioPlayer","elmMenu","elmsByDiff","desiredVolume","prevProps","_this$props$store","props","store","audio","world","playing","stopAll","elm","playElm","volume","play","pause","currentTime","stopElm","diff","react_default","createElement","loop","ref","React","Component","AudioPlayer","connect","SET_GAME_OVER","SET_LEVEL","SET_TIMER","SET_WORLD","TOGGLE_MUSIC","TOGGLE_OPTIONS","initialState","isMobile","check","navigator","userAgent","vendor","opera","test","substr","mobilecheck","secondsRemaining","secondsElapsed","isGameOver","showOptions","reducer","state","action","type","payload","stopwatch","formatElapsed","formatRemaining","setTimer","setWorld","toggleOptions","createStore","rootReducer","Row","common_templateObject","Column","_templateObject2","AbsoluteContainer","_templateObject3","IcyContainer","_templateObject4","BubbleArea","_templateObject5","LoadingButton","_templateObject6","ReadyButton","_templateObject7","KeyButton","_templateObject8","Container","GameView_templateObject","SubContainer","GameView_templateObject2","Header","GameView_templateObject3","Footer","GameView_templateObject4","CanvasContainer","GameView_templateObject5","CanvasOverlay","GameView_templateObject6","_GameView","_this$props","gm","toggleMusic","onClick","mouseMove","children","clickReset","GameView","WorldOptionContainer","MenuView_templateObject","GameTitle","h1","MenuView_templateObject2","WorldTitle","h2","MenuView_templateObject3","WorldButton","h3","MenuView_templateObject4","defaultState","_defaultState","_MenuView","reset","setState","worldLoader","displayOrder","alt","getLoaderByDifficulty","displayName","loadWorld","href","MenuView","_OptionsView","onReset","unsetWorld","clickToggleGrid","OptionsView","_ScoreView","className","currentLevelIndex","ScoreView","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","GameManager","dispatch","isDebug","location","worldDimensions","canvasDimensions","canvasElm","ctx","currentLevel","spriteFacing","loadedAssets","pendingAnimations","shouldDrawGrid","frameTick","evt","rect","target","getBoundingClientRect","clientX","left","clientY","top","px","py","isTopRight","isTopLeft","handleMove","clickUp","clickDown","clickLeft","clickRight","DEBUG","screenHeight","document","body","clientHeight","screenWidth","clientWidth","canvasHeight","canvasWidth","addEventListener","e","code","nextLevel","getContext","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","draw","getState","triggerGameOver","loadInBackground","requestAnimationFrame","stop","createStopwatch","moveHero","animateMove","_nextLevel","_callee2","_context2","loadLevel","sent","printMoves","addTime","_this$pendingAnimatio","animations","slice","t","sprite","scale","blockWidth","blockHeight","drawImage","alpha","oldAlpha","globalAlpha","drawSprite","_draw","_callee3","worldStyle","_y","_x","_context3","abrupt","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","opacity","getPercent","drawSpriteWithOpacity","block","App_templateObject","Canvas","canvas","App_templateObject2","_App","canvasRef","createRef","setup","App_Container","App","script","testLevelGen","l1","print","l2","scripts","ReactDOM","render","es","getElementById"],"mappings":"6JAEYA,6MAML,ICOKC,EDPCC,EAAQC,OAClBC,KAAKJ,GACLK,OAAO,SAAAC,GAAC,OAAIC,MAAMC,OAAOF,MACzBG,IAAI,SAAAH,GAAC,OAAIN,EAAKM,KAOJI,EAAb,WAKE,SAAAA,EAAYC,EAAcC,EAAsBC,GAAqBV,OAAAW,EAAA,EAAAX,CAAAY,KAAAL,GAAAK,KAJrEJ,WAIoE,EAAAI,KAHpEH,YAGoE,EAAAG,KAFpEF,WAEoE,EAClEE,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EACdG,KAAKF,MAAQA,EARjB,OAAAV,OAAAa,EAAA,EAAAb,CAAAO,EAAA,EAAAO,IAAA,UAAAC,MAAA,SAWUC,EAAiBC,GACvBL,KAAKH,OAAOS,KAAKN,KAAKJ,OACtBI,KAAKF,MAAMQ,KAAKD,GAChBL,KAAKJ,MAAQQ,IAdjB,CAAAF,IAAA,eAAAC,MAAA,WAiBuC,IAAAI,EAAAP,KACnC,OAAOb,EACJO,IAAI,SAAAc,GAAC,MAAK,CACTH,KAAMG,EACNC,QAASF,EAAKG,aArBtB,CAAAR,IAAA,QAAAC,MAAA,WA0BI,OAAO,IAAIR,EACTK,KAAKJ,MADAR,OAAAuB,EAAA,EAAAvB,CAEDY,KAAKH,QAFJT,OAAAuB,EAAA,EAAAvB,CAGDY,KAAKF,UA7Bf,CAAAI,IAAA,aAAAC,MAAA,WAkCI,OAAOH,KAAKF,MAAMJ,IAAI,SAAAH,GAAC,OAAIN,EAAKM,KAAIqB,KAAK,UAlC7CjB,EAAA,aCHYT,0EAUL,IAAM2B,EAAb,WASE,SAAAA,EAAYC,EAAeC,EAAgBC,EAAcC,EAAYC,GAAuB9B,OAAAW,EAAA,EAAAX,CAAAY,KAAAa,GAAAb,KAR5Fc,WAQ2F,EAAAd,KAP3Fe,YAO2F,EAAAf,KAN3FgB,WAM2F,EAAAhB,KAL3FiB,SAK2F,EAAAjB,KAJ3FkB,YAI2F,EAAAlB,KAH3FmB,YAA2B,GAIzBnB,KAAKc,MAAQA,EACbd,KAAKe,OAASA,EACdf,KAAKgB,MAAQA,EACbhB,KAAKiB,IAAMA,EACXjB,KAAKkB,OAASA,EAEdlB,KAAKmB,YAAcnB,KAAKkB,OAAOE,OAC7B,SAACC,EAAqBC,GAEpB,OADAD,EAAOC,EAAEC,YAAcrC,EAAMA,MACtBmC,GAET,IArBN,OAAAjC,OAAAa,EAAA,EAAAb,CAAAyB,EAAA,EAAAX,IAAA,iBAAAC,MAAA,SAyBiBqB,GACb,OAAOxB,KAAKiB,IAAIQ,OAAOD,KA1B3B,CAAAtB,IAAA,iBAAAC,MAAA,SA4BiBqB,GAAqB,IAC1BL,EAA+BnB,KAA/BmB,YAAaL,EAAkBd,KAAlBc,MAAOC,EAAWf,KAAXe,OAE5B,QADmBI,EAAYK,EAAID,aAEhCC,EAAIE,EAAI,GACRF,EAAIE,GAAKZ,GACTU,EAAIG,EAAI,GACRH,EAAIG,GAAKZ,IAnChB,CAAAb,IAAA,YAAAC,MAAA,SAsCYP,EAAcS,GAMtB,IALA,IAAIuB,EAAUhC,EACRiC,EAAW,CAAC,CAChBxB,KAAMA,EACNT,MAAOgC,MAEI,CACX,IAAME,EAAOF,EAAQlB,QAErB,GAAIL,IAASpB,EAAK8C,KAAMD,EAAKJ,SACxB,GAAIrB,IAASpB,EAAK+C,MAAOF,EAAKJ,SAC9B,GAAIrB,IAASpB,EAAKgD,GAAIH,EAAKH,QAC3B,IAAItB,IAASpB,EAAKiD,KAClB,MAAM,IAAIC,MAAJ,oBAAAC,OAA8B/B,IADZyB,EAAKH,IAGlC,GAAI3B,KAAKqC,eAAeP,GACtB,MAIF,GAFAD,EAASvB,KAAK,CAACD,KAAMA,EAAMT,MAAOkC,IAClCF,EAAUE,EACN9B,KAAKsC,eAAeV,GACtB,MAGJ,MAAO,CACLhC,MAAOgC,EACPC,SAAUA,KAhEhB,CAAA3B,IAAA,QAAAC,MAAA,WAuEI,IAJ2B,IAAAI,EAAAP,KAErBuC,EAAsC,GACtCC,EAAQ,CAFA,IAAI7C,EAAaK,KAAKgB,MAAO,GAAI,KAGxCwB,EAAMC,QAAQ,CACnB,IAAMX,EAAOU,EAAME,QACbxC,EAAM4B,EAAKlC,MAAM2B,WACvB,IAAKgB,EAAQrC,GAAM,CAEjB,GADAqC,EAAQrC,IAAO,EACXF,KAAKsC,eAAeR,EAAKlC,OAC3B,OAAOkC,EAEOA,EAAKa,eACXC,QAAQ,SAAApC,GAAK,IACbH,EAAkBG,EAAlBH,KAAMI,EAAYD,EAAZC,QACRL,EAAWG,EAAKsC,UAAUpC,EAAQb,MAAOS,GAAMT,MACrDa,EAAQqC,QAAQ1C,EAAUC,GAC1BmC,EAAMlC,KAAKG,MAIjB,OAAO,OAxFX,CAAAP,IAAA,QAAAC,MAAA,WA8FI,IAHc,IACNW,EAAsCd,KAAtCc,MAAOC,EAA+Bf,KAA/Be,OAAQC,EAAuBhB,KAAvBgB,MAAOC,EAAgBjB,KAAhBiB,IAAKC,EAAWlB,KAAXkB,OAC7B6B,EAA6B,GAFrBC,EAAA,SAGLrB,GAEP,IADA,IAAMsB,EAAqB,GAJfC,EAAA,SAKHxB,GACP,IAAIyB,EAAO,IACPlC,EAAIS,IAAMA,GAAKT,EAAIU,IAAMA,IAC3BwB,EAAO,KAELnC,EAAMU,IAAMA,GAAKV,EAAMW,IAAMA,IAC/BwB,EAAO,KAETjC,EAAO0B,QAAQ,SAAAtB,GACTA,EAAEI,IAAMA,GAAKJ,EAAEK,IAAMA,IACvBwB,EAAO,OAGXF,EAAI3C,KAAK6C,IAbFzB,EAAI,EAAGA,EAAIZ,EAAOY,IAAKwB,EAAvBxB,GAeTqB,EAAKzC,KAAK2C,IAjBHtB,EAAI,EAAGA,EAAIZ,EAAQY,IAAKqB,EAAxBrB,GAmBT,OAAOoB,EAAKrD,IAAI,SAAAuD,GAAG,OAAIA,EAAIrC,KAAK,MAAKA,KAAK,UAjH9CC,EAAA,GAqHauC,EAGX,SAAAA,EAAYC,EAAcC,GAAqBlE,OAAAW,EAAA,EAAAX,CAAAY,KAAAoD,GAAApD,KAF/CqD,WAE8C,EAAArD,KAD9CsD,UAC8C,EAC5CtD,KAAKqD,MAAQA,EACbrD,KAAKsD,KAAOA,GAIHC,EAAb,WAKE,SAAAA,EAAYC,GAAwBpE,OAAAW,EAAA,EAAAX,CAAAY,KAAAuD,GAAAvD,KAJpCqD,WAImC,EAAArD,KAHnCsD,UAGmC,EAAAtD,KAFnCyD,UAEmC,EACjCzD,KAAKqD,MAAQG,EAAOH,MACpBrD,KAAKsD,KAAOE,EAAOF,KACnBtD,KAAKyD,KAAO,IAAI9D,EAAaK,KAAKqD,MAAMrC,MAAO,GAAI,IARvD,OAAA5B,OAAAa,EAAA,EAAAb,CAAAmE,EAAA,EAAArD,IAAA,QAAAC,MAAA,WAYIH,KAAKyD,KAAO,IAAI9D,EAAaK,KAAKqD,MAAMrC,MAAO,GAAI,MAZvD,CAAAd,IAAA,WAAAC,MAAA,SAeWE,GAA6B,IAC5BgD,EAAgBrD,KAAhBqD,MAAOI,EAASzD,KAATyD,KACTC,EAAWL,EAAMR,UAAUY,EAAK7D,MAAOS,GAE7C,OADAoD,EAAKX,QAAQY,EAAS9D,MAAOS,GACtBqD,MAnBXH,EAAA,GCtJaI,EAAb,WAIE,SAAAA,EAAYjC,EAAWC,GAAYvC,OAAAW,EAAA,EAAAX,CAAAY,KAAA2D,GAAA3D,KAHnC0B,OAGkC,EAAA1B,KAFlC2B,OAEkC,EAChC3B,KAAK0B,EAAIA,EACT1B,KAAK2B,EAAIA,EANb,OAAAvC,OAAAa,EAAA,EAAAb,CAAAuE,EAAA,EAAAzD,IAAA,QAAAC,MAAA,WASI,OAAO,IAAIwD,EAAM3D,KAAK0B,EAAG1B,KAAK2B,KATlC,CAAAzB,IAAA,WAAAC,MAAA,WAYI,SAAAiC,OAAUpC,KAAK0B,EAAf,KAAAU,OAAoBpC,KAAK2B,KAZ7B,CAAAzB,IAAA,SAAAC,MAAA,SAcSyD,GACL,OAAO5D,KAAKuB,aAAeqC,EAAMrC,cAfrC,EAAArB,IAAA,aAAAC,MAAA,SAkBoB0D,GAChB,IAAMC,EAAQD,EAAIE,MAAM,KACxB,OAAO,IAAIJ,EAAMK,WAAWF,EAAM,IAAKE,WAAWF,EAAM,SApB5DH,EAAA,GCEO,SAASM,EAAMC,GAEpB,IADA,IAAIC,EAAqB,GAChBC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAAI7D,KAAK8D,GAEX,OAAOD,EAOT,SAASE,EAAcC,EAAaC,GAClC,OAAOD,EAAOE,KAAKC,UAAYF,EAAMD,GAGhC,MCdKI,EDcCC,EAAb,WAGE,SAAAA,EAAY7D,EAAeC,GAAiB3B,OAAAW,EAAA,EAAAX,CAAAY,KAAA2E,GAAA3E,KAF5C4E,OAAuB,GAGrB,IAAK,IAAIjD,EAAI,EAAGA,EAAIZ,EAAQY,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIZ,EAAOY,IACzB1B,KAAK4E,OAAOtE,KAAK,IAAIqD,EAAMjC,EAAGC,IANtC,OAAAvC,OAAAa,EAAA,EAAAb,CAAAuF,EAAA,EAAAzE,IAAA,MAAAC,MAAA,WAYI,IAAM0E,EAAQL,KAAKM,MAAMN,KAAKC,SAAWzE,KAAK4E,OAAOnC,QACrD,OAAOzC,KAAK4E,OAAOG,OAAOF,EAAO,GAAG,OAbxCF,EAAA,GAyBaK,EAAb,WAGE,SAAAA,EAAYC,GAA8B7F,OAAAW,EAAA,EAAAX,CAAAY,KAAAgF,GAAAhF,KAF1CiF,cAEyC,EACvCjF,KAAKiF,SAAWA,EAJpB,OAAA7F,OAAAa,EAAA,EAAAb,CAAA4F,EAAA,EAAA9E,IAAA,mBAAAC,MAAA,SAOmB+E,GAA2C,IAAAC,EACfnF,KAAKiF,SAAxCnE,EADkDqE,EAClDrE,MAAOC,EAD2CoE,EAC3CpE,OAAQqE,EADmCD,EACnCC,gBACjBC,EAAY,IAAIV,EAAe7D,EAAOC,GACtCE,EAAMoE,EAAUC,MAChBtE,EAAQqE,EAAUC,MAClBpE,EAAS+C,EAAMiB,GAAWxF,IAAI,SAAA6F,GAAC,OAAIF,EAAUC,QAC7CjC,EAAQ,IAAIxC,EAAMC,EAAOC,EAAQC,EAAOC,EAAKC,GAC7CsE,EAAWnC,EAAMoC,QACvB,OAAOD,GAAYJ,EAAgBM,SAASF,EAAS1F,MAAM2C,QAAU,IAAIW,EAAcC,EAAOmC,GAAY,OAf9G,CAAAtF,IAAA,iBAAAC,MAAA,SAkBiBoE,EAAaoB,GAU1B,IAV+D,IAAAC,EAM3D5F,KAAKiF,SAJPnE,EAF6D8E,EAE7D9E,MACAC,EAH6D6E,EAG7D7E,OACA8E,EAJ6DD,EAI7DC,gBACAC,EAL6DF,EAK7DE,gBAEIC,EAA+B,GACjCC,EAAW,EACTC,EAAmBzB,KAAKF,IAAIqB,EAAQ,GAAI,KACvCI,EAAOtD,OAAS8B,GAAOyB,EAAWL,GAEvC,IADA,IAAMT,EAAYpE,EAAQC,EAASsD,EAAcwB,EAAiBC,GACzD1B,EAAI,EAAG2B,EAAOtD,OAAS8B,GAAOH,EAAI6B,EAAkB7B,IAAK,CAChE4B,GAAY,EACZ,IAAM3C,EAAQrD,KAAKkG,iBAAiBhB,GAChC7B,GACF0C,EAAOzF,KAAK+C,GAKlB,OAAO0C,MAvCXf,EAAA,GE5CamB,EAAb,WAIE,SAAAA,IAA8B,IAAlBC,EAAkBC,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAH,EAAGjH,OAAAW,EAAA,EAAAX,CAAAY,KAAAmG,GAAAnG,KAH9BuG,aAG8B,EAAAvG,KAF9BoG,kBAE8B,EAC5BpG,KAAKuG,QAAU,IAAIC,KACnBxG,KAAKoG,aAAeA,EANxB,OAAAhH,OAAAa,EAAA,EAAAb,CAAA+G,EAAA,EAAAjG,IAAA,aAAAC,MAAA,WAUI,OAAO,IAAIqG,MAAOC,UAAYzG,KAAKuG,QAAQE,YAV/C,CAAAvG,IAAA,eAAAC,MAAA,WAaI,OAAOH,KAAKoG,aAAepG,KAAK0G,eAbpC,CAAAxG,IAAA,aAAAC,MAAA,WAgBI,OAAOH,KAAK2G,eAAiB3G,KAAKoG,eAhBtC,CAAAlG,IAAA,UAAAC,MAAA,SAkBUyG,GACN5G,KAAKoG,cAAgBQ,IAnBzB,CAAA1G,IAAA,gBAAAC,MAAA,WAsBI,OAAOqE,KAAKM,MAAM9E,KAAK0G,aAAe,KAAMnF,SAAS,MAtBzD,CAAArB,IAAA,kBAAAC,MAAA,WAyBI,OAAOqE,KAAKM,MAAM9E,KAAK2G,eAAiB,KAAMpF,SAAS,QAzB3D4E,EAAA,sCDKYzB,uGAkBZ,IAAMmC,GAAuBC,EAAA,GAAA1H,OAAA2H,EAAA,EAAA3H,CAAA0H,EAC1BpC,EAAWsC,KAAO,CACjBC,QAAS,EACTC,SAAU,EACVC,SAAU,EACVC,cAAe,EACfC,YAAa,IANYjI,OAAA2H,EAAA,EAAA3H,CAAA0H,EAQ1BpC,EAAW4C,OAAS,CACnBL,QAAS,EACTC,SAAU,IACVC,SAAU,GACVC,cAAe,EACfC,YAAa,KAbYjI,OAAA2H,EAAA,EAAA3H,CAAA0H,EAe1BpC,EAAW6C,KAAO,CACjBN,QAAS,EACTC,SAAU,EACVC,SAAU,GACVC,cAAe,EACfC,YAAa,KApBYjI,OAAA2H,EAAA,EAAA3H,CAAA0H,EAsB1BpC,EAAW8C,SAAW,CACrBP,QAAS,EACTC,SAAU,IACVC,SAAU,EACVC,cAAe,EACfC,YAAa,GACbI,gBAAiB,KA5BQX,GAiDvBY,aASJ,SAAAA,EAAYC,EAAmBC,GAAwB,IAAArH,EAAAP,KAAAZ,OAAAW,EAAA,EAAAX,CAAAY,KAAA0H,GAAA1H,KARvD2H,gBAQuD,EAAA3H,KAPvD4H,gBAOuD,EAAA5H,KANvDqH,iBAMuD,EAAArH,KALvD6H,iBAKuD,EAAA7H,KAJvD8H,QAAS,EAI8C9H,KAHvD+H,YAGuD,EAAA/H,KAFvDgI,eAAiB,aAGfhI,KAAK2H,WAAaA,EAClB3H,KAAK4H,WAAaA,EAClB5H,KAAK6H,YAAchB,EAAwBe,GAC3C5H,KAAK+H,OAAS,IAAIE,QAAQ,SAACC,EAASC,GAClC5H,EAAKyH,eAAiB,kBAAME,EAAQ3H,MAEtCP,KAAKqH,YAAcrH,KAAK6H,YAAYR,sEAGpC,OAAO3C,EAAW1E,KAAK4H,iDAGvB,OAAO5H,KAAK4H,aAAelD,EAAW8C,mDAGtC,IACMY,EAAY,KAAQ,IADFpI,KAAK6H,YAAYJ,iBAAmB,IAG5D,OAAO,IAAItB,EAAUnG,KAAKqI,aAAeD,OAAY9B,4CAIrD,MAAM,IAAInE,MAAM,gDAER0C,GACR,MAAM,IAAI1C,MAAM,uBAIdmG,cAGJ,SAAAA,EAAYX,EAAmBC,GAAwB,IAAAW,EAAA,OAAAnJ,OAAAW,EAAA,EAAAX,CAAAY,KAAAsI,IACrDC,EAAAnJ,OAAAoJ,EAAA,EAAApJ,CAAAY,KAAAZ,OAAAqJ,EAAA,EAAArJ,CAAAkJ,GAAAI,KAAA1I,KAAM2H,EAAYC,KAHpBe,mBAEuD,EAErDJ,EAAKI,cAAgB1E,EAAMsE,EAAKV,YAAYR,YAAckB,EAAKV,YAAYT,eACxEhG,OAAO,SAACwH,EAAoBC,GAE3B,OADAD,EAAIC,EAAMN,EAAKV,YAAYV,UAAY,GAChCyB,GACN,IANgDL,8EAgBrD,OAAOnJ,OAAOC,KAAKW,KAAK2I,eAAejJ,IAAIsE,YAAY8E,KALvD,SAAqBC,EAAWzH,GAC9B,OAAIyH,EAAIzH,GAAW,EACfyH,EAAIzH,EAAU,EACX,6CAKM,IACPqG,EAA2C3H,KAA3C2H,WAAYgB,EAA+B3I,KAA/B2I,cAAed,EAAgB7H,KAAhB6H,YAC3BX,EAA4BW,EAA5BX,SAAUE,EAAkBS,EAAlBT,cACZ4B,EAAoBhJ,KAAKiJ,eAAe3J,OAAO,SAAAC,GAAC,OAAIoJ,EAAcpJ,GAAGkD,OAAS2E,IACpF,GAAiC,IAA7B4B,EAAkBvG,OAGpB,OAFAzC,KAAK8H,QAAS,OACd9H,KAAKgI,iBAGP,IAAMkB,EAAmB,IAAIvF,EAAMgE,EAAWjG,EAAIwF,EAAUS,EAAWhG,EAAIuF,GAC/D,IAAIlC,EAAU,CACxBlE,MAAOoI,EAAiBxH,EACxBX,OAAQmI,EAAiBvH,EACzBkE,gBAAiB,IACjBC,gBAAiB,GACjBV,gBAAiB4D,IAEAG,eAAe,IAAK,KAChCvG,QAAQ,SAAAwG,GACb,IAAMC,EAAOV,EAAcS,EAAE9F,KAAKxD,MAAM2C,QACpC4G,GAAQA,EAAK5G,OAAS2E,GACxBiC,EAAK/I,KAAK8I,+EAKAvE,gFACd,MAAQ7E,KAAK8H,QACX9H,KAAKmJ,wBAEDpD,EAAS/F,KAAKiJ,eAAe7H,OAAO,SAAC+C,EAA2BjE,GAEpE,OADAiE,EAAI7D,KAAJgJ,MAAAnF,EAAG/E,OAAAuB,EAAA,EAAAvB,CAASmK,EAAKZ,cAAczI,KACxBiE,GACN,sBACI4B,EAAOlB,8GAxDQ6C,GA4DpB8B,cAIJ,SAAAA,EAAY7B,GAAmB,IAAA8B,EAAA,OAAArK,OAAAW,EAAA,EAAAX,CAAAY,KAAAwJ,IAC7BC,EAAArK,OAAAoJ,EAAA,EAAApJ,CAAAY,KAAAZ,OAAAqJ,EAAA,EAAArJ,CAAAoK,GAAAd,KAAA1I,KAAM2H,EAAYjD,EAAW8C,YAJ/BzB,OAA+B,GAGA0D,EAF/BC,UAAY,EAEmBD,gFAId,IAAAE,EACPhC,EAA+C3H,KAA/C2H,WAAY5B,EAAmC/F,KAAnC+F,OAAQ8B,EAA2B7H,KAA3B6H,YAAa6B,EAAc1J,KAAd0J,UACjCxC,EAAaW,EAAbX,SACR,GAAInB,EAAOtD,OAASiH,EAAY,GAG9B,OAFA1J,KAAK8H,QAAS,OACd9H,KAAKgI,iBAIP,IDjLsBhH,EAAeyB,ECiL/ByG,EAAmB,IAAIvF,EAAMgE,EAAWjG,EAAIwF,EAAUS,EAAWhG,EAAIuF,GACrE0C,EAAM,IAAI5E,EAAU,CACxBlE,MAAOoI,EAAiBxH,EACxBX,OAAQmI,EAAiBvH,EACzBkE,gBAAiB,IACjBC,gBAAiB,GACjBV,iBDvLoBpE,ECuLO6G,EAAYV,SDvLJ1E,ECuLc,GDtL9CwB,EAAMxB,GAAQ/C,IAAI,SAAA0E,GAAC,OAAIA,EAAIpD,QCwLhC2I,EAAA3J,KAAK+F,QAAOzF,KAAZgJ,MAAAK,EAAAvK,OAAAuB,EAAA,EAAAvB,CAAoBwK,EAAIT,eAAe,GAAI,MACvCpD,EAAOtD,OAASiH,EAAY,IAC9BG,QAAQC,IAAI,8FAIAjF,mEACd,KAAOA,EAAQ7E,KAAK+F,OAAOtD,QACzBzC,KAAKmJ,wBAEPnJ,KAAK0J,UAAY7E,oBACV7E,KAAK+F,OAAOlB,8GApCK6C,GAwCfqC,EAAb,WAGE,SAAAA,EAAYpC,GAAoBvI,OAAAW,EAAA,EAAAX,CAAAY,KAAA+J,GAAA/J,KAFhCgK,aAE+B,EAC7BhK,KAAKgK,QAAL,CACE,IAAIR,EAAc7B,IADpBvF,OAAAhD,OAAAuB,EAAA,EAAAvB,CAEK,CACDsF,EAAWsC,KACXtC,EAAW4C,OACX5C,EAAW6C,MACX7H,IAAI,SAAAuK,GAAC,OAAI,IAAI3B,EAAYX,EAAYsC,OAV7C,OAAA7K,OAAAa,EAAA,EAAAb,CAAA2K,EAAA,EAAA7J,IAAA,wBAAAC,MAAA,SAcwByH,GACpB,OAAO5H,KAAKgK,QAAQ1K,OAAO,SAAA4K,GAAC,OAAIA,EAAEtC,aAAeA,IAAY,KAfjE,CAAA1H,IAAA,mBAAAC,MAAA,WAmBI,IAAMgK,EAASnK,KAAKgK,QAAQ1K,OAAO,SAAA4K,GAAC,OAAKA,EAAEpC,SAAQ,GAC/CqC,IACFA,EAAOhB,iBACHgB,EAAOrC,QACT+B,QAAQC,IAAI,UAAWpF,EAAWyF,EAAOvC,kBAvBjDmC,EAAA,WEnNaK,EAKX,SAAAA,EAAYC,GAAqBjL,OAAAW,EAAA,EAAAX,CAAAY,KAAAoK,GAAApK,KAJjCsK,SAIgC,EAAAtK,KAHhCuK,WAGgC,EAAAvK,KAFhC8H,YAEgC,EAC9B,IAAMwC,EAAG,UAAAlI,OAAaiI,EAAb,QACHG,EAAM,IAAIC,MACV3C,EAAS,IAAIG,QAAQ,SAACC,EAASC,GACnCqC,EAAIE,OAAS,kBAAMxC,GAAQ,MAE7BsC,EAAIG,IAAML,EAEVtK,KAAKsK,IAAMA,EACXtK,KAAKuK,MAAQC,EACbxK,KAAK8H,OAASA,GAIL8C,EAAb,WAKE,SAAAA,EAAYC,GAA6BzL,OAAAW,EAAA,EAAAX,CAAAY,KAAA4K,GAAA5K,KAJzC8K,YAIwC,EAAA9K,KAHxC8H,YAGwC,EAAA9H,KAFxC+K,aAEwC,EACtC/K,KAAK8K,OAASD,EAAYnL,IAAI,SAAA2K,GAAU,OAAI,IAAID,EAAYC,KAC5DrK,KAAK8H,OAASG,QAAQ+C,IAAIhL,KAAK8K,OAAOpL,IAAI,SAAAuL,GAAC,OAAIA,EAAEnD,UACjD9H,KAAK+K,QAAU/K,KAAKkL,QAAQ,GARhC,OAAA9L,OAAAa,EAAA,EAAAb,CAAAwL,EAAA,EAAA1K,IAAA,UAAAC,MAAA,SAWUgL,GAAY,IACVL,EAAW9K,KAAX8K,OAER,OAAOA,EADOK,EAAaL,EAAOrI,YAbtCmI,EAAA,GAgCMQ,EAAe,CACnBC,SAAU,IAAIT,EAAO,CAAC,iBACtBU,UAAW,IAAIV,EAAO,CAAC,kBACvBW,cAAe,IAAIX,EAAO,CAAC,oBAC3BY,cAAe,IAAIZ,EAAO,CAAC,oBAC3Ba,cAAe,IAAIb,EAAO,CAAC,oBAC3Bc,eAAgB,IAAId,EAAO,CAAC,qBAC5Be,UAAW,IAAIf,EAAO,CAAC,aAAc,kBAAmB,aAAc,qBACtEgB,UAAW,IAAIhB,EAAO,CAAC,aAAc,mBAAoB,aAAc,oBACvEiB,MAAO,IAAIjB,EAAO,CAAC,WAERkB,EAAsB1M,OAAA2M,EAAA,EAAA3M,CAAA,GAC9BgM,EAD8B,CAEjCtD,OAAQG,QAAQ+C,IAAI5L,OAAO4M,OAAOZ,GAAc1L,IAAI,SAAAuM,GAAC,OAAIA,EAAEnE,UAASoE,KAAK,kBAAM,MAEjFC,OAAOL,QAAUA,EAEV,MAAMM,EACG,wBADHA,EAEA,qBCnEAC,EACM,QADNA,EAEA,2BAGAC,GAAiBC,EAAA,GAAAnN,OAAA2H,EAAA,EAAA3H,CAAAmN,EAC3B7H,EAAWsC,KAAO,CACjBwF,MAAO,qCACPC,OAAQX,EAAQJ,eAChBgB,UAAW,QACXC,QAASP,IALiBhN,OAAA2H,EAAA,EAAA3H,CAAAmN,EAO3B7H,EAAW4C,OAAS,CACnBkF,MAAO,mCACPC,OAAQX,EAAQP,cAChBmB,UAAW,QACXC,QAASP,IAXiBhN,OAAA2H,EAAA,EAAA3H,CAAAmN,EAa3B7H,EAAW6C,KAAO,CACjBiF,MAAO,qCACPC,OAAQX,EAAQN,cAChBkB,UAAW,QACXC,QAASP,IAjBiBhN,OAAA2H,EAAA,EAAA3H,CAAAmN,EAmB3B7H,EAAW8C,SAAW,CACrBgF,MAAO,iCACPC,OAAQX,EAAQL,cAChBiB,UAAW,QACXC,QAASP,IAvBiBG,4FCF9B,IAAMK,EAASC,IAAOC,IAAVC,KASNC,6MACJC,iBACAC,WAAa,KACbC,cAAgB,qFAEGC,GAAW,IACpBH,EAAwBjN,KAAxBiN,QAASC,EAAelN,KAAfkN,WADWG,EAEHrN,KAAKsN,MAAMC,MAA5BC,EAFoBH,EAEpBG,MAAOC,EAFaJ,EAEbI,MAKf,GAJKD,EAAME,UAET1N,KAAKkN,WAAa,IAEhBO,EAAO,CACLA,IAAUL,EAAUG,MAAME,OAE5BzN,KAAK2N,UAEP,IAAMC,EAAMV,EAAWO,EAAM7F,YACzBgG,GAEF5N,KAAK6N,QAAQD,QAIXX,IAAYG,EAAUG,MAAME,OAC9BzN,KAAK6N,QAAQZ,mCAIXW,GAAuB,IACrBT,EAAkBnN,KAAlBmN,cACJS,EAAIE,SAAWX,IACjBS,EAAIE,OAASX,GAEfS,EAAIG,uCAEEH,GACNA,EAAII,QACJJ,EAAIK,YAAc,oCAEV,IAAA1F,EAAAvI,KACAiN,EAAwBjN,KAAxBiN,QAASC,EAAelN,KAAfkN,WACjBD,GAAWjN,KAAKkO,QAAQjB,GACxB7N,OAAOC,KAAK6N,GAAYtK,QAAQ,SAAAuL,GAAI,OAAI5F,EAAK2F,QAAQhB,EAAWiB,uCAEzD,IAAA5E,EAAAvJ,KAEP,OADoBA,KAAKsN,MAAMC,MAAMC,MAA7BE,SAENU,EAAArF,EAAAsF,cAACzB,EAAD,KACEwB,EAAArF,EAAAsF,cAAA,SACEC,MAAI,EACJ3D,IAAK0B,EACLkC,IAAK,SAAAX,GAAG,OAAIrE,EAAK0D,QAAUW,KAE5BxO,OAAOC,KAAKiN,GAAmB5M,IAAI,SAAAyO,GAAI,OACtCC,EAAArF,EAAAsF,cAAA,SACEnO,IAAKiO,EACLG,MAAI,EACJ3D,IAAK2B,EAAkB6B,GAAM3B,MAC7B+B,IAAK,SAAAX,GAAG,OAAIrE,EAAK2D,WAAWiB,GAAQP,eA3DrBY,IAAMC,WAmEpBC,GAAcC,YACzB,SAACpB,GAAD,MAAuB,CACrBA,UAFuBoB,CAIzB3B,YCtFW4B,GAAgB,gBAChBC,GAAY,YACZC,GAAY,YACZC,GAAY,YACZC,GAAe,eACfC,GAAiB,iBC6BxBC,GAA0B,CAC9B1B,MAAO,CAELE,SAAS,GAEXyB,SAnCkB,WAClB,IAEUpG,EAFNqG,GAAQ,EAGZ,OADUrG,EAAy7DsG,UAAUC,WAAWD,UAAUE,QAAQpD,OAAOqD,OAAj+D,2TAA2TC,KAAK1G,IAAI,0kDAA0kD0G,KAAK1G,EAAE2G,OAAO,EAAE,OAAKN,GAAQ,GACp7DA,EA+BGO,GACVC,iBAAkB,EAClBC,eAAgB,EAChBxM,MAAO,EACPoK,WAAOnH,EACPwJ,YAAY,EACZC,aAAa,GA0DAC,OAvDf,WAA2D,IAA1CC,EAA0C5J,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAlC6I,GAAcgB,EAAoB7J,UAAA5D,OAAA,EAAA4D,UAAA,QAAAC,EACzD,OAAQ4J,EAAOC,MACb,KAAKvB,GACH,OAAOxP,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEEH,YAAY,IAGhB,KAAKjB,GAAW,IACNxL,EAAU6M,EAAOE,QAAjB/M,MACR,OAAOjE,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEE5M,UAGJ,KAAKyL,GAAW,IACNuB,EAAcH,EAAOE,QAArBC,UACR,OAAOjR,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEEJ,eAAgBQ,GAAaA,EAAUC,gBACvCV,iBAAkBS,GAAaA,EAAUE,oBAG7C,KAAKxB,GAAW,IACNtB,EAAUyC,EAAOE,QAAjB3C,MACR,OAAOrO,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEEH,YAAY,EACZrC,QACAD,MAAMpO,OAAA2M,EAAA,EAAA3M,CAAA,GACD6Q,EAAMzC,SAIf,KAAKwB,GACH,OAAO5P,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEEzC,MAAMpO,OAAA2M,EAAA,EAAA3M,CAAA,GACD6Q,EAAMzC,MADN,CAEHE,SAAUuC,EAAMzC,MAAME,YAI5B,KAAKuB,GACH,OAAO7P,OAAA2M,EAAA,EAAA3M,CAAA,GACF6Q,EADL,CAEEF,aAAcE,EAAMF,cAGxB,QACE,OAAOE,ICnFAO,GAAW,SAACH,GAAD,MAA2B,CACjDF,KAAMrB,GACNsB,QAAS,CACPC,eAISI,GAAW,SAAChD,GAAD,MAAoB,CAC1C0C,KAAMpB,GACNqB,QAAS,CACP3C,WASSiD,GAAgB,iBAAO,CAClCP,KAAMlB,GACNmB,QAAS,KCjCE7C,GAAQoD,aAAYC,kzDCA1B,IAAMC,GAAMhE,IAAOC,IAAVgE,MAOHC,GAASlE,YAAOgE,GAAPhE,CAAHmE,MAINC,GAAoBpE,YAAOkE,GAAPlE,CAAHqE,MAUjBC,GAAetE,YAAOoE,GAAPpE,CAAHuE,KAEEtF,EAAQJ,eAAeX,QAAQT,KAI7C+G,GAAaxE,IAAOC,IAAVwE,MAgBVC,GAAgB1E,IAAOC,IAAV0E,MAiBbC,GAAc5E,YAAO0E,GAAP1E,CAAH6E,MAaXC,GAAY9E,YAAO4E,GAAP5E,CAAH+E,m4BChEtB,OAAMC,GAAYhF,IAAOC,IAAVgF,MAQTC,GAAelF,YAAOgE,GAAPhE,CAAHmF,MAIZC,GAASpF,YAAOkF,GAAPlF,CAAHqF,MAMNC,GAAStF,YAAOkF,GAAPlF,CAAHuF,MAINC,GAAkBxF,IAAOC,IAAVwF,MAIfC,GAAgB1F,IAAOC,IAAV0F,KAMQ,SAAAlF,GAAK,OAAIA,EAAMhD,MAWpCmI,oLACK,IAAAlS,EAAAP,KAAA0S,EAC4B1S,KAAKsN,MAAhCqF,EADDD,EACCC,GAAIpF,EADLmF,EACKnF,MADLF,GAAAqF,EACYE,YACkD5S,KAAKsN,MAAMC,OAA9DE,GAFXJ,EAEC8B,SAFD9B,EAEWI,OAAOpK,EAFlBgK,EAEkBhK,MAAOuM,EAFzBvC,EAEyBuC,iBAAkBC,EAF3CxC,EAE2CwC,eAC5ClD,EAAUY,EAAME,MAAQnB,EAAkBiB,EAAME,MAAM7F,YAAY+E,QAAU,GAClF,OACEyB,EAAArF,EAAAsF,cAACwD,GAAD,KACEzD,EAAArF,EAAAsF,cAAC4D,GAAD,KACE7D,EAAArF,EAAAsF,cAAC0C,GAAD,KACE3C,EAAArF,EAAAsF,cAAA,oBAAYhL,EAAQ,IAEtB+K,EAAArF,EAAAsF,cAAC0C,GAAD,KACE3C,EAAArF,EAAAsF,cAAA,WAAMZ,GAASA,EAAMpF,aAAeuH,EAAmBC,EAAvD,OAGJzB,EAAArF,EAAAsF,cAACgE,GAAD,CAAiBQ,QAASF,EAAGG,WAC1B9S,KAAKsN,MAAMyF,SACZ3E,EAAArF,EAAAsF,cAACkE,GAAD,CAAejI,IAAKqC,KAEtByB,EAAArF,EAAAsF,cAAC8D,GAAD,KACE/D,EAAArF,EAAAsF,cAAC0C,GAAD,KACE3C,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAASF,EAAGK,YAAvB,gBAIF5E,EAAArF,EAAAsF,cAAC0C,GAAD,KACE3C,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAAS,kBAAMtS,EAAK+M,MAAMoD,kBAArC,qBA1BYlC,IAAMC,WAqCjBwE,GAAWtE,YACtB,SAACpB,GAAD,MAAuB,CACrBA,UAEF,CACEmD,kBALoB/B,CAOtB8D,sgBC1FF,IAAMS,GAAuBrG,YAAOgE,GAAPhE,CAAHsG,MAMpBC,GAAYvG,IAAOwG,GAAVC,MAOTC,GAAa1G,IAAO2G,GAAVC,MAGVC,GAAc7G,IAAO8G,GAAVC,MAoBXC,IAAYC,GAAA,GAAA1U,OAAA2H,EAAA,EAAA3H,CAAA0U,GACfpP,EAAWsC,MAAO,GADH5H,OAAA2H,EAAA,EAAA3H,CAAA0U,GAEfpP,EAAW4C,QAAS,GAFLlI,OAAA2H,EAAA,EAAA3H,CAAA0U,GAGfpP,EAAW6C,MAAO,GAHHnI,OAAA2H,EAAA,EAAA3H,CAAA0U,GAIfpP,EAAW8C,UAAW,GAJPsM,IAOZC,8MACJ9D,qBAAa4D,uFAGX7T,KAAKgU,wCAEC,IAAAzL,EAAAvI,KACNA,KAAKiU,SAAL7U,OAAA2M,EAAA,EAAA3M,CAAA,GACKyU,IACF,WACDtL,EAAK+E,MAAMqF,GAAGuB,YAAYlK,QAAQpH,QAAQ,SAAA6K,GACxCA,EAAM1F,OAAOmE,KAAK,WAChBJ,EAAQhE,OAAOoE,KAAK,WAClB3D,EAAK0L,SAAL7U,OAAA2H,EAAA,EAAA3H,CAAA,GACGqO,EAAM7F,YAAa,8CAOtB6F,GACJA,EAAM3F,SACR9H,KAAKsN,MAAMqF,GAAGlC,SAAShD,GACvBzN,KAAKgU,0CAIA,IAAAzK,EAAAvJ,KACCuN,EAAUvN,KAAKsN,MAAfC,MACA0C,EAAUjQ,KAAViQ,MACAiE,EAAgBlU,KAAKsN,MAAMqF,GAA3BuB,YACR,GAAI3G,EAAME,MACR,MAAO,GAET,IAAM0G,EAAe,CACnBzP,EAAWsC,KACXtC,EAAW4C,OACX5C,EAAW6C,KACX7C,EAAW8C,UAEb,OACE4G,EAAArF,EAAAsF,cAAC8C,GAAD,KACE/C,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAAC+E,GAAD,KACEhF,EAAArF,EAAAsF,cAAA,sBACAD,EAAArF,EAAAsF,cAAA,WACAD,EAAArF,EAAAsF,cAAA,OAAK+F,IAAI,GAAGzJ,IAAKmB,EAAQD,MAAMd,QAAQT,MACvC8D,EAAArF,EAAAsF,cAAA,OAAK+F,IAAI,GAAGzJ,IAAKmB,EAAQT,SAASN,QAAQT,SAIhD8D,EAAArF,EAAAsF,cAAC6E,GAAD,KACGiB,EAAazU,IAAI,SAAAuK,GAAC,OAAIiK,EAAYG,sBAAsBpK,KAAIvK,IAAI,SAAA+N,GAAK,OACpEW,EAAArF,EAAAsF,cAACgD,GAAD,CAAYnR,IAAKuN,EAAM7F,YACrBwG,EAAArF,EAAAsF,cAACkF,GAAD,KACG9F,EAAM6G,eAETlG,EAAArF,EAAAsF,cAAA,WACGZ,EAAMpF,aAAe,SAAMoF,EAAMpG,YADpC,WAGA+G,EAAArF,EAAAsF,cAACqF,GAAD,KACGzD,EAAMxC,EAAM7F,YACXwG,EAAArF,EAAAsF,cAACoD,GAAD,CAAaoB,QAAS,kBAAMtJ,EAAKgL,UAAU9G,KAA3C,QAIEW,EAAArF,EAAAsF,cAACkD,GAAD,qBAQZnD,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAAS,kBAAMtJ,EAAK+D,MAAMoD,kBAArC,aAKJtC,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAAA,sBACUD,EAAArF,EAAAsF,cAAA,KAAGmG,KAAK,kCAAR,gBAEVpG,EAAArF,EAAAsF,cAAA,wBACYD,EAAArF,EAAAsF,cAAA,KAAGmG,KAAK,yBAAR,UADZ,eAEWpG,EAAArF,EAAAsF,cAAA,KAAGmG,KAAK,iEAAR,sBA1FChG,IAAMC,WAmGjBgG,GAAW9F,YACtB,SAACpB,GAAD,MAAuB,CACrBA,UAEF,CACEmD,kBALoB/B,CAOtBoF,IC/IIW,8MACJC,QAAU,WACRpU,EAAK+M,MAAMqF,GAAGiC,sFAEP,IAAArM,EAAAvI,KAAA0S,EACe1S,KAAKsN,MAAnBqF,EADDD,EACCC,GACR,OAFOD,EACKnF,MACDwC,YAIT3B,EAAArF,EAAAsF,cAAC8C,GAAD,KACE/C,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAAA,wBAEFD,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAAS,kBAAMtK,EAAK+E,MAAMsF,gBAArC,YACY5S,KAAKsN,MAAMC,MAAMC,MAAME,QAAU,KAAO,QAGtDU,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAASF,EAAGkC,iBAAvB,kBAMNzG,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACsD,GAAD,CAAWkB,QAAS,kBAAMtK,EAAK+E,MAAMoD,kBAArC,aAxBD,UAPclC,IAAMC,WA0CpBqG,GAAcnG,YACzB,SAACpB,GAAD,MAAuB,CACrBA,UAEF,CACEqF,YLjCuB,iBAAO,CAChCzC,KAAMnB,GACNoB,QAAS,KKgCPM,kBANuB/B,CAQzB+F,ICpDIK,8MACJJ,QAAU,WACRpU,EAAK+M,MAAMqF,GAAGiC,sFAEP,IAAAlC,EACe1S,KAAKsN,MAAnBqF,EADDD,EACCC,GAAIpF,EADLmF,EACKnF,MACJE,EAAsBF,EAAtBE,MAAOqC,EAAevC,EAAfuC,WACf,OAAMrC,GAASqC,EAIb1B,EAAArF,EAAAsF,cAAC8C,GAAD,KACE/C,EAAArF,EAAAsF,cAACwC,GAAD,KACEzC,EAAArF,EAAAsF,cAACgD,GAAD,KACEjD,EAAArF,EAAAsF,cAAA,UACGZ,EAAMpF,aAAN,yBAEH+F,EAAArF,EAAAsF,cAAA,SACED,EAAArF,EAAAsF,cAAA,OAAK+F,IAAI,GAAGzJ,IAAKmB,EAAQD,MAAMd,QAAQT,MACvC8D,EAAArF,EAAAsF,cAAA,OAAK2G,UAAU,SAASZ,IAAI,GAAGzJ,IAAKmB,EAAQT,SAASN,QAAQT,OAE9DmD,EAAMpF,aACL+F,EAAArF,EAAAsF,cAAA,WACED,EAAArF,EAAAsF,cAAA,oCAC2BsE,EAAGsC,kBAAoB,EADlD,aAKF7G,EAAArF,EAAAsF,cAAA,WACED,EAAArF,EAAAsF,cAAA,gCACuBZ,EAAM6G,cAD7B,OACgD/G,EAAMsC,eADtD,aAGAzB,EAAArF,EAAAsF,cAAA,gEAKJD,EAAArF,EAAAsF,cAACoD,GAAD,CAAaoB,QAAS7S,KAAK2U,SAA3B,WA7BC,UARYnG,IAAMC,WA6ClByG,GAAYvG,YACvB,SAACpB,GAAD,MAAuB,CACrBA,UAFqBoB,CAIvBoG,ICxDII,GAAoC,CACxCC,UAAanW,EAAK8C,KAClBsT,WAAcpW,EAAK+C,MACnBsT,QAAWrW,EAAKgD,GAChBsT,UAAatW,EAAKiD,MAQPsT,GAAb,WAkBE,SAAAA,IAAc,IAAAjV,EAAAP,KAAAZ,OAAAW,EAAA,EAAAX,CAAAY,KAAAwV,GAAAxV,KAjBdyV,SAAWlI,GAAMkI,SAiBHzV,KAhBd0V,QAAUvJ,OAAOwJ,SAASnB,KAAK9O,SAAS,aAgB1B1F,KAfdkU,iBAec,EAAAlU,KAdd4V,qBAcc,EAAA5V,KAbd6V,sBAac,EAAA7V,KAZd8V,eAYc,EAAA9V,KAXd+V,SAWc,EAAA/V,KAVdyN,WAUc,EAAAzN,KATdqQ,UAAY,IAAIlK,EASFnG,KARdgW,kBAQc,EAAAhW,KAPdiV,kBAAoB,EAONjV,KANdiW,kBAMc,EAAAjW,KALdkW,kBAKc,EAAAlW,KAJdmW,kBAAsC,GAIxBnW,KAHdoW,gBAAiB,EAGHpW,KAFdqW,UAAY,EAEErW,KAwEdgT,WAAa,WACXzS,EAAKyV,cAAgBzV,EAAKyV,aAAahC,SAzE3BhU,KA2Ed6U,gBAAkB,WAChBtU,EAAK6V,gBAAkB7V,EAAK6V,gBA5EhBpW,KA8Ed8S,UAAY,SAAAwD,GACV,IAAMC,EAAOD,EAAIE,OAAOC,wBAClB/U,EAAI4U,EAAII,QAAUH,EAAKI,KACvBhV,EAAI2U,EAAIM,QAAUL,EAAKM,IACvBC,EAAKpV,EAAI6U,EAAKzV,MACdiW,EAAKpV,EAAI4U,EAAKxV,OACdiW,EAAaF,EAAKC,EAClBE,EAAYH,EAAKC,EAAK,EACtB1W,EACH4W,GAAaD,GAAc/X,EAAKgD,KAC/BgV,GAAaD,GAAc/X,EAAK+C,QAChCiV,IAAcD,GAAc/X,EAAKiD,MAClC+U,IAAcD,GAAc/X,EAAK8C,KAEhC1B,GACFE,EAAK2W,WAAW7W,IA7FNL,KAgGdmX,QAAU,WACR5W,EAAK2W,WAAWjY,EAAKgD,KAjGTjC,KAmGdoX,UAAY,WACV7W,EAAK2W,WAAWjY,EAAKiD,OApGTlC,KAsGdqX,UAAY,WACV9W,EAAK2W,WAAWjY,EAAK8C,OAvGT/B,KAyGdsX,WAAa,WACX/W,EAAK2W,WAAWjY,EAAK+C,QA1GT,IACJ0T,EAAY1V,KAAZ0V,QACJA,IACFvJ,OAAOoL,MAAQvX,MAIjB,IAAMwX,EAA4C,GAA7BC,SAASC,KAAKC,aAC7BC,EAAcH,SAASC,KAAKG,YAI5BlQ,EADa6P,EAAeI,EACF,IAAIjU,EAAM,EAAG,IAAM,IAAIA,EAAM,GAAI,GACjE3D,KAAK4V,gBAAkBjO,EACvB3H,KAAKkU,YAAc,IAAInK,EAAY/J,KAAK4V,iBAKxC,IAFA,IAAIkC,EAAeN,EACfO,EAAcD,EAAenQ,EAAWjG,EAAIiG,EAAWhG,EACpDoW,EAAcH,GAEnBG,GADAD,GAAgB,GACanQ,EAAWjG,EAAIiG,EAAWhG,EAEzD3B,KAAK6V,iBAAmB,IAAIlS,EAAMoU,EAAaD,GAG/C3L,OAAO6L,iBAAiB,UAAW,SAAAC,GAEjC,IAAM5X,EAAO8U,GAAQ8C,EAAEC,YAAS5R,EAC5BjG,GACFE,EAAK2W,WAAW7W,GAEH,SAAX4X,EAAEC,MACJ3X,EAAKyS,aAEQ,SAAXiF,EAAEC,MAAmBxC,GACvBnV,EAAK4X,cAKTnY,KAAKsO,OA3DT,OAAAlP,OAAAa,EAAA,EAAAb,CAAAoW,EAAA,EAAAtV,IAAA,QAAAC,MAAA,SA6DQ2V,GACJ9V,KAAK8V,UAAYA,EACjBA,EAAUhV,MAAQd,KAAK6V,iBAAiBnU,EACxCoU,EAAU/U,OAASf,KAAK6V,iBAAiBlU,EACzC3B,KAAK+V,IAAMD,EAAUsC,WAAW,QAjEpC,CAAAlY,IAAA,OAAAC,MAAA,eAAA6C,EAAA5D,OAAAiZ,EAAA,EAAAjZ,CAAAkZ,EAAAvP,EAAAwP,KAAA,SAAAC,IAAA,IAAA/K,EAAA4C,EAAA9H,EAAAvI,KAAA,OAAAsY,EAAAvP,EAAA0P,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAA5W,MAAA,UAoEY2L,EAAqBzN,KAArByN,MAAO4C,EAAcrQ,KAAdqQ,WACX5C,EArER,CAAAiL,EAAA5W,KAAA,eAAA4W,EAAA5W,KAAA,EAsEY9B,KAAK4Y,OAtEjB,OAuEUnL,EAAMpF,cACRoF,EAAMtE,iBACFkH,EAAU1J,iBAAmB4G,GAAMsL,WAAWjJ,kBAChD5P,KAAKyV,SAASjF,GAASH,IAErBA,EAAU1J,eAAiB,GAC7B3G,KAAK8Y,mBAGHzI,EAAU3J,eAAiB6G,GAAMsL,WAAWhJ,gBAC9C7P,KAAKyV,SAASjF,GAASH,IAjFjCqI,EAAA5W,KAAA,eAoFgByL,GAAMsL,WAAW/I,YAC3B9P,KAAKkU,YAAY6E,mBArFvB,OAuFI5M,OAAO6M,sBAAsB,kBAAMzQ,EAAK+F,SAvF5C,wBAAAoK,EAAAO,SAAAT,EAAAxY,SAAA,yBAAAgD,EAAAsG,MAAAtJ,KAAAqG,YAAA,KAAAnG,IAAA,WAAAC,MAAA,SA+HWsN,GACPzN,KAAKkU,YAAc,IAAInK,EAAY/J,KAAK4V,iBACxC5V,KAAKyN,MAAQA,EACbzN,KAAKiV,kBAAoB,EACzBjV,KAAKqQ,UAAY5C,EAAMyL,kBACvBlZ,KAAKmY,YACLnY,KAAKyV,SAAShF,GAAShD,MArI3B,CAAAvN,IAAA,aAAAC,MAAA,WAyIIH,KAAKyN,WAAQnH,EACbtG,KAAKyV,SAAShF,QAASnK,MA1I3B,CAAApG,IAAA,kBAAAC,MAAA,WA6IIH,KAAKyN,WAAQnH,EACbtG,KAAKyV,SP7JyB,CAChCtF,KAAMvB,GACNwB,QAAS,OOaX,CAAAlQ,IAAA,aAAAC,MAAA,SAiJaE,GAAY,IACb2V,EAAiBhW,KAAjBgW,aACR,GAAKA,EAAL,CAGA,IAAMtS,EAAWsS,EAAamD,SAAS9Y,GAEvCL,KAAKiW,aAAe,CAAChX,EAAK8C,KAAM9C,EAAK+C,OAAO0D,SAASrF,GAAQA,EAC3DL,KAAKiW,eAAiBhX,EAAK+C,MAAQ/C,EAAK8C,KAAO9C,EAAK+C,MAEtDhC,KAAKoZ,YAAY1V,GACbsS,EAAa3S,MAAMf,eAAeoB,EAAS9D,QAC7CI,KAAKmY,eA7JX,CAAAjY,IAAA,YAAAC,MAAA,eAAAkZ,EAAAja,OAAAiZ,EAAA,EAAAjZ,CAAAkZ,EAAAvP,EAAAwP,KAAA,SAAAe,IAAA,IAAArE,EAAAxH,EAAA0K,EAAA,OAAAG,EAAAvP,EAAA0P,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAzX,MAAA,UAiKYmT,EAA6BjV,KAA7BiV,kBAAmBxH,EAAUzN,KAAVyN,MAjK/B,CAAA8L,EAAAzX,KAAA,cAmKY,IAAIK,MAAM,kCAnKtB,cAAAoX,EAAAzX,KAAA,EAuK4B2L,EAAM+L,UAAUvE,GAvK5C,OAuKUkD,EAvKVoB,EAAAE,KAwKIzZ,KAAKgW,aAAemC,GAAa,IAAI5U,EAAc4U,GAC/CnY,KAAKgW,cACPnM,QAAQC,IAAI9J,KAAKgW,aAAa1S,KAAKoW,cACnC1Z,KAAKyV,UPrLcpS,EOqLIrD,KAAKiV,kBPrLU,CAC1C9E,KAAMtB,GACNuB,QAAS,CACP/M,YOmLErD,KAAKiV,mBAAqB,EAC1BjV,KAAKqQ,UAAUsJ,QAAQ,KAAQlM,EAAM5F,YAAYJ,iBAAmB,KAEpEzH,KAAK8Y,kBA/KX,wBAAAS,EAAAN,OPVwB,IAAC5V,GOUzBiW,EAAAtZ,SAAA,yBAAAqZ,EAAA/P,MAAAtJ,KAAAqG,YAAA,KAAAnG,IAAA,cAAAC,MAAA,SAmLcuD,GAA2B,IAAAkW,EAC/BC,EAAanW,EAAS7B,SAASiY,MAAM,GAAI,GAAGpa,IAAI,SAACqa,EAAG3V,EAAGD,GAAP,MAAgB,CACpEtC,SAAUkY,EACV1J,UAAW,IAAIlK,EAAU,KAAQ,EAAK/B,EAAID,EAAI1B,aAEhDmX,EAAA5Z,KAAKmW,mBAAkB7V,KAAvBgJ,MAAAsQ,EAAAxa,OAAAuB,EAAA,EAAAvB,CAA+Bya,MAxLnC,CAAA3Z,IAAA,aAAAC,MAAA,SA0La6Z,EAAgBtY,EAAWC,EAAWsY,GAAgB,IACvDnE,EAAiC9V,KAAjC8V,UAAWC,EAAsB/V,KAAtB+V,IAAKC,EAAiBhW,KAAjBgW,aAChBlV,EAAkBgV,EAAlBhV,MAAOC,EAAW+U,EAAX/U,OACTmZ,EAAapZ,EAAQkV,EAAa3S,MAAMvC,MACxCqZ,EAAcpZ,EAASiV,EAAa3S,MAAMtC,OAChDkZ,EAAQA,GAAS,EACjBlE,EAAIqE,UACFJ,EAAO9O,QAAQlL,KAAKqW,WAAW9L,MAC/B7I,EAAIwY,EAAcA,GAAc,EAAID,GAAS,EAC7CtY,EAAIwY,EAAeA,GAAe,EAAIF,GAAS,EAC/CC,EAAaD,EACbE,EAAcF,KArMpB,CAAA/Z,IAAA,wBAAAC,MAAA,SAwMwBka,EAAeL,EAAgBtY,EAAWC,EAAWsY,GAAgB,IACjFlE,EAAQ/V,KAAR+V,IACFuE,EAAWvE,EAAIwE,YACrBxE,EAAIwE,YAAcF,EAClBra,KAAKwa,WAAWR,EAAQtY,EAAGC,EAAGsY,GAC9BlE,EAAIwE,YAAcD,IA7MtB,CAAApa,IAAA,OAAAC,MAAA,eAAAsa,EAAArb,OAAAiZ,EAAA,EAAAjZ,CAAAkZ,EAAAvP,EAAAwP,KAAA,SAAAmC,IAAA,IAAA5E,EAAAC,EAAAC,EAAAvI,EAAA3M,EAAAC,EAAAmZ,EAAAC,EAAAQ,EAAAhZ,EAAAD,EAAAkZ,EAAAC,EAAAtR,EAAAvJ,KAAA,OAAAsY,EAAAvP,EAAA0P,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAhZ,MAAA,UAgNYgU,EAAwC9V,KAAxC8V,UAAWC,EAA6B/V,KAA7B+V,IAAKC,EAAwBhW,KAAxBgW,aAAcvI,EAAUzN,KAAVyN,MACjCqI,GAAcC,EAjNvB,CAAA+E,EAAAhZ,KAAA,eAAAgZ,EAAAC,OAAA,wBAoNYja,EAAkBgV,EAAlBhV,MAAOC,EAAW+U,EAAX/U,OApNnB+Z,EAAAhZ,KAAA,EAsNUgK,EAAQhE,OAtNlB,UAwNSkO,EAxNT,CAAA8E,EAAAhZ,KAAA,eAAAgZ,EAAAC,OAAA,iBAoOI,IARA/a,KAAKqW,UAAY7R,KAAKM,MAAM2I,EAAM5F,YAAYZ,SAAU,IAAIT,MAAOC,UAAY,KACzEyT,EAAapZ,EAAQkV,EAAa3S,MAAMvC,MACxCqZ,EAAcpZ,EAASiV,EAAa3S,MAAMtC,OAC1C4Z,EAAarO,EAAkBmB,EAAM7F,YAG3CmO,EAAIiF,UAAY3O,EAChB0J,EAAIkF,SAAS,EAAG,EAAGna,EAAOC,GACjBY,EAAI,EAAGA,EAAIqU,EAAa3S,MAAMtC,OAAQY,IAC7C,IAASD,EAAI,EAAGA,EAAIsU,EAAa3S,MAAMvC,MAAOY,IAC5C1B,KAAKwa,WAAWG,EAAWlO,OAAQ/K,EAAGC,GAK1C,GAAI3B,KAAKoW,eAAgB,CAEvB,IADAL,EAAImF,YAAcP,EAAWjO,UACpB/K,EAAI,EAAGA,EAAIqU,EAAa3S,MAAMtC,OAAQY,IAC7CoU,EAAIoF,YACJpF,EAAIqF,OAAO,EAAGzZ,EAAIwY,GAClBpE,EAAIsF,OAAOva,EAAOa,EAAIwY,GACtBpE,EAAIuF,SAEN,IAAS5Z,EAAI,EAAGA,EAAIsU,EAAa3S,MAAMvC,MAAOY,IAC5CqU,EAAIoF,YACJpF,EAAIqF,OAAO1Z,EAAIwY,EAAY,GAC3BnE,EAAIsF,OAAO3Z,EAAIwY,EAAYnZ,GAC3BgV,EAAIuF,SAKRtb,KAAKmW,kBAAoBnW,KAAKmW,kBAAkB7W,OAAO,SAAAyJ,GAAC,OAAIA,EAAEsH,UAAU1J,eAAiB,IACzF3G,KAAKmW,kBAAkBvT,QAAQ,SAAAmG,GAAK,IAC1BlH,EAAwBkH,EAAxBlH,SACF0Z,EAAmC,GADTxS,EAAdsH,UACQmL,aAC1BjS,EAAKkS,sBACHF,EACA1Z,EAASxB,OAASpB,EAAK8C,KAAO+J,EAAQT,SAAWS,EAAQR,UACzDzJ,EAASjC,MAAM8B,EACfG,EAASjC,MAAM+B,EACf,OAKJ3B,KAAKwa,WAAW1O,EAAQD,MAAOmK,EAAa3S,MAAMpC,IAAIS,EAAGsU,EAAa3S,MAAMpC,IAAIU,GAGhFqU,EAAa3S,MAAMnC,OAAO0B,QAAQ,SAAA8Y,GAChC,IAAM1B,GAAU0B,EAAMha,EAAIga,EAAM/Z,GAAK,IAAM,EAAImK,EAAQH,UAAYG,EAAQF,UAC3ErC,EAAKiR,WAAWR,EAAQ0B,EAAMha,EAAGga,EAAM/Z,KAIzC3B,KAAKwa,WACHxa,KAAKiW,eAAiBhX,EAAK8C,KAAO+J,EAAQT,SAAWS,EAAQR,UAC7D0K,EAAavS,KAAK7D,MAAM8B,EAAGsU,EAAavS,KAAK7D,MAAM+B,EAAG,KArR5D,yBAAAmZ,EAAA7B,SAAAyB,EAAA1a,SAAA,yBAAAya,EAAAnR,MAAAtJ,KAAAqG,YAAA,MAAAmP,EAAA,sWCPA,IAAM3D,GAAYhF,IAAOC,IAAV6O,MAWTC,GAAS/O,IAAOgP,OAAVC,MAQNC,eAIJ,SAAAA,EAAYzO,GAAc,IAAA/M,EAAA,OAAAnB,OAAAW,EAAA,EAAAX,CAAAY,KAAA+b,IACxBxb,EAAAnB,OAAAoJ,EAAA,EAAApJ,CAAAY,KAAAZ,OAAAqJ,EAAA,EAAArJ,CAAA2c,GAAArT,KAAA1I,KAAMsN,KAJR0O,eAG0B,EAAAzb,EAF1BoS,GAAK,IAAI6C,GAIPjV,EAAKyb,UAAYxN,IAAMyN,YAFC1b,mFAMxB,IAAMuV,EAAY9V,KAAKgc,UAAUpa,QAC7BkU,GACF9V,KAAK2S,GAAGuJ,MAAMpG,oCAIT,IACCnD,EAAO3S,KAAP2S,GACR,OACEvE,EAAArF,EAAAsF,cAAC8N,GAAD,KACE/N,EAAArF,EAAAsF,cAACK,GAAD,MACAN,EAAArF,EAAAsF,cAAC4E,GAAD,CAAUN,GAAIA,GACZvE,EAAArF,EAAAsF,cAACuN,GAAD,CAAQrN,IAAKvO,KAAKgc,aAEpB5N,EAAArF,EAAAsF,cAACoG,GAAD,CAAU9B,GAAIA,IACdvE,EAAArF,EAAAsF,cAAC6G,GAAD,CAAWvC,GAAIA,IACfvE,EAAArF,EAAAsF,cAACyG,GAAD,CAAanC,GAAIA,YA1BNnE,IAAMC,WAgCZ2N,GAAMzN,YACjB,SAACpB,GAAD,MAAuB,CAAEA,UADRoB,CAEjBoN,UCpCa,IAAAM,GAAA,CACbC,aA3BF,WACE,IAAMC,EAAK,IAAI1b,EACb,EAAG,EAAG,IAAI8C,EAAM,EAAG,GAAI,IAAIA,EAAM,EAAG,GAAI,CACtC,IAAIA,EAAM,EAAG,KAGjBkG,QAAQC,IAAIyS,EAAGC,SACf3S,QAAQC,IAAIyS,EAAG9W,SAEf,IAAMgX,EAAK,IAAI5b,EACb,EAAG,EAAG,IAAI8C,EAAM,EAAG,GAAI,IAAIA,EAAM,EAAG,GAAI,CACtC,IAAIA,EAAM,EAAG,KAGjBkG,QAAQC,IAAI2S,EAAGD,SACf3S,QAAQC,IAAI2S,EAAGhX,SAEH,IAAIT,EAAU,EAAG,EAAG,GAAK,GAClBmE,eAAe,GAAI,KAC/BvG,QAAQ,SAAAwG,GACbS,QAAQC,IAAIV,EAAE/F,MAAMmZ,SACpB3S,QAAQC,IAAI,YAAaV,EAAE9F,KAAKoW,cAChC7P,QAAQC,IAAI,UCfhBqC,OAAOuQ,QAAUA,GAEjBC,IAASC,OACPxO,EAAArF,EAAAsF,cAACwO,EAAA,EAAD,CAAUtP,MAAOA,IACfa,EAAArF,EAAAsF,cAAC+N,GAAD,OAEF3E,SAASqF,eAAe","file":"static/js/main.83110f04.chunk.js","sourcesContent":["import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = Object\n  .keys(Move)\n  .filter(k => isNaN(Number(k)))\n  .map(k => Move[k]);\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface Traveled {\n  move: Move,\n  point: Point,\n}\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Traveled>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [{\n      move: move,\n      point: current,\n    }];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push({move: move, point: next});\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(start: number, length: number): Array<number> {\n  return range(length).map(i => i + start);\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range, rangeFrom } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\nimport { Stopwatch } from \"./stopwatch\";\n\nexport enum Difficulty {\n  Easy = 1,\n  Medium,\n  Hard,\n  Infinite,\n  // Test,\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  gridSize: (number),\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel?: number;\n  boilFps: number,\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Easy]: {\n    boilFps: 1,\n    gridSize: 1,\n    minMoves: 7,\n    levelsPerTier: 1,\n    totalLevels: 5,\n  },\n  [Difficulty.Medium]: {\n    boilFps: 3,\n    gridSize: 1.5,\n    minMoves: 12,\n    levelsPerTier: 1,\n    totalLevels: 10,\n  },\n  [Difficulty.Hard]: {\n    boilFps: 6,\n    gridSize: 2,\n    minMoves: 12,\n    levelsPerTier: 2,\n    totalLevels: 15,\n  },\n  [Difficulty.Infinite]: {\n    boilFps: 9,\n    gridSize: 1.5,\n    minMoves: 7,\n    levelsPerTier: 3,\n    totalLevels: 20,\n    secondsPerLevel: 10,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport interface World {\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded: boolean;\n  onLoad: Promise<World>;\n  displayName: () => string;\n  isInfinite: () => boolean;\n  createStopwatch: () => Stopwatch;\n  generateLevels: () => void;\n  loadLevel: (i: number) => Promise<SolvableLevel | undefined>;\n}\n\nclass BasicWorld implements World {\n  dimensions: Point;\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded = false;\n  onLoad: Promise<World>;\n  registerLoaded = () => { };\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    this.dimensions = dimensions;\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n    this.totalLevels = this.progression.totalLevels;\n  }\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n  isInfinite() {\n    return this.difficulty === Difficulty.Infinite;\n  }\n  createStopwatch() {\n    const secondsPerLevel = this.progression.secondsPerLevel || 0;\n    const startTime = 1000 * (60 - secondsPerLevel);\n    // const startTime = 5; // for testing infinite mode\n    return new Stopwatch(this.isInfinite() ? startTime : undefined);\n  }\n\n  generateLevels() {\n    throw new Error('base class');\n  }\n  loadLevel(index: number): Promise<SolvableLevel | undefined> {\n    throw new Error('base class');\n  }\n}\n\nclass FiniteWorld extends BasicWorld {\n  levelsByMoves: LevelsByMoves;\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    super(dimensions, difficulty);\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { dimensions, levelsByMoves, progression } = this;\n    const { gridSize, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadLevel(index: number) {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels[index];\n  }\n}\n\nclass InfiniteWorld extends BasicWorld {\n  levels: Array<SolvableLevel> = [];\n  lastIndex = 0;\n\n  constructor(dimensions: Point) {\n    super(dimensions, Difficulty.Infinite);\n  }\n\n  generateLevels() {\n    const { dimensions, levels, progression, lastIndex } = this;\n    const { gridSize } = progression;\n    if (levels.length > lastIndex + 10) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    // todo randomize gridSize, minMoves\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: rangeFrom(progression.minMoves, 10),\n    })\n    this.levels.push(...gen.generateLevels(10, 10));\n    if (levels.length > lastIndex + 10) {\n      console.log('infinite loaded!');\n    }\n  }\n\n  async loadLevel(index: number) {\n    while (index > this.levels.length) {\n      this.generateLevels();\n    }\n    this.lastIndex = index;\n    return this.levels[index];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor(dimensions: Point) {\n    this.loaders = [\n      new InfiniteWorld(dimensions),\n      ...[\n        Difficulty.Easy,\n        Difficulty.Medium,\n        Difficulty.Hard,\n      ].map(d => new FiniteWorld(dimensions, d)),\n    ];\n  }\n\n  getLoaderByDifficulty(difficulty: Difficulty) {\n    return this.loaders.filter(w => w.difficulty === difficulty)[0];\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds = 0) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getElapsed(): number {\n    return new Date().getTime() - this.started.getTime();\n  }\n  getRemaining(): number {\n    return this.milliseconds - this.getElapsed();\n  }\n  getPercent(): number {\n    return this.getRemaining() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n  formatElapsed(): string {\n    return Math.floor(this.getElapsed() / 1000).toString(10);\n  }\n  formatRemaining(): string {\n    return Math.floor(this.getRemaining() / 1000).toString(10);\n  }\n}\n","export class SpriteFrame {\n  url: string;\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n\n  constructor(spriteName: string) {\n    const url = `sprite/${spriteName}.png`;\n    const img = new Image();\n    const loaded = new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n    });\n    img.src = url;\n\n    this.url = url;\n    this.image = img;\n    this.loaded = loaded;\n  }\n}\n\nexport class Sprite {\n  frames: Array<SpriteFrame>;\n  loaded: Promise<boolean>;\n  default: SpriteFrame;\n\n  constructor(spriteNames: Array<string>) {\n    this.frames = spriteNames.map(spriteName => new SpriteFrame(spriteName));\n    this.loaded = Promise.all(this.frames.map(f => f.loaded));\n    this.default = this.atFrame(0);\n  }\n\n  atFrame(frameCount) {\n    const { frames } = this;\n    const index = frameCount % frames.length;\n    return frames[index];\n  }\n}\n\nexport interface SpriteManager {\n  loaded: Promise<boolean>,\n  heroLeft: Sprite;\n  heroRight: Sprite;\n  groundIceBlue: Sprite,\n  groundIceGray: Sprite,\n  groundIceNavy: Sprite,\n  groundIceWhite: Sprite,\n  treeLight: Sprite,\n  treeHeavy: Sprite,\n  igloo: Sprite,\n};\n\n// load sprites\nconst spriteImages = {\n  heroLeft: new Sprite(['snowman_left']),\n  heroRight: new Sprite(['snowman_right']),\n  groundIceBlue: new Sprite(['ground_ice_blue']),\n  groundIceGray: new Sprite(['ground_ice_gray']),\n  groundIceNavy: new Sprite(['ground_ice_navy']),\n  groundIceWhite: new Sprite(['ground_ice_white']),\n  treeLight: new Sprite(['tree_light', 'tree_light_left', 'tree_light', 'tree_light_right']),\n  treeHeavy: new Sprite(['tree_heavy', 'tree_heavy_right', 'tree_heavy', 'tree_heavy_left']),\n  igloo: new Sprite(['igloo']),\n};\nexport const Sprites: SpriteManager = {\n  ...spriteImages,\n  loaded: Promise.all(Object.values(spriteImages).map(s => s.loaded)).then(() => true),\n};\nwindow.Sprites = Sprites;\n\nexport const Gifs = {\n  snowDiagonal: 'gif/snow_diagonal.gif',\n  snowLoose: 'gif/snow_loose.gif',\n};\n","import { Difficulty } from '../utils';\nimport { Sprites, Gifs } from './sprite';\n\nexport const GlobalStyle = {\n  backgroundColor: 'white', // matching css\n  menuMusic: 'music/visager_shrine.mp3',\n};\n\nexport const StyleByDifficulty = {\n  [Difficulty.Easy]: {\n    music: 'music/visager_village_dreaming.mp3',\n    ground: Sprites.groundIceWhite,\n    gridColor: 'black',\n    overlay: Gifs.snowLoose,\n  },\n  [Difficulty.Medium]: {\n    music: 'music/visager_the_final_road.mp3',\n    ground: Sprites.groundIceBlue,\n    gridColor: 'black',\n    overlay: Gifs.snowLoose,\n  },\n  [Difficulty.Hard]: {\n    music: 'music/visager_the_great_forest.mp3',\n    ground: Sprites.groundIceGray,\n    gridColor: 'white',\n    overlay: Gifs.snowDiagonal,\n  },\n  [Difficulty.Infinite]: {\n    music: 'music/visager_dark_sanctum.mp3',\n    ground: Sprites.groundIceNavy,\n    gridColor: 'white',\n    overlay: Gifs.snowDiagonal,\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GlobalStyle, StyleByDifficulty } from './style';\n\nconst Hidden = styled.div`\n  display: none;\n`;\n\ninterface Props {\n  store: DataState;\n};\ninterface State {};\n\nclass _AudioPlayer extends React.Component<Props, State> {\n  elmMenu?: HTMLAudioElement;\n  elmsByDiff = {};\n  desiredVolume = 0.5;\n\n  componentDidUpdate(prevProps) {\n    const { elmMenu, elmsByDiff } = this;\n    const { audio, world } = this.props.store;\n    if (!audio.playing) {\n      // if props gets set to false, make sure we dont have pointers to deleted DOM objects\n      this.elmsByDiff = {};\n    }\n    if (world) {\n      if (world !== prevProps.store.world) {\n        // if changing to new world, stop old music\n        this.stopAll();\n      }\n      const elm = elmsByDiff[world.difficulty];\n      if (elm) {\n        // if elm, we're playing\n        this.playElm(elm);\n      }\n    } else {\n      // if we're in the menu, and have always been in the menu\n      if (elmMenu && !prevProps.store.world) {\n        this.playElm(elmMenu);\n      }\n    }\n  }\n  playElm(elm: HTMLAudioElement) {\n    const { desiredVolume } = this;\n    if (elm.volume !== desiredVolume) {\n      elm.volume = desiredVolume;\n    }\n    elm.play();\n  }\n  stopElm(elm: HTMLAudioElement) {\n    elm.pause();\n    elm.currentTime = 0;\n  }\n  stopAll() {\n    const { elmMenu, elmsByDiff } = this;\n    elmMenu && this.stopElm(elmMenu);\n    Object.keys(elmsByDiff).forEach(diff => this.stopElm(elmsByDiff[diff]));\n  }\n  render() {\n    const { playing } = this.props.store.audio;\n    return playing && (\n      <Hidden>\n        <audio\n          loop\n          src={GlobalStyle.menuMusic}\n          ref={elm => this.elmMenu = elm}\n        ></audio>\n        {Object.keys(StyleByDifficulty).map(diff => (\n          <audio\n            key={diff}\n            loop\n            src={StyleByDifficulty[diff].music}\n            ref={elm => this.elmsByDiff[diff] = elm}\n          ></audio>\n        ))}\n      </Hidden>\n    );\n  }\n}\n\nexport const AudioPlayer = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_AudioPlayer);\n","export const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_LEVEL = 'SET_LEVEL';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_WORLD = 'SET_WORLD';\nexport const TOGGLE_MUSIC = 'TOGGLE_MUSIC';\nexport const TOGGLE_OPTIONS = 'TOGGLE_OPTIONS';\n","import { Stopwatch, World } from \"../../utils\";\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC, TOGGLE_OPTIONS } from \"../actionTypes\";\n\n// https://stackoverflow.com/a/11381730\nconst mobilecheck = function() {\n  var check = false;\n  //eslint-disable-next-line\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n};\n\nexport interface AudioState {\n  playing: boolean;\n}\nexport interface DataState {\n  audio: AudioState,\n  isMobile: boolean;\n  world?: World;\n  secondsElapsed: number;\n  secondsRemaining: number;\n  level: number;\n  isGameOver: boolean;\n  showOptions: boolean;\n}\n\ninterface DataAction {\n  type: string;\n  payload: {\n    stopwatch?: Stopwatch;\n    level?: number;\n    world?: World;\n  };\n}\n\nconst initialState: DataState = {\n  audio: {\n    // playing: !mobilecheck(),\n    playing: false,\n  },\n  isMobile: mobilecheck(),\n  secondsRemaining: 0,\n  secondsElapsed: 0,\n  level: 0,\n  world: undefined,\n  isGameOver: false,\n  showOptions: false,\n};\n\nfunction reducer(state = initialState, action: DataAction) {\n  switch (action.type) {\n    case SET_GAME_OVER: {\n      return {\n        ...state,\n        isGameOver: true,\n      };\n    }\n    case SET_LEVEL: {\n      const { level } = action.payload;\n      return {\n        ...state,\n        level,\n      };\n    }\n    case SET_TIMER: {\n      const { stopwatch } = action.payload;\n      return {\n        ...state,\n        secondsElapsed: stopwatch && stopwatch.formatElapsed(),\n        secondsRemaining: stopwatch && stopwatch.formatRemaining(),\n      };\n    }\n    case SET_WORLD: {\n      const { world } = action.payload;\n      return {\n        ...state,\n        isGameOver: false,\n        world,\n        audio: {\n          ...state.audio,\n        },\n      };\n    }\n    case TOGGLE_MUSIC: {\n      return {\n        ...state,\n        audio: {\n          ...state.audio,\n          playing: !state.audio.playing,\n        },\n      };\n    }\n    case TOGGLE_OPTIONS: {\n      return {\n        ...state,\n        showOptions: !state.showOptions,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport default reducer;\n","import { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC, TOGGLE_OPTIONS } from '../actionTypes';\n\nexport const setGameOver = () => ({\n  type: SET_GAME_OVER,\n  payload: {},\n});\n\nexport const setLevel = (level: number) => ({\n  type: SET_LEVEL,\n  payload: {\n    level,\n  },\n});\n\nexport const setTimer = (stopwatch: Stopwatch) => ({\n  type: SET_TIMER,\n  payload: {\n    stopwatch,\n  },\n});\n\nexport const setWorld = (world?: World) => ({\n  type: SET_WORLD,\n  payload: {\n    world,\n  },\n});\n\nexport const toggleMusic = () => ({\n  type: TOGGLE_MUSIC,\n  payload: {},\n});\n\nexport const toggleOptions = () => ({\n  type: TOGGLE_OPTIONS,\n  payload: {},\n});\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer);\nexport * from './actions';\nexport * from './reducers';\n","import styled from 'styled-components';\nimport { Sprites } from './sprite';\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: stretch;\n  flex-wrap: nowrap;\n`;\nexport const Column = styled(Row)`\n  flex-direction: column;\n`;\n\nexport const AbsoluteContainer = styled(Column)`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  width: 100%;\n  height: 100vh;\n\n  background-color: var(--background);\n`;\nexport const IcyContainer = styled(AbsoluteContainer)`\n  justify-content: center;\n  background-image: url('${Sprites.groundIceWhite.default.url}');\n  background-repeat: repeat;\n`;\n\nexport const BubbleArea = styled.div`\n  padding: 0.5em;\n  margin: 0.5em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  background-color: var(--background);\n  border-radius: 1em;\n  border: 1px solid var(--snow);\n  box-sizing: border-box;\n`;\n\nexport const LoadingButton = styled.div`\n  width: 4em;\n  padding: 0.5em;\n  border-radius: 1em;\n\n  border: 2px solid grey;\n  font-style: italic;\n  color: grey;\n  background-color: var(--background);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n\n`;\nexport const ReadyButton = styled(LoadingButton)`\n  cursor: pointer;\n\n  border-color: var(--foreground);\n  font-style: normal;\n  color: var(--foreground);\n\n  &:hover {\n    color: var(--background);\n    background-color: var(--foreground);\n  }\n`;\n\nexport const KeyButton = styled(ReadyButton)`\n  height: 4vh;\n  width: auto;\n  min-width: 2em;\n  padding: 0 0.75em;\n  margin: 0 0.3em;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DataState, toggleOptions } from '../redux';\nimport { connect } from 'react-redux';\nimport { GameManager } from './manager';\nimport { Row, Column, KeyButton } from './common';\nimport { StyleByDifficulty } from './style';\n\ntype UrlProps = {\n  url: string,\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst SubContainer = styled(Row)`\n  width: 100%;\n  margin: 0px;\n`;\nconst Header = styled(SubContainer)`\n  height: 10vh;\n  font-family: monospace;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\nconst Footer = styled(SubContainer)`\n  height: 10vh;\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n`;\n\nconst CanvasOverlay = styled.div<UrlProps>`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: url('${props => props.url}');\n  background-size: contain;\n  background-repeat: none;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic: () => void;\n};\n\nclass _GameView extends React.Component<Props> {\n  render() {\n    const { gm, store, toggleMusic } = this.props;\n    const { isMobile, world, level, secondsRemaining, secondsElapsed } = this.props.store;\n    const overlay = store.world ? StyleByDifficulty[store.world.difficulty].overlay : '';\n    return (\n      <Container>\n        <Header>\n          <Column>\n            <div>Level {level + 1}</div>\n          </Column>\n          <Column>\n            <div>{world && world.isInfinite() ? secondsRemaining : secondsElapsed}s</div>\n          </Column>\n        </Header>\n        <CanvasContainer onClick={gm.mouseMove}>\n          {this.props.children}\n          <CanvasOverlay url={overlay} />\n        </CanvasContainer>\n        <Footer>\n          <Column>\n            <KeyButton onClick={gm.clickReset}>\n              reset level\n            </KeyButton>\n          </Column>\n          <Column>\n            <KeyButton onClick={() => this.props.toggleOptions()}>\n              options\n            </KeyButton>\n          </Column>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\n\nexport const GameView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleOptions,\n  }\n)(_GameView);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState, toggleOptions } from '../redux';\nimport { GameManager } from './manager';\nimport { Sprites } from './sprite';\nimport { IcyContainer, LoadingButton, ReadyButton, Row, BubbleArea, KeyButton } from './common';\n\nconst WorldOptionContainer = styled(Row)`\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst GameTitle = styled.h1`\n  margin-left: 2em;\n  margin-right: 2em;\n  margin-bottom: 0px;\n  font-family: monospace;\n`;\n\nconst WorldTitle = styled.h2`\n  margin: 0.5rem;\n`;\nconst WorldButton = styled.h3`\n  margin: 0px;\n  margin-top: 0.5em;\n`;\n\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleOptions: () => void;\n};\n\ninterface State {\n  spritesLoaded: boolean,\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n  [Difficulty.Infinite]: boolean,\n};\n\nconst defaultState = {\n  [Difficulty.Easy]: false,\n  [Difficulty.Medium]: false,\n  [Difficulty.Hard]: false,\n  [Difficulty.Infinite]: false,\n};\n\nclass _MenuView extends React.Component<Props, State> {\n  state = { ...defaultState };\n\n  componentDidMount() {\n    this.reset();\n  }\n  reset() {\n    this.setState({\n      ...defaultState,\n    }, () => {\n      this.props.gm.worldLoader.loaders.forEach(world => {\n        world.onLoad.then(() => {\n          Sprites.loaded.then(() => {\n            this.setState({\n              [world.difficulty]: true,\n            });\n          });\n        });\n      });\n    });\n  }\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.gm.setWorld(world);\n      this.reset();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { state } = this;\n    const { worldLoader } = this.props.gm;\n    if (store.world) {\n      return '';\n    }\n    const displayOrder = [\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n      Difficulty.Infinite,\n    ];\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <GameTitle>\n              <em>ICY PATH</em>\n              <br/>\n              <img alt=\"\" src={Sprites.igloo.default.url}/>\n              <img alt=\"\" src={Sprites.heroLeft.default.url}/>\n            </GameTitle>\n          </BubbleArea>\n        </Row>\n        <WorldOptionContainer>\n          {displayOrder.map(d => worldLoader.getLoaderByDifficulty(d)).map(world => (\n            <BubbleArea key={world.difficulty}>\n              <WorldTitle>\n                {world.displayName()}\n              </WorldTitle>\n              <div>\n                {world.isInfinite() ? '∞' : world.totalLevels} levels\n              </div>\n              <WorldButton>\n                {state[world.difficulty] ? (\n                  <ReadyButton onClick={() => this.loadWorld(world)}>\n                    PLAY\n                </ReadyButton>\n                ) : (\n                    <LoadingButton>\n                      loading\n                </LoadingButton>\n                  )}\n              </WorldButton>\n            </BubbleArea>\n          ))}\n        </WorldOptionContainer>\n        <Row>\n          <BubbleArea>\n            <KeyButton onClick={() => this.props.toggleOptions()}>\n              options\n            </KeyButton>\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <div>\n              made by <a href=\"https://twitter.com/mpaulweeks\">@mpaulweeks</a>\n            </div>\n            <div>\n              assets by <a href=\"https://www.kenney.nl\">Kenney</a> +\n              music by <a href=\"https://visager.bandcamp.com/album/songs-from-an-unmade-world\">Visager</a>\n            </div>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const MenuView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleOptions,\n  }\n)(_MenuView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState, toggleMusic, toggleOptions } from '../redux';\nimport { GameManager } from './manager';\nimport { IcyContainer, Row, BubbleArea, KeyButton } from './common';\nimport { Sprites } from './sprite';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic: () => void;\n  toggleOptions: () => void;\n};\ninterface State {};\n\nclass _OptionsView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    if (!store.showOptions) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <Row>\n              <h1> OPTIONS </h1>\n            </Row>\n            <Row>\n              <KeyButton onClick={() => this.props.toggleMusic()}>\n                music is {this.props.store.audio.playing ? 'on' : 'off'}\n              </KeyButton>\n            </Row>\n            <Row>\n              <KeyButton onClick={gm.clickToggleGrid}>\n                toggle grid\n              </KeyButton>\n            </Row>\n          </BubbleArea>\n        </Row>\n        <Row>\n          <BubbleArea>\n            <Row>\n              <KeyButton onClick={() => this.props.toggleOptions()}>\n                close\n              </KeyButton>\n            </Row>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const OptionsView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleMusic,\n    toggleOptions,\n  }\n)(_OptionsView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux';\nimport { GameManager } from './manager';\nimport { IcyContainer, Row, BubbleArea, ReadyButton } from './common';\nimport { Sprites } from './sprite';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\ninterface State {};\n\nclass _ScoreView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    const { world, isGameOver } = store;\n    if (!(world && isGameOver)) {\n      return '';\n    }\n    return (\n      <IcyContainer>\n        <Row>\n          <BubbleArea>\n            <h1>\n              {world.isInfinite() ? `GAME OVER!` : `YOU WIN!`}\n            </h1>\n            <p>\n              <img alt=\"\" src={Sprites.igloo.default.url}/>\n              <img className=\"rotate\" alt=\"\" src={Sprites.heroLeft.default.url}/>\n            </p>\n            {world.isInfinite() ? (\n              <div>\n                <p>\n                  You managed to complete {gm.currentLevelIndex - 1} levels.\n                </p>\n              </div>\n            ) : (\n              <div>\n                <p>\n                  You managed to beat {world.displayName()} in {store.secondsElapsed} seconds.\n                </p>\n                <p>\n                  Try to beat it faster or play a higher difficulty!\n                </p>\n              </div>\n            )}\n            <ReadyButton onClick={this.onReset}>MENU</ReadyButton>\n          </BubbleArea>\n        </Row>\n      </IcyContainer>\n    );\n  }\n}\n\nexport const ScoreView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_ScoreView);\n","import { store } from \"../redux\";\nimport { setGameOver, setLevel, setTimer, setWorld } from \"../redux\";\nimport { Move, MoveInformation, Traveled, PlayableLevel, Point, Stopwatch, World, WorldLoader } from \"../utils\";\nimport { Sprite, Sprites } from './sprite';\nimport { GlobalStyle, StyleByDifficulty } from './style';\n\nconst moveMap: { [code: string]: Move } = {\n  'ArrowLeft': Move.Left,\n  'ArrowRight': Move.Right,\n  'ArrowUp': Move.Up,\n  'ArrowDown': Move.Down,\n};\n\nexport interface Animation {\n  traveled: Traveled,\n  stopwatch: Stopwatch,\n}\n\nexport class GameManager {\n  dispatch = store.dispatch;\n  isDebug = window.location.href.includes('localhost');\n  worldLoader: WorldLoader;\n  worldDimensions: Point;\n  canvasDimensions: Point;\n  canvasElm?: HTMLCanvasElement;\n  ctx?: CanvasRenderingContext2D;\n  world?: World;\n  stopwatch = new Stopwatch();\n  currentLevel: (PlayableLevel | undefined);\n  currentLevelIndex = 0;\n  spriteFacing: Move.Right;\n  loadedAssets: Promise<boolean>;\n  pendingAnimations: Array<Animation> = [];\n  shouldDrawGrid = false;\n  frameTick = 0;\n\n  constructor() {\n    const { isDebug } = this;\n    if (isDebug) {\n      window.DEBUG = this;\n    }\n\n    // determine largest possible canvas size\n    const screenHeight = document.body.clientHeight * 0.8; // matching css of 80vh\n    const screenWidth = document.body.clientWidth;\n\n    // determine canvas orientation\n    const isVertical = screenHeight > screenWidth;\n    const dimensions = isVertical ? new Point(8, 10) : new Point(10, 8);\n    this.worldDimensions = dimensions;\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n\n    // shrink down canvas size until it fits on this screen\n    let canvasHeight = screenHeight;\n    let canvasWidth = canvasHeight * dimensions.x / dimensions.y;\n    while (canvasWidth > screenWidth) {\n      canvasHeight -= 1;\n      canvasWidth = canvasHeight * dimensions.x / dimensions.y;\n    }\n    this.canvasDimensions = new Point(canvasWidth, canvasHeight);\n\n    // setup key listeners\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.clickReset();\n      }\n      if (e.code === 'KeyN' && isDebug) {\n        this.nextLevel();\n      }\n    });\n\n    // setup passive draw/load loop\n    this.loop();\n  }\n  setup(canvasElm: HTMLCanvasElement) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = this.canvasDimensions.x;\n    canvasElm.height = this.canvasDimensions.y;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n  }\n  private async loop() {\n    const { world, stopwatch } = this;\n    if (world) {\n      await this.draw();\n      if (world.isInfinite()) {\n        world.generateLevels();\n        if (stopwatch.getRemaining() !== store.getState().secondsRemaining) {\n          this.dispatch(setTimer(stopwatch));\n        }\n        if (stopwatch.getRemaining() < 0) {\n          this.triggerGameOver();\n        }\n      } else {\n        if (stopwatch.getElapsed() !== store.getState().secondsElapsed) {\n          this.dispatch(setTimer(stopwatch));\n        }\n      }\n    } else if (!store.getState().isGameOver) {\n      this.worldLoader.loadInBackground();\n    }\n    window.requestAnimationFrame(() => this.loop());\n  }\n\n  clickReset = () => {\n    this.currentLevel && this.currentLevel.reset();\n  }\n  clickToggleGrid = () => {\n    this.shouldDrawGrid = !this.shouldDrawGrid;\n  }\n  mouseMove = evt => {\n    const rect = evt.target.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    const px = x / rect.width;\n    const py = y / rect.height;\n    const isTopRight = px > py;\n    const isTopLeft = px + py < 1;\n    const move = (\n      (isTopLeft && isTopRight && Move.Up) ||\n      (!isTopLeft && isTopRight && Move.Right) ||\n      (!isTopLeft && !isTopRight && Move.Down) ||\n      (isTopLeft && !isTopRight && Move.Left)\n    );\n    if (move) {\n      this.handleMove(move);\n    }\n  }\n  clickUp = () => {\n    this.handleMove(Move.Up);\n  }\n  clickDown = () => {\n    this.handleMove(Move.Down);\n  }\n  clickLeft = () => {\n    this.handleMove(Move.Left);\n  }\n  clickRight = () => {\n    this.handleMove(Move.Right);\n  }\n\n  setWorld(world: World) {\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.world = world;\n    this.currentLevelIndex = 0;\n    this.stopwatch = world.createStopwatch();\n    this.nextLevel();\n    this.dispatch(setWorld(world));\n  }\n  unsetWorld() {\n    // todo score should dispatch this action\n    this.world = undefined;\n    this.dispatch(setWorld(undefined));\n  }\n  triggerGameOver() {\n    this.world = undefined;\n    this.dispatch(setGameOver());\n  }\n\n  handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    // sprite show face left/right or switch its current direction\n    this.spriteFacing = [Move.Left, Move.Right].includes(move) ? move : (\n      this.spriteFacing === Move.Right ? Move.Left : Move.Right\n    )\n    this.animateMove(moveInfo);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('todo this should be impossible');\n    }\n    // todo maybe keep animations between levels?\n    // this.pendingAnimations = [];\n    const nextLevel = await world.loadLevel(currentLevelIndex);\n    this.currentLevel = nextLevel && new PlayableLevel(nextLevel);\n    if (this.currentLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.dispatch(setLevel(this.currentLevelIndex));\n      this.currentLevelIndex += 1;\n      this.stopwatch.addTime(1000 * (world.progression.secondsPerLevel || 0));\n    } else {\n      this.triggerGameOver();\n    }\n  }\n\n  animateMove(moveInfo: MoveInformation) {\n    const animations = moveInfo.traveled.slice(0, -1).map((t, i, arr) => ({\n      traveled: t,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n    }));\n    this.pendingAnimations.push(...animations);\n  }\n  drawSprite(sprite: Sprite, x: number, y: number, scale?: number) {\n    const { canvasElm, ctx, currentLevel } = this;\n    const { width, height } = canvasElm;\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    scale = scale || 1;\n    ctx.drawImage(\n      sprite.atFrame(this.frameTick).image,\n      x * blockWidth + (blockWidth * (1 - scale) / 2),\n      y * blockHeight + (blockHeight * (1 - scale) / 2),\n      blockWidth * scale,\n      blockHeight * scale\n    );\n  }\n  drawSpriteWithOpacity(alpha: number, sprite: Sprite, x: number, y: number, scale?: number) {\n    const { ctx } = this;\n    const oldAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = alpha;\n    this.drawSprite(sprite, x, y, scale);\n    ctx.globalAlpha = oldAlpha;\n  }\n  async draw() {\n    const { canvasElm, ctx, currentLevel, world } = this;\n    if (!canvasElm || !ctx) {\n      return;\n    }\n    const { width, height } = canvasElm;\n\n    await Sprites.loaded;\n\n    if (!currentLevel) {\n      return;\n    }\n\n    this.frameTick = Math.floor(world.progression.boilFps * new Date().getTime() / 1000);\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    const worldStyle = StyleByDifficulty[world.difficulty];\n\n    // background\n    ctx.fillStyle = GlobalStyle.backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    for (let y = 0; y < currentLevel.level.height; y++){\n      for (let x = 0; x < currentLevel.level.width; x++) {\n        this.drawSprite(worldStyle.ground, x, y);\n      }\n    }\n\n    // grid\n    if (this.shouldDrawGrid) {\n      ctx.strokeStyle = worldStyle.gridColor;\n      for (let y = 1; y < currentLevel.level.height; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * blockHeight);\n        ctx.lineTo(width, y * blockHeight);\n        ctx.stroke();\n      }\n      for (let x = 1; x < currentLevel.level.width; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * blockWidth, 0);\n        ctx.lineTo(x * blockWidth, height);\n        ctx.stroke();\n      }\n    }\n\n    // ghosts\n    this.pendingAnimations = this.pendingAnimations.filter(a => a.stopwatch.getRemaining() > 0);\n    this.pendingAnimations.forEach(a => {\n      const { traveled, stopwatch } = a;\n      const opacity = stopwatch.getPercent() * 0.7;\n      this.drawSpriteWithOpacity(\n        opacity,\n        traveled.move === Move.Left ? Sprites.heroLeft : Sprites.heroRight, // todo this is buggy on up/dowh\n        traveled.point.x,\n        traveled.point.y,\n        1.2,\n      );\n    });\n\n    // goal square\n    this.drawSprite(Sprites.igloo, currentLevel.level.win.x, currentLevel.level.win.y);\n\n    // blocks\n    currentLevel.level.blocks.forEach(block => {\n      const sprite = (block.x + block.y) % 2 === 0 ? Sprites.treeLight : Sprites.treeHeavy;\n      this.drawSprite(sprite, block.x, block.y);\n    });\n\n    // hero\n    this.drawSprite(\n      this.spriteFacing === Move.Left ? Sprites.heroLeft : Sprites.heroRight,\n      currentLevel.hero.point.x, currentLevel.hero.point.y, 1.2);\n  }\n}\n","import React from 'react';\nimport { AudioPlayer } from './AudioPlayer';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { MenuView } from './MenuView';\nimport { OptionsView } from './OptionsView';\nimport { ScoreView } from './ScoreView';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\n\nconst Container = styled.div`\n  max-width: 50vh;\n  margin: 0px auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  border-radius: 5%;\n`;\n\ninterface Props {\n  store: DataState;\n}\n\nclass _App extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  gm = new GameManager();\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.gm.setup(canvasElm);\n    }\n  }\n\n  render() {\n    const { gm } = this;\n    return (\n      <Container>\n        <AudioPlayer />\n        <GameView gm={gm}>\n          <Canvas ref={this.canvasRef} />\n        </GameView>\n        <MenuView gm={gm} />\n        <ScoreView gm={gm} />\n        <OptionsView gm={gm} />\n      </Container>\n    );\n  }\n}\n\nexport const App = connect(\n  (store: DataState) => ({ store })\n)(_App);\n","import { Generator, Level, Point } from '../utils';\n\nfunction testLevelGen() {\n  const l1 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(2, 4),\n    ]\n  );\n  console.log(l1.print())\n  console.log(l1.solve())\n\n  const l2 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(4, 0),\n    ]\n  );\n  console.log(l2.print())\n  console.log(l2.solve())\n\n  const gen = new Generator(5, 5, 0.1, 5);\n  const levels = gen.generateLevels(10, 1000);\n  levels.forEach(l => {\n    console.log(l.level.print())\n    console.log('Solution:', l.soln.printMoves())\n    console.log('\\n');\n  });\n};\n\nexport default {\n  testLevelGen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport { store } from './redux';\nimport scripts from './script';\n\n// debug scripts via the browser console\nwindow.scripts = scripts;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}