{"version":3,"sources":["fe/common.ts","fe/GameView.tsx","utils/moves.ts","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","fe/MenuView.tsx","fe/ScoreView.tsx","redux/actionTypes/index.ts","redux/reducers/index.ts","redux/index.ts","redux/actions/index.ts","fe/manager.ts","fe/App.tsx","script/index.ts","index.js"],"names":["AbsoluteContainer","styled","div","_templateObject","Row","_templateObject2","Column","_templateObject3","LoadingButton","_templateObject4","ReadyButton","_templateObject5","KeyButton","_templateObject6","Move","Container","GameView_templateObject","SubContainer","GameView_templateObject2","ColumnInfo","GameView_templateObject3","Header","GameView_templateObject4","Footer","GameView_templateObject5","Timer","GameView_templateObject6","CanvasContainer","_templateObject7","CanvasOverlay","_templateObject8","_GameView","gm","this","props","_this$props$store","store","world","level","secondsRemaining","secondsElapsed","react_default","a","createElement","onClick","clickUp","clickLeft","clickRight","clickDown","isInfinite","children","clickReset","clickToggleGrid","React","Component","GameView","connect","Block","Moves","Object","keys","filter","k","isNaN","Number","map","PointHistory","point","points","moves","classCallCheck","createClass","key","value","newPoint","move","push","_this","m","history","clone","toConsumableArray","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Left","Right","Up","Down","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","arguments","undefined","started","Date","getTime","getElapsed","getRemaining","time","ProgressionByDifficulty","_ProgressionByDifficu","defineProperty","Easy","gridSize","minMoves","levelsPerTier","totalLevels","Medium","Hard","Infinite","secondsPerLevel","BasicWorld","dimensions","difficulty","progression","loaded","onLoad","registerLoaded","Promise","resolve","reject","startTime","FiniteWorld","_this2","possibleConstructorReturn","getPrototypeOf","call","levelsByMoves","obj","num","sort","remainingMinMoves","getLevelKeys","scaledDimensions","generateLevels","l","tier","apply","_this3","InfiniteWorld","_this4","lastIndex","_this$levels","gen","console","log","WorldLoader","loaders","d","w","toLoad","WorldOptionContainer","MenuView_templateObject","WorldOption","MenuView_templateObject2","WorldTitle","h2","MenuView_templateObject3","defaultState","_defaultState","_MenuView","state","reset","setState","objectSpread","worldLoader","then","setWorld","displayOrder","getLoaderByDifficulty","displayName","loadWorld","href","MenuView","_ScoreView","onReset","unsetWorld","_this$props","isGameOver","currentLevelIndex","ScoreView","SET_GAME_OVER","SET_LEVEL","SET_TIMER","SET_WORLD","initialState","reducer","action","type","payload","stopwatch","formatElapsed","formatRemaining","createStore","rootReducer","setTimer","Color","Sprite","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","loadImage","url","img","Image","image","onload","src","GameManager","dispatch","worldDimensions","canvasDimensions","canvasElm","ctx","currentLevel","sprites","loadedAssets","pendingAnimations","shouldDrawGrid","handleMove","screenHeight","document","body","clientHeight","screenWidth","clientWidth","allSprites","values","all","s","window","addEventListener","e","code","nextLevel","loop","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","draw","getState","triggerGameOver","loadInBackground","requestAnimationFrame","stop","getContext","createStopwatch","moveHero","animateMove","_nextLevel","_callee2","_context2","loadLevel","sent","printMoves","addTime","_this$pendingAnimatio","animations","p","_draw","_callee3","grd","blockWidth","blockHeight","_context3","abrupt","createLinearGradient","addColorStop","fillStyle","fillRect","font","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","block","blueLevel","getPercent","strokeRect","drawImage","App_templateObject","Canvas","canvas","App_templateObject2","_App","canvasRef","createRef","setup","App_Container","ref","App","script","testLevelGen","l1","print","l2","scripts","ReactDOM","render","es","getElementById"],"mappings":"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","file":"static/js/main.3aca025a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AbsoluteContainer = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  width: 100%;\n  height: 100vh;\n\n  background-color: var(--background);\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: stretch;\n  flex-wrap: nowrap;\n`;\nexport const Column = styled(Row)`\n  flex-direction: column;\n`;\n\nexport const LoadingButton = styled.div`\n  width: 4em;\n  padding: 0.5em;\n  border-radius: 1em;\n\n  border: 2px solid grey;\n  font-style: italic;\n  color: grey;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n\n`;\nexport const ReadyButton = styled(LoadingButton)`\n  cursor: pointer;\n\n  border-color: var(--foreground);\n  font-style: normal;\n  color: var(--foreground);\n\n  &:hover {\n    color: var(--background);\n    background-color: var(--foreground);\n  }\n`;\n\nexport const KeyButton = styled(ReadyButton)`\n  height: 4vh;\n  width: auto;\n  min-width: 2em;\n  padding: 0 0.75em;\n  margin: 0 0.3em;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DataState } from '../redux/reducers';\nimport { connect } from 'react-redux';\nimport { GameManager } from './manager';\nimport { Row, Column, KeyButton } from './common';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst SubContainer = styled(Row)`\n  width: 100%;\n  margin: 0px;\n`;\nconst ColumnInfo = styled(Column)`\n  justify-content: flex-start;\n  align-items: center;\n  width: 5em;\n  margin-top: 1em;\n`;\nconst Header = styled(SubContainer)`\n  height: 20vh;\n`;\nconst Footer = styled(SubContainer)`\n  height: 10vh;\n`;\nconst Timer = styled.div`\n  font-family: monospace;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n`;\n\nconst CanvasOverlay = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: url('img/snow_loose.gif');\n  background-size: contain;\n  background-repeat: none;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\n\nclass _GameView extends React.Component<Props> {\n  render() {\n    const { gm } = this.props;\n    const { world, level, secondsRemaining, secondsElapsed } = this.props.store;\n    return (\n      <Container>\n        <Header>\n          <ColumnInfo>\n            <div>Level {level + 1}</div>\n          </ColumnInfo>\n          <Column>\n            <Row>\n              <KeyButton onClick={gm.clickUp}>up</KeyButton>\n            </Row>\n            <Row>\n              <KeyButton onClick={gm.clickLeft}>left</KeyButton>\n              <KeyButton onClick={gm.clickRight}>right</KeyButton>\n            </Row>\n            <Row>\n              <KeyButton onClick={gm.clickDown}>down</KeyButton>\n            </Row>\n          </Column>\n          <ColumnInfo>\n            <Timer>{world && world.isInfinite() ? secondsRemaining : secondsElapsed}s</Timer>\n          </ColumnInfo>\n        </Header>\n        <CanvasContainer>\n          {this.props.children}\n          <CanvasOverlay />\n        </CanvasContainer>\n        <Footer>\n          <Column>\n            <KeyButton onClick={gm.clickReset}>reset</KeyButton>\n          </Column>\n          <Column>\n            <KeyButton onClick={gm.clickToggleGrid}>toggle grid</KeyButton>\n          </Column>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\n\nexport const GameView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_GameView);\n","import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = Object\n  .keys(Move)\n  .filter(k => isNaN(Number(k)))\n  .map(k => Move[k]);\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Point>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [current];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push(next);\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(start: number, length: number): Array<number> {\n  return range(length).map(i => i + start);\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range, rangeFrom } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\nimport { Stopwatch } from \"./stopwatch\";\n\nexport enum Difficulty {\n  Easy = 1,\n  Medium,\n  Hard,\n  Infinite,\n  // Test,\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  gridSize: (number),\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel?: number;\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Easy]: {\n    gridSize: 1,\n    minMoves: 7,\n    levelsPerTier: 2,\n    totalLevels: 10,\n  },\n  [Difficulty.Medium]: {\n    gridSize: 1.5,\n    minMoves: 7,\n    levelsPerTier: 1,\n    totalLevels: 15,\n  },\n  [Difficulty.Hard]: {\n    gridSize: 2,\n    minMoves: 10,\n    levelsPerTier: 2,\n    totalLevels: 20,\n  },\n  [Difficulty.Infinite]: {\n    gridSize: 1.5,\n    minMoves: 7,\n    levelsPerTier: 3,\n    totalLevels: 20,\n    secondsPerLevel: 5,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport interface World {\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded: boolean;\n  onLoad: Promise<World>;\n  displayName: () => string;\n  isInfinite: () => boolean;\n  createStopwatch: () => Stopwatch;\n  generateLevels: () => void;\n  loadLevel: (i: number) => Promise<SolvableLevel | undefined>;\n}\n\nclass BasicWorld implements World {\n  dimensions: Point;\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded = false;\n  onLoad: Promise<World>;\n  registerLoaded = () => { };\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    this.dimensions = dimensions;\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n    this.totalLevels = this.progression.totalLevels;\n  }\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n  isInfinite() {\n    return this.difficulty === Difficulty.Infinite;\n  }\n  createStopwatch() {\n    const secondsPerLevel = this.progression.secondsPerLevel || 0;\n    const startTime = 1000 * (60 - secondsPerLevel);\n    // const startTime = 5; // for testing infinite mode\n    return new Stopwatch(this.isInfinite() ? startTime : undefined);\n  }\n\n  generateLevels() {\n    throw new Error('base class');\n  }\n  loadLevel(index: number): Promise<SolvableLevel | undefined> {\n    throw new Error('base class');\n  }\n}\n\nclass FiniteWorld extends BasicWorld {\n  levelsByMoves: LevelsByMoves;\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    super(dimensions, difficulty);\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { dimensions, levelsByMoves, progression } = this;\n    const { gridSize, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadLevel(index: number) {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels[index];\n  }\n}\n\nclass InfiniteWorld extends BasicWorld {\n  levels: Array<SolvableLevel> = [];\n  lastIndex = 0;\n\n  constructor(dimensions: Point) {\n    super(dimensions, Difficulty.Infinite);\n  }\n\n  generateLevels() {\n    const { dimensions, levels, progression, lastIndex } = this;\n    const { gridSize } = progression;\n    if (levels.length > lastIndex + 10) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    // todo randomize gridSize, minMoves\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: rangeFrom(progression.minMoves, 10),\n    })\n    this.levels.push(...gen.generateLevels(10, 10));\n    if (levels.length > lastIndex + 10) {\n      console.log('infinite loaded!');\n    }\n  }\n\n  async loadLevel(index: number) {\n    while (index > this.levels.length) {\n      this.generateLevels();\n    }\n    this.lastIndex = index;\n    return this.levels[index];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor(dimensions: Point) {\n    this.loaders = [\n      new InfiniteWorld(dimensions),\n      ...[\n        Difficulty.Easy,\n        Difficulty.Medium,\n        Difficulty.Hard,\n      ].map(d => new FiniteWorld(dimensions, d)),\n    ];\n  }\n\n  getLoaderByDifficulty(difficulty: Difficulty) {\n    return this.loaders.filter(w => w.difficulty === difficulty)[0];\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds = 0) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getElapsed(): number {\n    return new Date().getTime() - this.started.getTime();\n  }\n  getRemaining(): number {\n    return this.milliseconds - this.getElapsed();\n  }\n  getPercent(): number {\n    return this.getRemaining() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n  formatElapsed(): string {\n    return Math.floor(this.getElapsed() / 1000).toString(10);\n  }\n  formatRemaining(): string {\n    return Math.floor(this.getRemaining() / 1000).toString(10);\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\nimport { AbsoluteContainer, LoadingButton, ReadyButton } from './common';\n\nconst WorldOptionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst WorldOption = styled.div`\n  margin: 1em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\nconst WorldTitle = styled.h2`\n  margin-bottom: 0.5rem;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\n\ninterface State {\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n  [Difficulty.Infinite]: boolean,\n};\n\nconst defaultState = {\n  [Difficulty.Easy]: false,\n  [Difficulty.Medium]: false,\n  [Difficulty.Hard]: false,\n  [Difficulty.Infinite]: false,\n};\n\nclass _MenuView extends React.Component<Props, State> {\n  state = { ...defaultState };\n\n  componentDidMount() {\n    this.reset();\n  }\n  reset() {\n    this.setState({\n      ...defaultState,\n    }, () => {\n      this.props.gm.worldLoader.loaders.forEach(world => {\n        world.onLoad.then(() => {\n          this.setState({\n            [world.difficulty]: true,\n          });\n        });\n      });\n    });\n  }\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.gm.setWorld(world);\n      this.reset();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { state } = this;\n    const { worldLoader } = this.props.gm;\n    if (store.world) {\n      return '';\n    }\n    const displayOrder = [\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n      Difficulty.Infinite,\n    ];\n    return (\n      <AbsoluteContainer>\n        <h1>\n          ice slide puzzle game\n        </h1>\n        <p>\n          select your difficulty level\n        </p>\n        <WorldOptionContainer>\n          {displayOrder.map(d => worldLoader.getLoaderByDifficulty(d)).map(world => (\n            <WorldOption key={world.difficulty}>\n              <WorldTitle>\n                {world.displayName()}\n              </WorldTitle>\n              <div>\n                {world.isInfinite() ? '∞' : world.totalLevels} levels\n              </div>\n              <h3>\n                {state[world.difficulty] ? (\n                  <ReadyButton onClick={() => this.loadWorld(world)}>\n                    PLAY\n                </ReadyButton>\n                ) : (\n                    <LoadingButton>\n                      loading\n                </LoadingButton>\n                  )}\n              </h3>\n            </WorldOption>\n          ))}\n        </WorldOptionContainer>\n        <p>\n          made by <a href=\"https://twitter.com/mpaulweeks\">@mpaulweeks</a>\n        </p>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const MenuView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_MenuView);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { setWorld } from \"../redux/actions\";\nimport { GameManager } from './manager';\nimport { AbsoluteContainer, Row, ReadyButton } from './common';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\ninterface State {};\n\nclass _ScoreView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    const { world, isGameOver } = store;\n    if (!(world && isGameOver)) {\n      return '';\n    }\n    return (\n      <AbsoluteContainer>\n        <Row>\n          <h1>\n            {world.isInfinite() ? `\n              game over! you managed to complete ${gm.currentLevelIndex - 1} levels\n            ` : `\n              you win! your score is ${store.secondsElapsed}. try to get it lower!\n            `}\n          </h1>\n        </Row>\n        <Row>\n          <ReadyButton onClick={this.onReset}>RESET</ReadyButton>\n        </Row>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const ScoreView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_ScoreView);\n","// data\nexport const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_LEVEL = 'SET_LEVEL';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_WORLD = 'SET_WORLD';\n","import { Stopwatch, World } from \"../../utils\";\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD } from \"../actionTypes\";\n\nexport interface DataState {\n  world?: World;\n  secondsElapsed: number;\n  secondsRemaining: number;\n  level: number;\n  isGameOver: boolean;\n}\n\ninterface DataAction {\n  type: string;\n  payload: {\n    stopwatch?: Stopwatch;\n    level?: number;\n    world?: World;\n  };\n}\n\nconst initialState: DataState = {\n  secondsRemaining: 0,\n  secondsElapsed: 0,\n  level: 0,\n  world: undefined,\n  isGameOver: false,\n};\n\nfunction reducer(state = initialState, action: DataAction) {\n  switch (action.type) {\n    case SET_GAME_OVER: {\n      return {\n        ...state,\n        isGameOver: true,\n      };\n    }\n    case SET_LEVEL: {\n      const { level } = action.payload;\n      return {\n        ...state,\n        level,\n      };\n    }\n    case SET_TIMER: {\n      const { stopwatch } = action.payload;\n      return {\n        ...state,\n        secondsElapsed: stopwatch && stopwatch.formatElapsed(),\n        secondsRemaining: stopwatch && stopwatch.formatRemaining(),\n      };\n    }\n    case SET_WORLD: {\n      const { world } = action.payload;\n      return {\n        ...state,\n        isGameOver: false,\n        world,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport default reducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer);\n","import { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD } from '../actionTypes';\n\nexport const setGameOver = () => ({\n  type: SET_GAME_OVER,\n  payload: {},\n});\nexport const setLevel = (level: number) => ({\n  type: SET_LEVEL,\n  payload: {\n    level,\n  },\n});\n\nexport const setTimer = (stopwatch: Stopwatch) => ({\n  type: SET_TIMER,\n  payload: {\n    stopwatch,\n  },\n});\n\nexport const setWorld = (world?: World) => ({\n  type: SET_WORLD,\n  payload: {\n    world,\n  },\n});\n","import { store } from \"../redux\";\nimport { setGameOver, setLevel, setTimer, setWorld } from \"../redux/actions\";\nimport { Move, MoveInformation, PlayableLevel, Point, Stopwatch, World, WorldLoader } from \"../utils\";\n\nconst Color = {\n  block: 'black',\n  goal: 'yellow',\n  grid: 'black',\n  glow: 'rgba(150, 150, 255, 1)',\n};\nconst Sprite = {\n  hero: 'ice_blue.png',\n};\n\nconst moveMap: { [code: string]: Move } = {\n  'ArrowLeft': Move.Left,\n  'ArrowRight': Move.Right,\n  'ArrowUp': Move.Up,\n  'ArrowDown': Move.Down,\n};\n\ninterface Sprite {\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n}\n\ninterface Sprites {\n  hero: Sprite;\n};\n\nfunction loadImage(url: string) {\n  const img = new Image();\n  const state: Sprite = {\n    image: img,\n    loaded: new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n    }),\n  };\n  img.src = url;\n  return state;\n}\n\nexport interface Animation {\n  point: Point,\n  stopwatch: Stopwatch,\n}\n\nexport class GameManager {\n  dispatch = store.dispatch;\n  worldLoader: WorldLoader;\n  worldDimensions: Point;\n  canvasDimensions: Point;\n  canvasElm?: HTMLCanvasElement;\n  ctx?: CanvasRenderingContext2D;\n  world?: World;\n  stopwatch = new Stopwatch();\n  currentLevel: (PlayableLevel | undefined);\n  currentLevelIndex = 0;\n  sprites: Sprites;\n  loadedAssets: Promise<boolean>;\n  pendingAnimations: Array<Animation> = [];\n  shouldDrawGrid = false;\n\n  constructor() {\n    // determine canvas size\n    const screenHeight = document.body.clientHeight;\n    const screenWidth = document.body.clientWidth;\n    const isMobile = screenHeight > screenWidth;\n    const dimensions = isMobile ? new Point(8, 10) : new Point(10, 8);\n    const height = document.body.clientHeight * 0.7; // matching css of 70vh\n    let width = height * dimensions.x / dimensions.y;\n    while (width > screenWidth) {\n      dimensions.x -= 1;\n      width = height * dimensions.x / dimensions.y;\n    }\n    this.worldDimensions = dimensions;\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.canvasDimensions = new Point(width, height);\n\n    // load sprites\n    this.sprites = {\n      hero: loadImage('img/' + Sprite.hero),\n    };\n    const allSprites = Object.values(this.sprites);\n    this.loadedAssets = Promise.all(allSprites.map(s => s.loaded)).then(() => true);\n\n    // setup key listeners\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.clickReset();\n      }\n      if (e.code === 'KeyN') {\n        this.nextLevel();\n      }\n    });\n\n    // setup passive draw/load loop\n    this.loop();\n  }\n  private async loop() {\n    const { world, stopwatch } = this;\n    if (world) {\n      await this.draw();\n      if (world.isInfinite()) {\n        world.generateLevels();\n        if (stopwatch.getRemaining() !== store.getState().secondsRemaining) {\n          this.dispatch(setTimer(stopwatch));\n        }\n        if (stopwatch.getRemaining() < 0) {\n          this.triggerGameOver();\n        }\n      } else {\n        if (stopwatch.getElapsed() !== store.getState().secondsElapsed) {\n          this.dispatch(setTimer(stopwatch));\n        }\n      }\n    } else if (!store.getState().isGameOver) {\n      this.worldLoader.loadInBackground();\n    }\n    window.requestAnimationFrame(() => this.loop());\n  }\n\n  clickReset = () => {\n    this.currentLevel && this.currentLevel.reset();\n  }\n  clickToggleGrid = () => {\n    this.shouldDrawGrid = !this.shouldDrawGrid;\n  }\n  clickUp = () => {\n    this.handleMove(Move.Up);\n  }\n  clickDown = () => {\n    this.handleMove(Move.Down);\n  }\n  clickLeft = () => {\n    this.handleMove(Move.Left);\n  }\n  clickRight = () => {\n    this.handleMove(Move.Right);\n  }\n\n  setup(canvasElm: HTMLCanvasElement) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = this.canvasDimensions.x;\n    canvasElm.height = this.canvasDimensions.y;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n  }\n  setWorld(world: World) {\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.world = world;\n    this.currentLevelIndex = 0;\n    this.stopwatch = world.createStopwatch();\n    this.nextLevel();\n    this.dispatch(setWorld(world));\n  }\n  unsetWorld() {\n    // todo score should dispatch this action\n    this.world = undefined;\n    this.dispatch(setWorld(undefined));\n  }\n  triggerGameOver() {\n    this.world = undefined;\n    this.dispatch(setGameOver());\n  }\n\n  handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    this.animateMove(moveInfo);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('todo this should be impossible');\n    }\n    // todo maybe keep animations between levels?\n    // this.pendingAnimations = [];\n    const nextLevel = await world.loadLevel(currentLevelIndex);\n    this.currentLevel = nextLevel && new PlayableLevel(nextLevel);\n    if (this.currentLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.dispatch(setLevel(this.currentLevelIndex));\n      this.currentLevelIndex += 1;\n      this.stopwatch.addTime(1000 * (world.progression.secondsPerLevel || 0));\n    } else {\n      this.triggerGameOver();\n    }\n  }\n\n  animateMove(moveInfo: MoveInformation) {\n    const animations = moveInfo.traveled.map((p, i, arr) => ({\n      point: p,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n    }));\n    this.pendingAnimations.push(...animations);\n  }\n  async draw() {\n    const { canvasElm, ctx, currentLevel, loadedAssets, sprites } = this;\n    if (!canvasElm || !ctx) {\n      return;\n    }\n    const { width, height } = canvasElm;\n\n    await loadedAssets;\n\n    const grd = ctx.createLinearGradient(0, 0, width, height);\n    grd.addColorStop(0, '#eeeeee');\n    grd.addColorStop(1, '#bbbbbb');\n    ctx.fillStyle = grd;\n    ctx.fillRect(0, 0, width, height);\n\n    if (!currentLevel) {\n      ctx.font = '20px monospace';\n      ctx.fillStyle = Color.grid;\n      ctx.fillText('you win! returning to the main menu...', 100, 100);\n      return;\n    }\n\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n\n    // grid\n    if (this.shouldDrawGrid) {\n      ctx.strokeStyle = Color.grid;\n      for (let y = 1; y < currentLevel.level.height; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * blockHeight);\n        ctx.lineTo(width, y * blockHeight);\n        ctx.stroke();\n      }\n      for (let x = 1; x < currentLevel.level.width; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * blockWidth, 0);\n        ctx.lineTo(x * blockWidth, height);\n        ctx.stroke();\n      }\n    }\n\n    // ctx.fillStyle = 'grey';\n    // ctx.fillRect(currentLevel.level.start.x * blockWidth, currentLevel.level.start.y * blockHeight, blockWidth, blockHeight);\n\n    ctx.fillStyle = Color.goal;\n    ctx.fillRect(currentLevel.level.win.x * blockWidth, currentLevel.level.win.y * blockHeight, blockWidth, blockHeight);\n\n    ctx.fillStyle = Color.block;\n    currentLevel.level.blocks.forEach(block => {\n      ctx.fillRect(block.x * blockWidth, block.y * blockHeight, blockWidth, blockHeight);\n    });\n\n    this.pendingAnimations = this.pendingAnimations.filter(a => a.stopwatch.getRemaining() > 0);\n    this.pendingAnimations.forEach(a => {\n      const { point, stopwatch } = a;\n      const blueLevel = stopwatch.getPercent();\n      ctx.fillStyle = `rgba(150, 150, 255, ${blueLevel})`;\n      ctx.fillRect(\n        point.x * blockWidth + blockWidth * 0.2,\n        point.y * blockHeight + blockHeight * 0.2,\n        blockWidth * 0.6,\n        blockHeight * 0.6\n      );\n    });\n\n    ctx.strokeStyle = Color.glow;\n    ctx.strokeRect(currentLevel.hero.point.x * blockWidth, currentLevel.hero.point.y * blockHeight, blockWidth, blockHeight);\n    ctx.drawImage(\n      sprites.hero.image,\n      currentLevel.hero.point.x * blockWidth + blockWidth * 0.2,\n      currentLevel.hero.point.y * blockHeight + blockHeight * 0.2,\n      blockWidth * 0.6,\n      blockHeight * 0.6\n    );\n  }\n}\n","import React from 'react';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { MenuView } from './MenuView';\nimport { ScoreView } from './ScoreView';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\n\nconst Container = styled.div`\n  max-width: 50vh;\n  margin: 0px auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  height: 70vh;\n`;\n\ninterface Props {\n  store: DataState;\n}\n\nclass _App extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  gm = new GameManager();\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.gm.setup(canvasElm);\n    }\n  }\n\n  render() {\n    const { gm } = this;\n    return (\n      <Container>\n        <GameView gm={gm}>\n          <Canvas ref={this.canvasRef} />\n        </GameView>\n        <MenuView gm={gm} />\n        <ScoreView gm={gm} />\n      </Container>\n    );\n  }\n}\n\nexport const App = connect(\n  (store: DataState) => ({ store })\n)(_App);\n","import { Generator, Level, Point } from '../utils';\n\nfunction testLevelGen() {\n  const l1 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(2, 4),\n    ]\n  );\n  console.log(l1.print())\n  console.log(l1.solve())\n\n  const l2 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(4, 0),\n    ]\n  );\n  console.log(l2.print())\n  console.log(l2.solve())\n\n  const gen = new Generator(5, 5, 0.1, 5);\n  const levels = gen.generateLevels(10, 1000);\n  levels.forEach(l => {\n    console.log(l.level.print())\n    console.log('Solution:', l.soln.printMoves())\n    console.log('\\n');\n  });\n};\n\nexport default {\n  testLevelGen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport { store } from './redux';\nimport scripts from './script';\n\n// debug scripts via the browser console\nwindow.scripts = scripts;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}