{"version":3,"sources":["utils/moves.ts","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","fe/AudioPlayer.tsx","redux/actionTypes/index.ts","redux/reducers/index.ts","redux/actions/index.ts","redux/index.ts","fe/common.ts","fe/GameView.tsx","fe/sprite.ts","fe/MenuView.tsx","fe/ScoreView.tsx","fe/manager.ts","fe/App.tsx","script/index.ts","index.js"],"names":["Move","Block","Moves","Object","keys","filter","k","isNaN","Number","map","PointHistory","point","points","moves","classCallCheck","this","createClass","key","value","newPoint","move","push","_this","m","history","clone","toConsumableArray","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Left","Right","Up","Down","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","level","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","arguments","undefined","started","Date","getTime","getElapsed","getRemaining","time","SongsByDifficulty","_SongsByDifficulty","defineProperty","Easy","Medium","Hard","Infinite","ProgressionByDifficulty","_ProgressionByDifficu","gridSize","minMoves","levelsPerTier","totalLevels","secondsPerLevel","BasicWorld","dimensions","difficulty","progression","loaded","onLoad","registerLoaded","Promise","resolve","reject","startTime","isInfinite","FiniteWorld","_this2","possibleConstructorReturn","getPrototypeOf","call","levelsByMoves","obj","num","sort","a","remainingMinMoves","getLevelKeys","scaledDimensions","generateLevels","l","tier","apply","_this3","InfiniteWorld","_this4","lastIndex","_this$levels","gen","console","log","WorldLoader","loaders","d","w","toLoad","_AudioPlayer","elmsByDiff","desiredVolume","prevProps","_this$props$store","props","store","audio","world","playing","stopAll","elm","volume","play","pause","currentTime","diff","stopElm","react_default","createElement","loop","src","ref","React","Component","AudioPlayer","connect","SET_GAME_OVER","SET_LEVEL","SET_TIMER","SET_WORLD","TOGGLE_MUSIC","mobilecheck","check","navigator","userAgent","vendor","window","opera","test","substr","initialState","isMobile","secondsRemaining","secondsElapsed","isGameOver","reducer","state","action","type","objectSpread","payload","stopwatch","formatElapsed","formatRemaining","setTimer","setWorld","toggleMusic","createStore","rootReducer","AbsoluteContainer","styled","div","_templateObject","Row","_templateObject2","Column","_templateObject3","LoadingButton","_templateObject4","ReadyButton","_templateObject5","KeyButton","_templateObject6","Container","GameView_templateObject","SubContainer","GameView_templateObject2","Header","GameView_templateObject3","Footer","GameView_templateObject4","CanvasContainer","GameView_templateObject5","CanvasOverlay","GameView_templateObject6","_GameView","_this$props","gm","onClick","mouseMove","children","clickReset","clickToggleGrid","GameView","loadImage","url","img","Image","image","onload","spriteImages","heroLeft","heroRight","groundIce1","groundIce2","groundIce3","groundIce4","groundIce5","groundIce6","groundIce7","groundIce8","groundIce9","treeLight","treeHeavy","igloo","Sprites","all","values","s","then","WorldOptionContainer","MenuView_templateObject","GameTitle","h1","MenuView_templateObject2","WorldOption","MenuView_templateObject3","WorldTitle","h2","MenuView_templateObject4","WorldButton","h3","MenuView_templateObject5","defaultState","_defaultState","spritesLoaded","_MenuView","reset","setState","worldLoader","displayOrder","alt","getLoaderByDifficulty","displayName","loadWorld","href","MenuView","_ScoreView","onReset","unsetWorld","currentLevelIndex","ScoreView","Color","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","GameManager","dispatch","worldDimensions","canvasDimensions","canvasElm","ctx","currentLevel","spriteFacing","loadedAssets","pendingAnimations","shouldDrawGrid","evt","rect","target","getBoundingClientRect","clientX","left","clientY","top","px","py","isTopRight","isTopLeft","handleMove","clickUp","clickDown","clickLeft","clickRight","screenHeight","document","body","clientHeight","screenWidth","clientWidth","addEventListener","e","code","nextLevel","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","draw","getState","triggerGameOver","loadInBackground","requestAnimationFrame","stop","getContext","createStopwatch","moveHero","animateMove","_nextLevel","_callee2","_context2","loadLevel","sent","printMoves","addTime","_this$pendingAnimatio","animations","slice","t","sprite","scale","blockWidth","blockHeight","drawImage","alpha","oldAlpha","globalAlpha","drawSprite","_draw","_callee3","_y","_x","_context3","abrupt","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","opacity","getPercent","drawSpriteWithOpacity","block","arc","PI","fill","App_templateObject","Canvas","canvas","App_templateObject2","_App","canvasRef","createRef","setup","App_Container","App","script","testLevelGen","l1","print","l2","scripts","ReactDOM","render","es","getElementById"],"mappings":"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","file":"static/js/main.f813ddc3.chunk.js","sourcesContent":["import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = Object\n  .keys(Move)\n  .filter(k => isNaN(Number(k)))\n  .map(k => Move[k]);\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface Traveled {\n  move: Move,\n  point: Point,\n}\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Traveled>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [{\n      move: move,\n      point: current,\n    }];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push({move: move, point: next});\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(start: number, length: number): Array<number> {\n  return range(length).map(i => i + start);\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range, rangeFrom } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\nimport { Stopwatch } from \"./stopwatch\";\n\nexport enum Difficulty {\n  Easy = 1,\n  Medium,\n  Hard,\n  Infinite,\n  // Test,\n};\n\nexport const SongsByDifficulty = {\n  [Difficulty.Easy]: 'music/visager_village_dreaming.mp3',\n  [Difficulty.Medium]: 'music/visager_the_final_road.mp3',\n  [Difficulty.Hard]: 'music/visager_the_great_forest.mp3',\n  [Difficulty.Infinite]: 'music/visager_dark_sanctum.mp3',\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  gridSize: (number),\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel?: number;\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Easy]: {\n    gridSize: 1,\n    minMoves: 7,\n    levelsPerTier: 1,\n    totalLevels: 5,\n  },\n  [Difficulty.Medium]: {\n    gridSize: 1.5,\n    minMoves: 12,\n    levelsPerTier: 1,\n    totalLevels: 10,\n  },\n  [Difficulty.Hard]: {\n    gridSize: 2,\n    minMoves: 12,\n    levelsPerTier: 2,\n    totalLevels: 15,\n  },\n  [Difficulty.Infinite]: {\n    gridSize: 1.5,\n    minMoves: 7,\n    levelsPerTier: 3,\n    totalLevels: 20,\n    secondsPerLevel: 5,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport interface World {\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded: boolean;\n  onLoad: Promise<World>;\n  displayName: () => string;\n  isInfinite: () => boolean;\n  createStopwatch: () => Stopwatch;\n  generateLevels: () => void;\n  loadLevel: (i: number) => Promise<SolvableLevel | undefined>;\n}\n\nclass BasicWorld implements World {\n  dimensions: Point;\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded = false;\n  onLoad: Promise<World>;\n  registerLoaded = () => { };\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    this.dimensions = dimensions;\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n    this.totalLevels = this.progression.totalLevels;\n  }\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n  isInfinite() {\n    return this.difficulty === Difficulty.Infinite;\n  }\n  createStopwatch() {\n    const secondsPerLevel = this.progression.secondsPerLevel || 0;\n    const startTime = 1000 * (60 - secondsPerLevel);\n    // const startTime = 5; // for testing infinite mode\n    return new Stopwatch(this.isInfinite() ? startTime : undefined);\n  }\n\n  generateLevels() {\n    throw new Error('base class');\n  }\n  loadLevel(index: number): Promise<SolvableLevel | undefined> {\n    throw new Error('base class');\n  }\n}\n\nclass FiniteWorld extends BasicWorld {\n  levelsByMoves: LevelsByMoves;\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    super(dimensions, difficulty);\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { dimensions, levelsByMoves, progression } = this;\n    const { gridSize, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadLevel(index: number) {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels[index];\n  }\n}\n\nclass InfiniteWorld extends BasicWorld {\n  levels: Array<SolvableLevel> = [];\n  lastIndex = 0;\n\n  constructor(dimensions: Point) {\n    super(dimensions, Difficulty.Infinite);\n  }\n\n  generateLevels() {\n    const { dimensions, levels, progression, lastIndex } = this;\n    const { gridSize } = progression;\n    if (levels.length > lastIndex + 10) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    // todo randomize gridSize, minMoves\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: rangeFrom(progression.minMoves, 10),\n    })\n    this.levels.push(...gen.generateLevels(10, 10));\n    if (levels.length > lastIndex + 10) {\n      console.log('infinite loaded!');\n    }\n  }\n\n  async loadLevel(index: number) {\n    while (index > this.levels.length) {\n      this.generateLevels();\n    }\n    this.lastIndex = index;\n    return this.levels[index];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor(dimensions: Point) {\n    this.loaders = [\n      new InfiniteWorld(dimensions),\n      ...[\n        Difficulty.Easy,\n        Difficulty.Medium,\n        Difficulty.Hard,\n      ].map(d => new FiniteWorld(dimensions, d)),\n    ];\n  }\n\n  getLoaderByDifficulty(difficulty: Difficulty) {\n    return this.loaders.filter(w => w.difficulty === difficulty)[0];\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds = 0) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getElapsed(): number {\n    return new Date().getTime() - this.started.getTime();\n  }\n  getRemaining(): number {\n    return this.milliseconds - this.getElapsed();\n  }\n  getPercent(): number {\n    return this.getRemaining() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n  formatElapsed(): string {\n    return Math.floor(this.getElapsed() / 1000).toString(10);\n  }\n  formatRemaining(): string {\n    return Math.floor(this.getRemaining() / 1000).toString(10);\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { SongsByDifficulty } from '../utils';\nimport { DataState } from '../redux/reducers';\n\ninterface Props {\n  store: DataState;\n};\ninterface State {};\n\nclass _AudioPlayer extends React.Component<Props, State> {\n  elmsByDiff = {};\n  desiredVolume = 0.5;\n\n  componentDidUpdate(prevProps) {\n    const { elmsByDiff, desiredVolume } = this;\n    const { audio, world } = this.props.store;\n    if (!audio.playing) {\n      // if props gets set to false, make sure we dont have pointers to deleted DOM objects\n      this.elmsByDiff = {};\n    }\n    if (world) {\n      if (world !== prevProps.store.world) {\n        // if changing to new world, stop old music\n        this.stopAll();\n      }\n      const elm = elmsByDiff[world.difficulty];\n      if (elm) {\n        // if elm, we're playing\n        if (elm.volume !== desiredVolume) {\n          elm.volume = desiredVolume;\n        }\n        elm.play();\n      }\n    }\n  }\n  stopElm(elm: HTMLAudioElement) {\n    elm.pause();\n    elm.currentTime = 0;\n  }\n  stopAll() {\n    const { elmsByDiff } = this;\n    Object.keys(elmsByDiff).forEach(diff => this.stopElm(elmsByDiff[diff]));\n  }\n  render() {\n    const { playing } = this.props.store.audio;\n    return playing && Object.keys(SongsByDifficulty).map(diff => (\n      <audio\n        key={diff}\n        loop\n        src={SongsByDifficulty[diff]}\n        ref={elm => this.elmsByDiff[diff] = elm}\n      ></audio>\n    ));\n  }\n}\n\nexport const AudioPlayer = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_AudioPlayer);\n","export const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_LEVEL = 'SET_LEVEL';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_WORLD = 'SET_WORLD';\nexport const TOGGLE_MUSIC = 'TOGGLE_MUSIC';\n","import { Stopwatch, World } from \"../../utils\";\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC } from \"../actionTypes\";\n\n// https://stackoverflow.com/a/11381730\nconst mobilecheck = function() {\n  var check = false;\n  //eslint-disable-next-line\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n};\n\nexport interface AudioState {\n  playing: boolean;\n}\nexport interface DataState {\n  audio: AudioState,\n  isMobile: boolean;\n  world?: World;\n  secondsElapsed: number;\n  secondsRemaining: number;\n  level: number;\n  isGameOver: boolean;\n}\n\ninterface DataAction {\n  type: string;\n  payload: {\n    stopwatch?: Stopwatch;\n    level?: number;\n    world?: World;\n  };\n}\n\nconst initialState: DataState = {\n  audio: {\n    playing: !mobilecheck(),\n  },\n  isMobile: mobilecheck(),\n  secondsRemaining: 0,\n  secondsElapsed: 0,\n  level: 0,\n  world: undefined,\n  isGameOver: false,\n};\n\nfunction reducer(state = initialState, action: DataAction) {\n  switch (action.type) {\n    case SET_GAME_OVER: {\n      return {\n        ...state,\n        isGameOver: true,\n      };\n    }\n    case SET_LEVEL: {\n      const { level } = action.payload;\n      return {\n        ...state,\n        level,\n      };\n    }\n    case SET_TIMER: {\n      const { stopwatch } = action.payload;\n      return {\n        ...state,\n        secondsElapsed: stopwatch && stopwatch.formatElapsed(),\n        secondsRemaining: stopwatch && stopwatch.formatRemaining(),\n      };\n    }\n    case SET_WORLD: {\n      const { world } = action.payload;\n      return {\n        ...state,\n        isGameOver: false,\n        world,\n        audio: {\n          ...state.audio,\n        },\n      };\n    }\n    case TOGGLE_MUSIC: {\n      return {\n        ...state,\n        audio: {\n          ...state.audio,\n          playing: !state.audio.playing,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport default reducer;\n","import { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC } from '../actionTypes';\n\nexport const setGameOver = () => ({\n  type: SET_GAME_OVER,\n  payload: {},\n});\n\nexport const setLevel = (level: number) => ({\n  type: SET_LEVEL,\n  payload: {\n    level,\n  },\n});\n\nexport const setTimer = (stopwatch: Stopwatch) => ({\n  type: SET_TIMER,\n  payload: {\n    stopwatch,\n  },\n});\n\nexport const setWorld = (world?: World) => ({\n  type: SET_WORLD,\n  payload: {\n    world,\n  },\n});\n\nexport const toggleMusic = () => ({\n  type: TOGGLE_MUSIC,\n  payload: {},\n});\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer);\nexport * from './actions';\nexport * from './reducers';\n","import styled from 'styled-components';\n\nexport const AbsoluteContainer = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  width: 100%;\n  height: 100vh;\n\n  background-color: var(--background);\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: stretch;\n  flex-wrap: nowrap;\n`;\nexport const Column = styled(Row)`\n  flex-direction: column;\n`;\n\nexport const LoadingButton = styled.div`\n  width: 4em;\n  padding: 0.5em;\n  border-radius: 1em;\n\n  border: 2px solid grey;\n  font-style: italic;\n  color: grey;\n  background-color: var(--background);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n\n`;\nexport const ReadyButton = styled(LoadingButton)`\n  cursor: pointer;\n\n  border-color: var(--foreground);\n  font-style: normal;\n  color: var(--foreground);\n\n  &:hover {\n    color: var(--background);\n    background-color: var(--foreground);\n  }\n`;\n\nexport const KeyButton = styled(ReadyButton)`\n  height: 4vh;\n  width: auto;\n  min-width: 2em;\n  padding: 0 0.75em;\n  margin: 0 0.3em;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DataState, toggleMusic } from '../redux';\nimport { connect } from 'react-redux';\nimport { GameManager } from './manager';\nimport { Row, Column, KeyButton } from './common';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst SubContainer = styled(Row)`\n  width: 100%;\n  margin: 0px;\n`;\nconst Header = styled(SubContainer)`\n  height: 10vh;\n  font-family: monospace;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\nconst Footer = styled(SubContainer)`\n  height: 10vh;\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n`;\n\nconst CanvasOverlay = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: url('img/snow_loose.gif');\n  background-size: contain;\n  background-repeat: none;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic: () => void;\n};\n\nclass _GameView extends React.Component<Props> {\n  render() {\n    const { gm, toggleMusic } = this.props;\n    const { isMobile, world, level, secondsRemaining, secondsElapsed } = this.props.store;\n    return (\n      <Container>\n        <Header>\n          <Column>\n            <div>Level {level + 1}</div>\n          </Column>\n          <Column>\n            <div>{world && world.isInfinite() ? secondsRemaining : secondsElapsed}s</div>\n          </Column>\n        </Header>\n        <CanvasContainer onClick={gm.mouseMove}>\n          {this.props.children}\n          <CanvasOverlay />\n        </CanvasContainer>\n        <Footer>\n          <Column>\n            <KeyButton onClick={gm.clickReset}>reset level</KeyButton>\n          </Column>\n          {!isMobile && (\n            // mobile can play music, but its too cramped to show this button\n            <Column>\n              <KeyButton onClick={toggleMusic}>music is {this.props.store.audio.playing ? 'on' : 'off'}</KeyButton>\n            </Column>\n          )}\n          <Column>\n            <KeyButton onClick={gm.clickToggleGrid}>toggle grid</KeyButton>\n          </Column>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\n\nexport const GameView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleMusic,\n  }\n)(_GameView);\n","\n\nexport interface Sprite {\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n}\n\nexport interface SpriteManager {\n  loaded: Promise<boolean>,\n  hero: Sprite;\n  groundIce1: Sprite,\n  groundIce2: Sprite,\n  groundIce3: Sprite,\n  groundIce4: Sprite,\n  groundIce5: Sprite,\n  groundIce6: Sprite,\n  groundIce7: Sprite,\n  groundIce8: Sprite,\n  groundIce9: Sprite,\n  treeLight: Sprite,\n  treeHeavy: Sprite,\n  igloo: Sprite,\n};\n\nfunction loadImage(url: string) {\n  const img = new Image();\n  const state: Sprite = {\n    image: img,\n    loaded: new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n    }),\n  };\n  img.src = url;\n  return state;\n}\n\n// load sprites\nconst spriteImages = {\n  heroLeft: loadImage('sprite/snowman_left.png'),\n  heroRight: loadImage('sprite/snowman_right.png'),\n  groundIce1: loadImage('sprite/ground_ice_1.png'),\n  groundIce2: loadImage('sprite/ground_ice_2.png'),\n  groundIce3: loadImage('sprite/ground_ice_3.png'),\n  groundIce4: loadImage('sprite/ground_ice_4.png'),\n  groundIce5: loadImage('sprite/ground_ice_5.png'),\n  groundIce6: loadImage('sprite/ground_ice_6.png'),\n  groundIce7: loadImage('sprite/ground_ice_7.png'),\n  groundIce8: loadImage('sprite/ground_ice_8.png'),\n  groundIce9: loadImage('sprite/ground_ice_9.png'),\n  treeLight: loadImage('sprite/tree_light.png'),\n  treeHeavy: loadImage('sprite/tree_heavy.png'),\n  igloo: loadImage('sprite/igloo.png'),\n};\nexport const Sprites: SpriteManager = {\n  ...spriteImages,\n  loaded: Promise.all(Object.values(spriteImages).map(s => s.loaded)).then(() => true),\n};\nwindow.Sprites = Sprites;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState, toggleMusic } from '../redux';\nimport { GameManager } from './manager';\nimport { Sprites } from './sprite';\nimport { AbsoluteContainer, LoadingButton, ReadyButton, Row, KeyButton } from './common';\n\nconst WorldOptionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst GameTitle = styled.h1`\n  margin-bottom: 0px;\n`;\n\nconst WorldOption = styled.div`\n  padding: 0.5em;\n  margin: 0.5em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  background-color: var(--offset);\n  border-radius: 1em;\n`;\nconst WorldTitle = styled.h2`\n  margin: 0.5rem;\n`;\nconst WorldButton = styled.h3`\n  margin: 0px;\n  margin-top: 0.5em;\n`;\n\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic: () => void;\n};\n\ninterface State {\n  spritesLoaded: boolean,\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n  [Difficulty.Infinite]: boolean,\n};\n\nconst defaultState = {\n  spritesLoaded: false,\n  [Difficulty.Easy]: false,\n  [Difficulty.Medium]: false,\n  [Difficulty.Hard]: false,\n  [Difficulty.Infinite]: false,\n};\n\nclass _MenuView extends React.Component<Props, State> {\n  state = { ...defaultState };\n\n  componentDidMount() {\n    this.reset();\n    Sprites.loaded.then(() => {\n      this.setState({spritesLoaded: true});\n      console.log('sprites loaded');\n    });\n  }\n  reset() {\n    this.setState({\n      ...defaultState,\n    }, () => {\n      this.props.gm.worldLoader.loaders.forEach(world => {\n        world.onLoad.then(() => {\n          this.setState({\n            [world.difficulty]: true,\n          });\n        });\n      });\n    });\n  }\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.gm.setWorld(world);\n      this.reset();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { state } = this;\n    const { worldLoader } = this.props.gm;\n    if (store.world) {\n      return '';\n    }\n    const displayOrder = [\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n      Difficulty.Infinite,\n    ];\n    return (\n      <AbsoluteContainer>\n        <GameTitle>\n          <em>ice slide puzzle</em>\n          <br/>\n          <img alt=\"\" src=\"sprite/igloo.png\"/>\n          <img alt=\"\" src=\"sprite/snowman_left.png\"/>\n        </GameTitle>\n        <WorldOptionContainer>\n          {displayOrder.map(d => worldLoader.getLoaderByDifficulty(d)).map(world => (\n            <WorldOption key={world.difficulty}>\n              <WorldTitle>\n                {world.displayName()}\n              </WorldTitle>\n              <div>\n                {world.isInfinite() ? '∞' : world.totalLevels} levels\n              </div>\n              <WorldButton>\n                {state[world.difficulty] ? (\n                  <ReadyButton onClick={() => this.loadWorld(world)}>\n                    PLAY\n                </ReadyButton>\n                ) : (\n                    <LoadingButton>\n                      loading\n                </LoadingButton>\n                  )}\n              </WorldButton>\n            </WorldOption>\n          ))}\n        </WorldOptionContainer>\n        <br/>\n        <Row>\n          <KeyButton onClick={() => this.props.toggleMusic()}>\n            music is {this.props.store.audio.playing ? 'on' : 'off'}\n          </KeyButton>\n        </Row>\n        <br/>\n        <div>\n          made by <a href=\"https://twitter.com/mpaulweeks\">@mpaulweeks</a>\n          <br/>\n          assets by <a href=\"https://www.kenney.nl\">Kenney</a>\n          <br/>\n          music by <a href=\"https://visager.bandcamp.com/album/songs-from-an-unmade-world\">Visager</a>\n        </div>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const MenuView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleMusic,\n  }\n)(_MenuView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\nimport { AbsoluteContainer, Row, ReadyButton } from './common';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\ninterface State {};\n\nclass _ScoreView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    const { world, isGameOver } = store;\n    if (!(world && isGameOver)) {\n      return '';\n    }\n    return (\n      <AbsoluteContainer>\n        <Row>\n          <h1>\n            {world.isInfinite() ? `\n              game over! you managed to complete ${gm.currentLevelIndex - 1} levels\n            ` : `\n              you win! your score is ${store.secondsElapsed}. try to get it lower!\n            `}\n          </h1>\n        </Row>\n        <Row>\n          <ReadyButton onClick={this.onReset}>RESET</ReadyButton>\n        </Row>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const ScoreView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_ScoreView);\n","import { store } from \"../redux\";\nimport { setGameOver, setLevel, setTimer, setWorld } from \"../redux\";\nimport { Move, MoveInformation, Traveled, PlayableLevel, Point, Stopwatch, World, WorldLoader } from \"../utils\";\nimport { Sprite, Sprites } from './sprite';\n\nconst Color = {\n  background: 'white', // matching css\n  grid: 'black',\n  glow: 'rgba(0, 0, 0, 0.5)',\n};\n\nconst moveMap: { [code: string]: Move } = {\n  'ArrowLeft': Move.Left,\n  'ArrowRight': Move.Right,\n  'ArrowUp': Move.Up,\n  'ArrowDown': Move.Down,\n};\n\nexport interface Animation {\n  traveled: Traveled,\n  stopwatch: Stopwatch,\n}\n\nexport class GameManager {\n  dispatch = store.dispatch;\n  worldLoader: WorldLoader;\n  worldDimensions: Point;\n  canvasDimensions: Point;\n  canvasElm?: HTMLCanvasElement;\n  ctx?: CanvasRenderingContext2D;\n  world?: World;\n  stopwatch = new Stopwatch();\n  currentLevel: (PlayableLevel | undefined);\n  currentLevelIndex = 0;\n  spriteFacing: Move.Right;\n  loadedAssets: Promise<boolean>;\n  pendingAnimations: Array<Animation> = [];\n  shouldDrawGrid = false;\n\n  constructor() {\n    // determine canvas size\n    const screenHeight = document.body.clientHeight;\n    const screenWidth = document.body.clientWidth;\n    const isMobile = screenHeight > screenWidth;\n    const dimensions = isMobile ? new Point(8, 10) : new Point(10, 8);\n    const height = document.body.clientHeight * 0.8; // matching css of 80vh\n    let width = height * dimensions.x / dimensions.y;\n    while (width > screenWidth) {\n      dimensions.x -= 1;\n      width = height * dimensions.x / dimensions.y;\n    }\n    this.worldDimensions = dimensions;\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.canvasDimensions = new Point(width, height);\n\n    // setup key listeners\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.clickReset();\n      }\n      if (e.code === 'KeyN') {\n        this.nextLevel();\n      }\n    });\n\n    // setup passive draw/load loop\n    this.loop();\n  }\n  private async loop() {\n    const { world, stopwatch } = this;\n    if (world) {\n      await this.draw();\n      if (world.isInfinite()) {\n        world.generateLevels();\n        if (stopwatch.getRemaining() !== store.getState().secondsRemaining) {\n          this.dispatch(setTimer(stopwatch));\n        }\n        if (stopwatch.getRemaining() < 0) {\n          this.triggerGameOver();\n        }\n      } else {\n        if (stopwatch.getElapsed() !== store.getState().secondsElapsed) {\n          this.dispatch(setTimer(stopwatch));\n        }\n      }\n    } else if (!store.getState().isGameOver) {\n      this.worldLoader.loadInBackground();\n    }\n    window.requestAnimationFrame(() => this.loop());\n  }\n\n  clickReset = () => {\n    this.currentLevel && this.currentLevel.reset();\n  }\n  clickToggleGrid = () => {\n    this.shouldDrawGrid = !this.shouldDrawGrid;\n  }\n  mouseMove = evt => {\n    const rect = evt.target.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    const px = x / rect.width;\n    const py = y / rect.height;\n    const isTopRight = px > py;\n    const isTopLeft = px + py < 1;\n    const move = (\n      (isTopLeft && isTopRight && Move.Up) ||\n      (!isTopLeft && isTopRight && Move.Right) ||\n      (!isTopLeft && !isTopRight && Move.Down) ||\n      (isTopLeft && !isTopRight && Move.Left)\n    );\n    if (move) {\n      this.handleMove(move);\n    }\n  }\n  clickUp = () => {\n    this.handleMove(Move.Up);\n  }\n  clickDown = () => {\n    this.handleMove(Move.Down);\n  }\n  clickLeft = () => {\n    this.handleMove(Move.Left);\n  }\n  clickRight = () => {\n    this.handleMove(Move.Right);\n  }\n\n  setup(canvasElm: HTMLCanvasElement) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = this.canvasDimensions.x;\n    canvasElm.height = this.canvasDimensions.y;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n  }\n  setWorld(world: World) {\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.world = world;\n    this.currentLevelIndex = 0;\n    this.stopwatch = world.createStopwatch();\n    this.nextLevel();\n    this.dispatch(setWorld(world));\n  }\n  unsetWorld() {\n    // todo score should dispatch this action\n    this.world = undefined;\n    this.dispatch(setWorld(undefined));\n  }\n  triggerGameOver() {\n    this.world = undefined;\n    this.dispatch(setGameOver());\n  }\n\n  handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    // sprite show face left/right or switch its current direction\n    this.spriteFacing = [Move.Left, Move.Right].includes(move) ? move : (\n      this.spriteFacing === Move.Right ? Move.Left : Move.Right\n    )\n    this.animateMove(moveInfo);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('todo this should be impossible');\n    }\n    // todo maybe keep animations between levels?\n    // this.pendingAnimations = [];\n    const nextLevel = await world.loadLevel(currentLevelIndex);\n    this.currentLevel = nextLevel && new PlayableLevel(nextLevel);\n    if (this.currentLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.dispatch(setLevel(this.currentLevelIndex));\n      this.currentLevelIndex += 1;\n      this.stopwatch.addTime(1000 * (world.progression.secondsPerLevel || 0));\n    } else {\n      this.triggerGameOver();\n    }\n  }\n\n  animateMove(moveInfo: MoveInformation) {\n    const animations = moveInfo.traveled.slice(0, -1).map((t, i, arr) => ({\n      traveled: t,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n    }));\n    this.pendingAnimations.push(...animations);\n  }\n  drawSprite(sprite: Sprite, x: number, y: number, scale?: number) {\n    const { canvasElm, ctx, currentLevel } = this;\n    const { width, height } = canvasElm;\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    scale = scale || 1;\n    ctx.drawImage(\n      sprite.image,\n      x * blockWidth + (blockWidth * (1 - scale) / 2),\n      y * blockHeight + (blockHeight * (1 - scale) / 2),\n      blockWidth * scale,\n      blockHeight * scale\n    );\n  }\n  drawSpriteWithOpacity(alpha: number, sprite: Sprite, x: number, y: number, scale?: number) {\n    const { ctx } = this;\n    const oldAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = alpha;\n    this.drawSprite(sprite, x, y, scale);\n    ctx.globalAlpha = oldAlpha;\n  }\n  async draw() {\n    const { canvasElm, ctx, currentLevel } = this;\n    if (!canvasElm || !ctx) {\n      return;\n    }\n    const { width, height } = canvasElm;\n\n    await Sprites.loaded;\n\n    if (!currentLevel) {\n      return;\n    }\n\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n\n    // background\n    ctx.fillStyle = Color.background;\n    ctx.fillRect(0, 0, width, height);\n    for (let y = 0; y < currentLevel.level.height; y++){\n      for (let x = 0; x < currentLevel.level.width; x++) {\n        this.drawSprite(Sprites.groundIce5, x, y);\n      }\n    }\n\n    // grid\n    if (this.shouldDrawGrid) {\n      ctx.strokeStyle = Color.grid;\n      for (let y = 1; y < currentLevel.level.height; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * blockHeight);\n        ctx.lineTo(width, y * blockHeight);\n        ctx.stroke();\n      }\n      for (let x = 1; x < currentLevel.level.width; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * blockWidth, 0);\n        ctx.lineTo(x * blockWidth, height);\n        ctx.stroke();\n      }\n    }\n\n    // ghosts\n    this.pendingAnimations = this.pendingAnimations.filter(a => a.stopwatch.getRemaining() > 0);\n    this.pendingAnimations.forEach(a => {\n      const { traveled, stopwatch } = a;\n      const opacity = stopwatch.getPercent();\n      this.drawSpriteWithOpacity(\n        opacity,\n        traveled.move === Move.Left ? Sprites.heroLeft : Sprites.heroRight, // todo this is buggy on up/dowh\n        traveled.point.x,\n        traveled.point.y,\n        1.2,\n      );\n    });\n\n    // start square\n    // ctx.fillStyle = 'grey';\n    // ctx.fillRect(currentLevel.level.start.x * blockWidth, currentLevel.level.start.y * blockHeight, blockWidth, blockHeight);\n\n    // goal square\n    this.drawSprite(Sprites.igloo, currentLevel.level.win.x, currentLevel.level.win.y);\n\n    // blocks\n    currentLevel.level.blocks.forEach(block => {\n      const sprite = (block.x + block.y) % 2 === 0 ? Sprites.treeLight : Sprites.treeHeavy;\n      this.drawSprite(sprite, block.x, block.y);\n    });\n\n    // hero\n    ctx.fillStyle = Color.glow;\n    // ctx.fillRect(currentLevel.hero.point.x * blockWidth, currentLevel.hero.point.y * blockHeight, blockWidth, blockHeight);\n    ctx.beginPath();\n    ctx.arc(\n      (currentLevel.hero.point.x + 0.5) * blockWidth,\n      (currentLevel.hero.point.y + 0.5) * blockHeight,\n      blockWidth / 2,\n      0, 2 * Math.PI\n     );\n    ctx.fill();\n    this.drawSprite(\n      this.spriteFacing === Move.Left ? Sprites.heroLeft : Sprites.heroRight,\n      currentLevel.hero.point.x, currentLevel.hero.point.y, 1.2);\n  }\n}\n","import React from 'react';\nimport { AudioPlayer } from './AudioPlayer';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { MenuView } from './MenuView';\nimport { ScoreView } from './ScoreView';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\n\nconst Container = styled.div`\n  max-width: 50vh;\n  margin: 0px auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  height: 80vh;\n`;\n\ninterface Props {\n  store: DataState;\n}\n\nclass _App extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  gm = new GameManager();\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.gm.setup(canvasElm);\n    }\n  }\n\n  render() {\n    const { gm } = this;\n    return (\n      <Container>\n        <AudioPlayer />\n        <GameView gm={gm}>\n          <Canvas ref={this.canvasRef} />\n        </GameView>\n        <MenuView gm={gm} />\n        <ScoreView gm={gm} />\n      </Container>\n    );\n  }\n}\n\nexport const App = connect(\n  (store: DataState) => ({ store })\n)(_App);\n","import { Generator, Level, Point } from '../utils';\n\nfunction testLevelGen() {\n  const l1 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(2, 4),\n    ]\n  );\n  console.log(l1.print())\n  console.log(l1.solve())\n\n  const l2 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(4, 0),\n    ]\n  );\n  console.log(l2.print())\n  console.log(l2.solve())\n\n  const gen = new Generator(5, 5, 0.1, 5);\n  const levels = gen.generateLevels(10, 1000);\n  levels.forEach(l => {\n    console.log(l.level.print())\n    console.log('Solution:', l.soln.printMoves())\n    console.log('\\n');\n  });\n};\n\nexport default {\n  testLevelGen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport { store } from './redux';\nimport scripts from './script';\n\n// debug scripts via the browser console\nwindow.scripts = scripts;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}