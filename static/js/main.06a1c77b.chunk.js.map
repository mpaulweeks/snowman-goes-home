{"version":3,"sources":["utils/moves.ts","fe/AudioPlayer.tsx","utils/level.ts","utils/point.ts","utils/gen.ts","utils/world.ts","utils/stopwatch.ts","redux/actionTypes/index.ts","redux/reducers/index.ts","redux/actions/index.ts","redux/index.ts","fe/common.ts","fe/GameView.tsx","fe/sprite.ts","fe/MenuView.tsx","fe/ScoreView.tsx","fe/manager.ts","fe/App.tsx","script/index.ts","index.js"],"names":["Move","_AudioPlayer","elm","fixedVolume","prevProps","this","volume","props","audio","playing","play","pause","currentTime","_this2","_this$props$audio","url","react_default","a","createElement","loop","src","ref","React","Component","AudioPlayer","connect","store","Block","Moves","Object","keys","filter","k","isNaN","Number","map","PointHistory","point","points","moves","classCallCheck","createClass","key","value","newPoint","move","push","_this","m","history","clone","toConsumableArray","join","Level","width","height","start","win","blocks","blocksByKey","reduce","lookup","b","toString","loc","equals","x","y","current","traveled","next","Left","Right","Up","Down","Error","concat","isIllegalPoint","isWinningPoint","visited","queue","length","shift","getNextMoves","forEach","applyMove","addMove","grid","_loop","row","_loop2","char","SolvableLevel","level","soln","PlayableLevel","solved","hero","moveInfo","Point","other","str","parts","split","parseFloat","range","n","arr","i","randomInRange","min","max","Math","random","Difficulty","BlockAllocator","spaces","index","floor","splice","Generator","settings","numBlocks","_this$settings","minMovesOptions","allocator","pop","_","solution","solve","includes","tries","_this$settings2","blockPercentMin","blockPercentMax","levels","attempts","triesPerMutation","tryGenerateLevel","Stopwatch","milliseconds","arguments","undefined","started","Date","getTime","getElapsed","getRemaining","time","SongsByDifficulty","_SongsByDifficulty","defineProperty","Easy","Medium","Hard","Infinite","ProgressionByDifficulty","_ProgressionByDifficu","gridSize","minMoves","levelsPerTier","totalLevels","secondsPerLevel","BasicWorld","dimensions","difficulty","progression","loaded","onLoad","registerLoaded","Promise","resolve","reject","startTime","isInfinite","FiniteWorld","possibleConstructorReturn","getPrototypeOf","call","levelsByMoves","obj","num","sort","remainingMinMoves","getLevelKeys","scaledDimensions","generateLevels","l","tier","apply","_this3","InfiniteWorld","_this4","lastIndex","_this$levels","gen","console","log","WorldLoader","loaders","d","w","toLoad","SET_GAME_OVER","SET_LEVEL","SET_TIMER","SET_WORLD","TOGGLE_MUSIC","initialState","secondsRemaining","secondsElapsed","world","isGameOver","reducer","state","action","type","objectSpread","payload","stopwatch","formatElapsed","formatRemaining","setTimer","setWorld","createStore","rootReducer","AbsoluteContainer","styled","div","_templateObject","Row","_templateObject2","Column","_templateObject3","LoadingButton","_templateObject4","ReadyButton","_templateObject5","KeyButton","_templateObject6","Container","GameView_templateObject","SubContainer","GameView_templateObject2","Header","GameView_templateObject3","Footer","GameView_templateObject4","CanvasContainer","GameView_templateObject5","CanvasOverlay","GameView_templateObject6","_GameView","_this$props","gm","toggleMusic","_this$props$store","onClick","mouseMove","children","clickReset","isMobile","clickToggleGrid","GameView","loadImage","img","Image","image","onload","spriteImages","heroLeft","heroRight","groundIce1","groundIce2","groundIce3","groundIce4","groundIce5","groundIce6","groundIce7","groundIce8","groundIce9","treeLight","treeHeavy","igloo","Sprites","all","values","s","then","window","WorldOptionContainer","MenuView_templateObject","WorldOption","MenuView_templateObject2","WorldTitle","h2","MenuView_templateObject3","defaultState","_defaultState","spritesLoaded","_MenuView","reset","setState","worldLoader","displayOrder","getLoaderByDifficulty","displayName","loadWorld","href","MenuView","_ScoreView","onReset","unsetWorld","currentLevelIndex","ScoreView","Color","moveMap","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","GameManager","dispatch","worldDimensions","canvasDimensions","canvasElm","ctx","currentLevel","spriteFacing","loadedAssets","pendingAnimations","shouldDrawGrid","evt","rect","target","getBoundingClientRect","clientX","left","clientY","top","px","py","isTopRight","isTopLeft","handleMove","clickUp","clickDown","clickLeft","clickRight","screenHeight","document","body","clientHeight","screenWidth","clientWidth","addEventListener","e","code","nextLevel","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","draw","getState","triggerGameOver","loadInBackground","requestAnimationFrame","stop","getContext","createStopwatch","moveHero","animateMove","_nextLevel","_callee2","_context2","loadLevel","sent","printMoves","addTime","_this$pendingAnimatio","animations","slice","t","sprite","scale","blockWidth","blockHeight","drawImage","alpha","oldAlpha","globalAlpha","drawSprite","_draw","_callee3","_y","_x","_context3","abrupt","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","opacity","getPercent","drawSpriteWithOpacity","block","App_templateObject","Canvas","canvas","App_templateObject2","_App","canvasRef","createRef","setup","App_Container","App","script","testLevelGen","l1","print","l2","scripts","ReactDOM","render","es","getElementById"],"mappings":"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","file":"static/js/main.06a1c77b.chunk.js","sourcesContent":["import { Point } from \"./point\";\n\nexport enum Move {\n  Up = 1,\n  Down,\n  Left,\n  Right,\n};\nexport const Moves = Object\n  .keys(Move)\n  .filter(k => isNaN(Number(k)))\n  .map(k => Move[k]);\n\nexport interface PotentialMove {\n  move: Move,\n  history: PointHistory,\n};\n\nexport class PointHistory {\n  point: Point;\n  points: Array<Point>;\n  moves: Array<Move>;\n\n  constructor(point: Point, points: Array<Point>, moves: Array<Move>) {\n    this.point = point;\n    this.points = points;\n    this.moves = moves;\n  }\n\n  addMove(newPoint: Point, move: Move) {\n    this.points.push(this.point);\n    this.moves.push(move);\n    this.point = newPoint;\n  }\n\n  getNextMoves(): Array<PotentialMove> {\n    return Moves\n      .map(m => ({\n        move: m,\n        history: this.clone(),\n      }));\n  }\n\n  clone() {\n    return new PointHistory(\n      this.point,\n      [...this.points],\n      [...this.moves]\n    );\n  }\n\n  printMoves() {\n    return this.moves.map(k => Move[k]).join(', ');\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AudioState } from '../redux/reducers';\n\ninterface Props {\n  audio: AudioState;\n};\ninterface State {};\n\nclass _AudioPlayer extends React.Component<Props, State> {\n  elm?: HTMLAudioElement;\n  fixedVolume = false;\n\n  componentDidUpdate(prevProps) {\n    if (this.elm) {\n      if (!this.fixedVolume) {\n        this.elm.volume = 0.5;\n        this.fixedVolume = true;\n      }\n      if (this.props.audio.playing) {\n        this.elm.play();\n      } else {\n        this.elm.pause();\n        this.elm.currentTime = 0;\n      }\n    }\n  }\n  render() {\n    const { playing, url } = this.props.audio;\n    return (\n      <audio\n        loop\n        src={url}\n        ref={elm => this.elm = elm}\n      ></audio>\n    );\n  }\n}\n\nexport const AudioPlayer = connect(\n  (store: DataState) => ({\n    audio: store.audio,\n  })\n)(_AudioPlayer);\n","// https://repl.it/@mpaulweeks/ice\n\nimport { Move, PointHistory } from './moves';\nimport { Point } from './point';\n\nexport interface Traveled {\n  move: Move,\n  point: Point,\n}\n\nexport interface MoveInformation {\n  point: Point,\n  traveled: Array<Traveled>,\n}\n\nexport enum Block {\n  Start = 1,\n  Win,\n  Block,\n}\n\ninterface BlockLookup {\n  [key: string]: Block;\n};\n\nexport class Level {\n  width: number;\n  height: number;\n  start: Point;\n  win: Point;\n  blocks: Array<Point>;\n  blocksByKey: BlockLookup = {};\n\n\n  constructor(width: number, height: number, start: Point, win: Point, blocks: Array<Point>) {\n    this.width = width;\n    this.height = height;\n    this.start = start;\n    this.win = win;\n    this.blocks = blocks;\n\n    this.blocksByKey = this.blocks.reduce(\n      (lookup: BlockLookup, b) => {\n        lookup[b.toString()] = Block.Block;\n        return lookup;\n      },\n      {}\n    );\n  }\n\n  isWinningPoint(loc: Point): boolean {\n    return this.win.equals(loc);\n  }\n  isIllegalPoint(loc: Point): boolean {\n    const { blocksByKey, width, height } = this;\n    const hitBlock = !!blocksByKey[loc.toString()];\n    return hitBlock || (\n      (loc.x < 0) ||\n      (loc.x >= width) ||\n      (loc.y < 0) ||\n      (loc.y >= height)\n    );\n  }\n  applyMove(point: Point, move: Move): MoveInformation {\n    let current = point;\n    const traveled = [{\n      move: move,\n      point: current,\n    }];\n    while (true) {\n      const next = current.clone();\n\n      if (move === Move.Left) next.x--;\n      else if (move === Move.Right) next.x++;\n      else if (move === Move.Up) next.y--;\n      else if (move === Move.Down) next.y++;\n      else throw new Error(`unexpected move: ${move}`);\n\n      if (this.isIllegalPoint(next)) {\n        break;\n      }\n      traveled.push({move: move, point: next});\n      current = next;\n      if (this.isWinningPoint(current)) {\n        break;\n      }\n    }\n    return {\n      point: current,\n      traveled: traveled,\n    };\n  }\n  solve(): PointHistory | null {\n    const spawn = new PointHistory(this.start, [], []);\n    const visited: { [key: string]: boolean } = {};\n    const queue = [spawn];\n    while (queue.length) {\n      const next = queue.shift() as PointHistory;\n      const key = next.point.toString();\n      if (!visited[key]) {\n        visited[key] = true;\n        if (this.isWinningPoint(next.point)) {\n          return next;\n        }\n        let nextMoves = next.getNextMoves();\n        nextMoves.forEach(m => {\n          const { move, history } = m;\n          const newPoint = this.applyMove(history.point, move).point;\n          history.addMove(newPoint, move);\n          queue.push(history);\n        });\n      }\n    }\n    return null;\n  }\n\n  print(): string {\n    const { width, height, start, win, blocks } = this;\n    const grid: Array<Array<string>> = [];\n    for (let y = 0; y < height; y++) {\n      const row: Array<string> = [];\n      for (let x = 0; x < width; x++) {\n        let char = '_';\n        if (win.x === x && win.y === y) {\n          char = 'W';\n        }\n        if (start.x === x && start.y === y) {\n          char = 'S';\n        }\n        blocks.forEach(b => {\n          if (b.x === x && b.y === y) {\n            char = '0';\n          }\n        });\n        row.push(char);\n      }\n      grid.push(row);\n    }\n    return grid.map(row => row.join('')).join('\\n');\n  }\n}\n\nexport class SolvableLevel {\n  level: Level;\n  soln: PointHistory;\n  constructor(level: Level, soln: PointHistory) {\n    this.level = level;\n    this.soln = soln;\n  }\n}\n\nexport class PlayableLevel {\n  level: Level;\n  soln: PointHistory;\n  hero: PointHistory;\n\n  constructor(solved: SolvableLevel) {\n    this.level = solved.level;\n    this.soln = solved.soln;\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  reset(): void {\n    this.hero = new PointHistory(this.level.start, [], []);\n  }\n\n  moveHero(move: Move): MoveInformation {\n    const { level, hero } = this;\n    const moveInfo = level.applyMove(hero.point, move);\n    hero.addMove(moveInfo.point, move);\n    return moveInfo;\n  }\n}\n","\nexport class Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  toString() {\n    return `${this.x},${this.y}`;\n  }\n  equals(other: Point) {\n    return this.toString() === other.toString();\n  }\n\n  static fromString(str: string) {\n    const parts = str.split(',');\n    return new Point(parseFloat(parts[0]), parseFloat(parts[1]));\n  }\n};\n","import { Level, SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\n\nexport function range(n: number): Array<number> {\n  let arr: Array<number> = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function rangeFrom(start: number, length: number): Array<number> {\n  return range(length).map(i => i + start);\n}\n\nfunction randomInRange(min: number, max: number) {\n  return min + (Math.random() * (max - min));\n}\n\nexport class BlockAllocator {\n  spaces: Array<Point> = [];\n\n  constructor(width: number, height: number) {\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        this.spaces.push(new Point(x, y));\n      }\n    }\n  }\n\n  pop(): Point {\n    const index = Math.floor(Math.random() * this.spaces.length);\n    return this.spaces.splice(index, 1)[0];\n  }\n}\n\nexport interface GeneratorSettings {\n  width: number;\n  height: number;\n  blockPercentMin: number;\n  blockPercentMax: number;\n  minMovesOptions: Array<number>;\n}\n\nexport class Generator {\n  settings: GeneratorSettings;\n\n  constructor(settings: GeneratorSettings) {\n    this.settings = settings;\n  }\n\n  tryGenerateLevel(numBlocks: number): (SolvableLevel | null) {\n    const { width, height, minMovesOptions } = this.settings;\n    const allocator = new BlockAllocator(width, height);\n    const win = allocator.pop();\n    const start = allocator.pop();\n    const blocks = range(numBlocks).map(_ => allocator.pop());\n    const level = new Level(width, height, start, win, blocks);\n    const solution = level.solve();\n    return solution && minMovesOptions.includes(solution.moves.length) ? new SolvableLevel(level, solution) : null;\n  }\n\n  generateLevels(max: number, tries: number): Array<SolvableLevel> {\n    const {\n      width,\n      height,\n      blockPercentMin,\n      blockPercentMax,\n    } = this.settings;\n    const levels: Array<SolvableLevel> = [];\n    let attempts = 0;\n    const triesPerMutation = Math.min(tries / 10, 100);\n    while (levels.length < max && attempts < tries) {\n      const numBlocks = width * height * randomInRange(blockPercentMin, blockPercentMax);\n      for (let i = 0; levels.length < max && i < triesPerMutation; i++) {\n        attempts += 1;\n        const level = this.tryGenerateLevel(numBlocks);\n        if (level) {\n          levels.push(level);\n        }\n      }\n    }\n    // console.log(attempts);\n    return levels;\n  }\n}\n","import { Generator, range, rangeFrom } from \"./gen\";\nimport { SolvableLevel } from \"./level\";\nimport { Point } from \"./point\";\nimport { Stopwatch } from \"./stopwatch\";\n\nexport enum Difficulty {\n  Easy = 1,\n  Medium,\n  Hard,\n  Infinite,\n  // Test,\n};\n\nexport const SongsByDifficulty = {\n  [Difficulty.Easy]: 'music/visager_village_dreaming.mp3',\n  [Difficulty.Medium]: 'music/visager_the_final_road.mp3',\n  [Difficulty.Hard]: 'music/visager_the_great_forest.mp3',\n  [Difficulty.Infinite]: 'music/visager_dark_sanctum.mp3',\n};\n\n// race against time to get far, then get score based on how quick\nexport interface Progression {\n  gridSize: (number),\n  minMoves: number;\n  levelsPerTier: number;\n  totalLevels: number;\n  secondsPerLevel?: number;\n}\n\nconst ProgressionByDifficulty = {\n  [Difficulty.Easy]: {\n    gridSize: 1,\n    minMoves: 7,\n    levelsPerTier: 1,\n    totalLevels: 5,\n  },\n  [Difficulty.Medium]: {\n    gridSize: 1.5,\n    minMoves: 12,\n    levelsPerTier: 1,\n    totalLevels: 10,\n  },\n  [Difficulty.Hard]: {\n    gridSize: 2,\n    minMoves: 12,\n    levelsPerTier: 2,\n    totalLevels: 15,\n  },\n  [Difficulty.Infinite]: {\n    gridSize: 1.5,\n    minMoves: 7,\n    levelsPerTier: 3,\n    totalLevels: 20,\n    secondsPerLevel: 5,\n  },\n}\n\nexport interface LevelsByMoves {\n  [minMoves: number]: Array<SolvableLevel>;\n}\n\nexport interface World {\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded: boolean;\n  onLoad: Promise<World>;\n  displayName: () => string;\n  isInfinite: () => boolean;\n  createStopwatch: () => Stopwatch;\n  generateLevels: () => void;\n  loadLevel: (i: number) => Promise<SolvableLevel | undefined>;\n}\n\nclass BasicWorld implements World {\n  dimensions: Point;\n  difficulty: Difficulty;\n  totalLevels: number;\n  progression: Progression;\n  loaded = false;\n  onLoad: Promise<World>;\n  registerLoaded = () => { };\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    this.dimensions = dimensions;\n    this.difficulty = difficulty;\n    this.progression = ProgressionByDifficulty[difficulty];\n    this.onLoad = new Promise((resolve, reject) => {\n      this.registerLoaded = () => resolve(this);\n    });\n    this.totalLevels = this.progression.totalLevels;\n  }\n  displayName() {\n    return Difficulty[this.difficulty];\n  }\n  isInfinite() {\n    return this.difficulty === Difficulty.Infinite;\n  }\n  createStopwatch() {\n    const secondsPerLevel = this.progression.secondsPerLevel || 0;\n    const startTime = 1000 * (60 - secondsPerLevel);\n    // const startTime = 5; // for testing infinite mode\n    return new Stopwatch(this.isInfinite() ? startTime : undefined);\n  }\n\n  generateLevels() {\n    throw new Error('base class');\n  }\n  loadLevel(index: number): Promise<SolvableLevel | undefined> {\n    throw new Error('base class');\n  }\n}\n\nclass FiniteWorld extends BasicWorld {\n  levelsByMoves: LevelsByMoves;\n\n  constructor(dimensions: Point, difficulty: Difficulty) {\n    super(dimensions, difficulty);\n    this.levelsByMoves = range(this.progression.totalLevels / this.progression.levelsPerTier)\n      .reduce((obj: LevelsByMoves, num) => {\n        obj[num + this.progression.minMoves] = [];\n        return obj;\n      }, {});\n  }\n\n  getLevelKeys() {\n    // for some reason, array.sort() on numbers will sort like strings\n    function compareNums(a: number, b: number) {\n      if (a < b) return -1;\n      if (a > b) return 1;\n      return 0;\n    }\n    return Object.keys(this.levelsByMoves).map(parseFloat).sort(compareNums);\n  }\n\n  generateLevels() {\n    const { dimensions, levelsByMoves, progression } = this;\n    const { gridSize, levelsPerTier } = progression;\n    const remainingMinMoves = this.getLevelKeys().filter(k => levelsByMoves[k].length < levelsPerTier);\n    if (remainingMinMoves.length === 0) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: remainingMinMoves,\n    })\n    const levels = gen.generateLevels(500, 500);\n    levels.forEach(l => {\n      const tier = levelsByMoves[l.soln.moves.length];\n      if (tier && tier.length < levelsPerTier) {\n        tier.push(l);\n      }\n    });\n  }\n\n  async loadLevel(index: number) {\n    while (!this.loaded) {\n      this.generateLevels();\n    }\n    const levels = this.getLevelKeys().reduce((arr: Array<SolvableLevel>, key) => {\n      arr.push(...this.levelsByMoves[key]);\n      return arr;\n    }, []);\n    return levels[index];\n  }\n}\n\nclass InfiniteWorld extends BasicWorld {\n  levels: Array<SolvableLevel> = [];\n  lastIndex = 0;\n\n  constructor(dimensions: Point) {\n    super(dimensions, Difficulty.Infinite);\n  }\n\n  generateLevels() {\n    const { dimensions, levels, progression, lastIndex } = this;\n    const { gridSize } = progression;\n    if (levels.length > lastIndex + 10) {\n      this.loaded = true;\n      this.registerLoaded();\n      return;\n    }\n    // todo randomize gridSize, minMoves\n    const scaledDimensions = new Point(dimensions.x * gridSize, dimensions.y * gridSize);\n    const gen = new Generator({\n      width: scaledDimensions.x,\n      height: scaledDimensions.y,\n      blockPercentMin: 0.05,\n      blockPercentMax: 0.3,\n      minMovesOptions: rangeFrom(progression.minMoves, 10),\n    })\n    this.levels.push(...gen.generateLevels(10, 10));\n    if (levels.length > lastIndex + 10) {\n      console.log('infinite loaded!');\n    }\n  }\n\n  async loadLevel(index: number) {\n    while (index > this.levels.length) {\n      this.generateLevels();\n    }\n    this.lastIndex = index;\n    return this.levels[index];\n  }\n}\n\nexport class WorldLoader {\n  loaders: Array<World>;\n\n  constructor(dimensions: Point) {\n    this.loaders = [\n      new InfiniteWorld(dimensions),\n      ...[\n        Difficulty.Easy,\n        Difficulty.Medium,\n        Difficulty.Hard,\n      ].map(d => new FiniteWorld(dimensions, d)),\n    ];\n  }\n\n  getLoaderByDifficulty(difficulty: Difficulty) {\n    return this.loaders.filter(w => w.difficulty === difficulty)[0];\n  }\n\n  loadInBackground() {\n    const toLoad = this.loaders.filter(w => !w.loaded)[0];\n    if (toLoad) {\n      toLoad.generateLevels();\n      if (toLoad.loaded) {\n        console.log('loaded:', Difficulty[toLoad.difficulty]);\n      }\n    }\n  }\n}\n","export class Stopwatch {\n  started: Date;\n  milliseconds: number;\n\n  constructor(milliseconds = 0) {\n    this.started = new Date();\n    this.milliseconds = milliseconds;\n  }\n\n  getElapsed(): number {\n    return new Date().getTime() - this.started.getTime();\n  }\n  getRemaining(): number {\n    return this.milliseconds - this.getElapsed();\n  }\n  getPercent(): number {\n    return this.getRemaining() / this.milliseconds;\n  }\n  addTime(time: number) {\n    this.milliseconds += time;\n  }\n  formatElapsed(): string {\n    return Math.floor(this.getElapsed() / 1000).toString(10);\n  }\n  formatRemaining(): string {\n    return Math.floor(this.getRemaining() / 1000).toString(10);\n  }\n}\n","export const SET_GAME_OVER = 'SET_GAME_OVER';\nexport const SET_LEVEL = 'SET_LEVEL';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SET_WORLD = 'SET_WORLD';\nexport const TOGGLE_MUSIC = 'TOGGLE_MUSIC';\n","import { Stopwatch, SongsByDifficulty, World } from \"../../utils\";\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC } from \"../actionTypes\";\n\n\nexport interface AudioState {\n  playing: boolean;\n  url: string;\n}\nexport interface DataState {\n  audio: AudioState,\n  world?: World;\n  secondsElapsed: number;\n  secondsRemaining: number;\n  level: number;\n  isGameOver: boolean;\n}\n\ninterface DataAction {\n  type: string;\n  payload: {\n    stopwatch?: Stopwatch;\n    level?: number;\n    world?: World;\n  };\n}\n\nconst initialState: DataState = {\n  audio: {\n    playing: true,\n    url: '',\n  },\n  secondsRemaining: 0,\n  secondsElapsed: 0,\n  level: 0,\n  world: undefined,\n  isGameOver: false,\n};\n\nfunction reducer(state = initialState, action: DataAction) {\n  switch (action.type) {\n    case SET_GAME_OVER: {\n      return {\n        ...state,\n        isGameOver: true,\n      };\n    }\n    case SET_LEVEL: {\n      const { level } = action.payload;\n      return {\n        ...state,\n        level,\n      };\n    }\n    case SET_TIMER: {\n      const { stopwatch } = action.payload;\n      return {\n        ...state,\n        secondsElapsed: stopwatch && stopwatch.formatElapsed(),\n        secondsRemaining: stopwatch && stopwatch.formatRemaining(),\n      };\n    }\n    case SET_WORLD: {\n      const { world } = action.payload;\n      return {\n        ...state,\n        isGameOver: false,\n        world,\n        audio: {\n          ...state.audio,\n          url: world ? SongsByDifficulty[world.difficulty] : state.audio.url,\n        },\n      };\n    }\n    case TOGGLE_MUSIC: {\n      return {\n        ...state,\n        audio: {\n          ...state.audio,\n          playing: !state.audio.playing,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport default reducer;\n","import { Stopwatch, World } from '../../utils';\nimport { SET_GAME_OVER, SET_LEVEL, SET_TIMER, SET_WORLD, TOGGLE_MUSIC } from '../actionTypes';\n\nexport const setGameOver = () => ({\n  type: SET_GAME_OVER,\n  payload: {},\n});\nexport const setLevel = (level: number) => ({\n  type: SET_LEVEL,\n  payload: {\n    level,\n  },\n});\n\nexport const setTimer = (stopwatch: Stopwatch) => ({\n  type: SET_TIMER,\n  payload: {\n    stopwatch,\n  },\n});\n\nexport const setWorld = (world?: World) => ({\n  type: SET_WORLD,\n  payload: {\n    world,\n  },\n});\n\nexport const toggleMusic = () => ({\n  type: TOGGLE_MUSIC,\n  payload: {},\n});\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport const store = createStore(rootReducer);\nexport * from './actions';\nexport * from './reducers';\n","import styled from 'styled-components';\n\nexport const AbsoluteContainer = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  z-index: 1;\n  width: 100%;\n  height: 100vh;\n\n  background-color: var(--background);\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  align-items: stretch;\n  flex-wrap: nowrap;\n`;\nexport const Column = styled(Row)`\n  flex-direction: column;\n`;\n\nexport const LoadingButton = styled.div`\n  width: 4em;\n  padding: 0.5em;\n  border-radius: 1em;\n\n  border: 2px solid grey;\n  font-style: italic;\n  color: grey;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n\n`;\nexport const ReadyButton = styled(LoadingButton)`\n  cursor: pointer;\n\n  border-color: var(--foreground);\n  font-style: normal;\n  color: var(--foreground);\n\n  &:hover {\n    color: var(--background);\n    background-color: var(--foreground);\n  }\n`;\n\nexport const KeyButton = styled(ReadyButton)`\n  height: 4vh;\n  width: auto;\n  min-width: 2em;\n  padding: 0 0.75em;\n  margin: 0 0.3em;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { DataState, toggleMusic } from '../redux';\nimport { connect } from 'react-redux';\nimport { GameManager } from './manager';\nimport { Row, Column, KeyButton } from './common';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst SubContainer = styled(Row)`\n  width: 100%;\n  margin: 0px;\n`;\nconst Header = styled(SubContainer)`\n  height: 10vh;\n  font-family: monospace;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\nconst Footer = styled(SubContainer)`\n  height: 10vh;\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n`;\n\nconst CanvasOverlay = styled.div`\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: url('img/snow_loose.gif');\n  background-size: contain;\n  background-repeat: none;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n  toggleMusic: () => void;\n};\n\nclass _GameView extends React.Component<Props> {\n  render() {\n    const { gm, toggleMusic } = this.props;\n    const { world, level, secondsRemaining, secondsElapsed } = this.props.store;\n    return (\n      <Container>\n        <Header>\n          <Column>\n            <div>Level {level + 1}</div>\n          </Column>\n          <Column>\n            <div>{world && world.isInfinite() ? secondsRemaining : secondsElapsed}s</div>\n          </Column>\n        </Header>\n        <CanvasContainer onClick={gm.mouseMove}>\n          {this.props.children}\n          <CanvasOverlay />\n        </CanvasContainer>\n        <Footer>\n          <Column>\n            <KeyButton onClick={gm.clickReset}>reset level</KeyButton>\n          </Column>\n          <Column>\n            {!gm.isMobile() && (\n              <KeyButton onClick={toggleMusic}>toggle music</KeyButton>\n            )}\n          </Column>\n          <Column>\n            <KeyButton onClick={gm.clickToggleGrid}>toggle grid</KeyButton>\n          </Column>\n        </Footer>\n      </Container>\n    );\n  }\n}\n\n\nexport const GameView = connect(\n  (store: DataState) => ({\n    store,\n  }),\n  {\n    toggleMusic,\n  }\n)(_GameView);\n","\n\nexport interface Sprite {\n  image: HTMLImageElement;\n  loaded: Promise<boolean>;\n}\n\nexport interface SpriteManager {\n  loaded: Promise<boolean>,\n  hero: Sprite;\n  groundIce1: Sprite,\n  groundIce2: Sprite,\n  groundIce3: Sprite,\n  groundIce4: Sprite,\n  groundIce5: Sprite,\n  groundIce6: Sprite,\n  groundIce7: Sprite,\n  groundIce8: Sprite,\n  groundIce9: Sprite,\n  treeLight: Sprite,\n  treeHeavy: Sprite,\n  igloo: Sprite,\n};\n\nfunction loadImage(url: string) {\n  const img = new Image();\n  const state: Sprite = {\n    image: img,\n    loaded: new Promise((resolve, reject) => {\n      img.onload = () => resolve(true);\n    }),\n  };\n  img.src = url;\n  return state;\n}\n\n// load sprites\nconst spriteImages = {\n  heroLeft: loadImage('sprite/snowman_left.png'),\n  heroRight: loadImage('sprite/snowman_right.png'),\n  groundIce1: loadImage('sprite/ground_ice_1.png'),\n  groundIce2: loadImage('sprite/ground_ice_2.png'),\n  groundIce3: loadImage('sprite/ground_ice_3.png'),\n  groundIce4: loadImage('sprite/ground_ice_4.png'),\n  groundIce5: loadImage('sprite/ground_ice_5.png'),\n  groundIce6: loadImage('sprite/ground_ice_6.png'),\n  groundIce7: loadImage('sprite/ground_ice_7.png'),\n  groundIce8: loadImage('sprite/ground_ice_8.png'),\n  groundIce9: loadImage('sprite/ground_ice_9.png'),\n  treeLight: loadImage('sprite/tree_light.png'),\n  treeHeavy: loadImage('sprite/tree_heavy.png'),\n  igloo: loadImage('sprite/igloo.png'),\n};\nexport const Sprites: SpriteManager = {\n  ...spriteImages,\n  loaded: Promise.all(Object.values(spriteImages).map(s => s.loaded)).then(() => true),\n};\nwindow.Sprites = Sprites;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { World, Difficulty } from '../utils';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\nimport { Sprites } from './sprite';\nimport { AbsoluteContainer, LoadingButton, ReadyButton } from './common';\n\nconst WorldOptionContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst WorldOption = styled.div`\n  margin: 1em;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\nconst WorldTitle = styled.h2`\n  margin-bottom: 0.5rem;\n`;\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\n\ninterface State {\n  spritesLoaded: boolean,\n  [Difficulty.Easy]: boolean,\n  [Difficulty.Medium]: boolean,\n  [Difficulty.Hard]: boolean,\n  [Difficulty.Infinite]: boolean,\n};\n\nconst defaultState = {\n  spritesLoaded: false,\n  [Difficulty.Easy]: false,\n  [Difficulty.Medium]: false,\n  [Difficulty.Hard]: false,\n  [Difficulty.Infinite]: false,\n};\n\nclass _MenuView extends React.Component<Props, State> {\n  state = { ...defaultState };\n\n  componentDidMount() {\n    this.reset();\n    Sprites.loaded.then(() => {\n      this.setState({spritesLoaded: true});\n      console.log('sprites loaded');\n    });\n  }\n  reset() {\n    this.setState({\n      ...defaultState,\n    }, () => {\n      this.props.gm.worldLoader.loaders.forEach(world => {\n        world.onLoad.then(() => {\n          this.setState({\n            [world.difficulty]: true,\n          });\n        });\n      });\n    });\n  }\n  loadWorld(world: World) {\n    if (world.loaded) {\n      this.props.gm.setWorld(world);\n      this.reset();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { state } = this;\n    const { worldLoader } = this.props.gm;\n    if (store.world) {\n      return '';\n    }\n    const displayOrder = [\n      Difficulty.Easy,\n      Difficulty.Medium,\n      Difficulty.Hard,\n      Difficulty.Infinite,\n    ];\n    return (\n      <AbsoluteContainer>\n        <h1>\n          ice slide puzzle game\n        </h1>\n        <p>\n          select your difficulty level\n        </p>\n        <WorldOptionContainer>\n          {displayOrder.map(d => worldLoader.getLoaderByDifficulty(d)).map(world => (\n            <WorldOption key={world.difficulty}>\n              <WorldTitle>\n                {world.displayName()}\n              </WorldTitle>\n              <div>\n                {world.isInfinite() ? '∞' : world.totalLevels} levels\n              </div>\n              <h3>\n                {state[world.difficulty] ? (\n                  <ReadyButton onClick={() => this.loadWorld(world)}>\n                    PLAY\n                </ReadyButton>\n                ) : (\n                    <LoadingButton>\n                      loading\n                </LoadingButton>\n                  )}\n              </h3>\n            </WorldOption>\n          ))}\n        </WorldOptionContainer>\n        <p>\n          made by <a href=\"https://twitter.com/mpaulweeks\">@mpaulweeks</a>\n        </p>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const MenuView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_MenuView);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\nimport { AbsoluteContainer, Row, ReadyButton } from './common';\n\ninterface Props {\n  gm: GameManager;\n  store: DataState;\n};\ninterface State {};\n\nclass _ScoreView extends React.Component<Props, State> {\n  onReset = () => {\n    this.props.gm.unsetWorld();\n  }\n  render() {\n    const { gm, store } = this.props;\n    const { world, isGameOver } = store;\n    if (!(world && isGameOver)) {\n      return '';\n    }\n    return (\n      <AbsoluteContainer>\n        <Row>\n          <h1>\n            {world.isInfinite() ? `\n              game over! you managed to complete ${gm.currentLevelIndex - 1} levels\n            ` : `\n              you win! your score is ${store.secondsElapsed}. try to get it lower!\n            `}\n          </h1>\n        </Row>\n        <Row>\n          <ReadyButton onClick={this.onReset}>RESET</ReadyButton>\n        </Row>\n      </AbsoluteContainer>\n    );\n  }\n}\n\nexport const ScoreView = connect(\n  (store: DataState) => ({\n    store,\n  })\n)(_ScoreView);\n","import { store } from \"../redux\";\nimport { setGameOver, setLevel, setTimer, setWorld } from \"../redux\";\nimport { Move, MoveInformation, Traveled, PlayableLevel, Point, Stopwatch, World, WorldLoader } from \"../utils\";\nimport { Sprite, Sprites } from './sprite';\n\nconst Color = {\n  background: 'white', // matching css\n  grid: 'black',\n  glow: 'rgba(150, 150, 255, 1)',\n};\n\nconst moveMap: { [code: string]: Move } = {\n  'ArrowLeft': Move.Left,\n  'ArrowRight': Move.Right,\n  'ArrowUp': Move.Up,\n  'ArrowDown': Move.Down,\n};\n\nexport interface Animation {\n  traveled: Traveled,\n  stopwatch: Stopwatch,\n}\n\nexport class GameManager {\n  dispatch = store.dispatch;\n  worldLoader: WorldLoader;\n  worldDimensions: Point;\n  canvasDimensions: Point;\n  canvasElm?: HTMLCanvasElement;\n  ctx?: CanvasRenderingContext2D;\n  world?: World;\n  stopwatch = new Stopwatch();\n  currentLevel: (PlayableLevel | undefined);\n  currentLevelIndex = 0;\n  spriteFacing: Move.Right;\n  loadedAssets: Promise<boolean>;\n  pendingAnimations: Array<Animation> = [];\n  shouldDrawGrid = false;\n\n  constructor() {\n    // determine canvas size\n    const screenHeight = document.body.clientHeight;\n    const screenWidth = document.body.clientWidth;\n    const isMobile = screenHeight > screenWidth;\n    const dimensions = isMobile ? new Point(8, 10) : new Point(10, 8);\n    const height = document.body.clientHeight * 0.8; // matching css of 80vh\n    let width = height * dimensions.x / dimensions.y;\n    while (width > screenWidth) {\n      dimensions.x -= 1;\n      width = height * dimensions.x / dimensions.y;\n    }\n    this.worldDimensions = dimensions;\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.canvasDimensions = new Point(width, height);\n\n    // setup key listeners\n    window.addEventListener('keydown', e => {\n      // console.log(e);\n      const move = moveMap[e.code] || undefined;\n      if (move) {\n        this.handleMove(move);\n      }\n      if (e.code === 'KeyR') {\n        this.clickReset();\n      }\n      if (e.code === 'KeyN') {\n        this.nextLevel();\n      }\n    });\n\n    // setup passive draw/load loop\n    this.loop();\n  }\n  private async loop() {\n    const { world, stopwatch } = this;\n    if (world) {\n      await this.draw();\n      if (world.isInfinite()) {\n        world.generateLevels();\n        if (stopwatch.getRemaining() !== store.getState().secondsRemaining) {\n          this.dispatch(setTimer(stopwatch));\n        }\n        if (stopwatch.getRemaining() < 0) {\n          this.triggerGameOver();\n        }\n      } else {\n        if (stopwatch.getElapsed() !== store.getState().secondsElapsed) {\n          this.dispatch(setTimer(stopwatch));\n        }\n      }\n    } else if (!store.getState().isGameOver) {\n      this.worldLoader.loadInBackground();\n    }\n    window.requestAnimationFrame(() => this.loop());\n  }\n\n  clickReset = () => {\n    this.currentLevel && this.currentLevel.reset();\n  }\n  clickToggleGrid = () => {\n    this.shouldDrawGrid = !this.shouldDrawGrid;\n  }\n  mouseMove = evt => {\n    const rect = evt.target.getBoundingClientRect();\n    const x = evt.clientX - rect.left;\n    const y = evt.clientY - rect.top;\n    const px = x / rect.width;\n    const py = y / rect.height;\n    const isTopRight = px > py;\n    const isTopLeft = px + py < 1;\n    const move = (\n      (isTopLeft && isTopRight && Move.Up) ||\n      (!isTopLeft && isTopRight && Move.Right) ||\n      (!isTopLeft && !isTopRight && Move.Down) ||\n      (isTopLeft && !isTopRight && Move.Left)\n    );\n    if (move) {\n      this.handleMove(move);\n    }\n  }\n  clickUp = () => {\n    this.handleMove(Move.Up);\n  }\n  clickDown = () => {\n    this.handleMove(Move.Down);\n  }\n  clickLeft = () => {\n    this.handleMove(Move.Left);\n  }\n  clickRight = () => {\n    this.handleMove(Move.Right);\n  }\n\n  setup(canvasElm: HTMLCanvasElement) {\n    this.canvasElm = canvasElm;\n    canvasElm.width = this.canvasDimensions.x;\n    canvasElm.height = this.canvasDimensions.y;\n    this.ctx = canvasElm.getContext('2d') as CanvasRenderingContext2D;\n  }\n  setWorld(world: World) {\n    this.worldLoader = new WorldLoader(this.worldDimensions);\n    this.world = world;\n    this.currentLevelIndex = 0;\n    this.stopwatch = world.createStopwatch();\n    this.nextLevel();\n    this.dispatch(setWorld(world));\n  }\n  unsetWorld() {\n    // todo score should dispatch this action\n    this.world = undefined;\n    this.dispatch(setWorld(undefined));\n  }\n  triggerGameOver() {\n    this.world = undefined;\n    this.dispatch(setGameOver());\n  }\n\n  handleMove(move: Move) {\n    const { currentLevel } = this;\n    if (!currentLevel) {\n      return;\n    }\n    const moveInfo = currentLevel.moveHero(move);\n    // sprite show face left/right or switch its current direction\n    this.spriteFacing = [Move.Left, Move.Right].includes(move) ? move : (\n      this.spriteFacing === Move.Right ? Move.Left : Move.Right\n    )\n    this.animateMove(moveInfo);\n    if (currentLevel.level.isWinningPoint(moveInfo.point)) {\n      this.nextLevel();\n    }\n  }\n  async nextLevel() {\n    const { currentLevelIndex, world } = this;\n    if (!world) {\n      throw new Error('todo this should be impossible');\n    }\n    // todo maybe keep animations between levels?\n    // this.pendingAnimations = [];\n    const nextLevel = await world.loadLevel(currentLevelIndex);\n    this.currentLevel = nextLevel && new PlayableLevel(nextLevel);\n    if (this.currentLevel) {\n      console.log(this.currentLevel.soln.printMoves());\n      this.dispatch(setLevel(this.currentLevelIndex));\n      this.currentLevelIndex += 1;\n      this.stopwatch.addTime(1000 * (world.progression.secondsPerLevel || 0));\n    } else {\n      this.triggerGameOver();\n    }\n  }\n\n  animateMove(moveInfo: MoveInformation) {\n    const animations = moveInfo.traveled.slice(0, -1).map((t, i, arr) => ({\n      traveled: t,\n      stopwatch: new Stopwatch(1000 * (1 + (i / arr.length))),\n    }));\n    this.pendingAnimations.push(...animations);\n  }\n  drawSprite(sprite: Sprite, x: number, y: number, scale?: number) {\n    const { canvasElm, ctx, currentLevel } = this;\n    const { width, height } = canvasElm;\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n    scale = scale || 1;\n    ctx.drawImage(\n      sprite.image,\n      x * blockWidth + (blockWidth * (1 - scale) / 2),\n      y * blockHeight + (blockHeight * (1 - scale) / 2),\n      blockWidth * scale,\n      blockHeight * scale\n    );\n  }\n  drawSpriteWithOpacity(alpha: number, sprite: Sprite, x: number, y: number, scale?: number) {\n    const { ctx } = this;\n    const oldAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = alpha;\n    this.drawSprite(sprite, x, y, scale);\n    ctx.globalAlpha = oldAlpha;\n  }\n  async draw() {\n    const { canvasElm, ctx, currentLevel } = this;\n    if (!canvasElm || !ctx) {\n      return;\n    }\n    const { width, height } = canvasElm;\n\n    await Sprites.loaded;\n\n    if (!currentLevel) {\n      return;\n    }\n\n    const blockWidth = width / currentLevel.level.width;\n    const blockHeight = height / currentLevel.level.height;\n\n    // background\n    ctx.fillStyle = Color.background;\n    ctx.fillRect(0, 0, width, height);\n    for (let y = 0; y < currentLevel.level.height; y++){\n      for (let x = 0; x < currentLevel.level.width; x++) {\n        let sprite = Sprites.groundIce5;\n        if (y === 0) {\n          sprite = Sprites.groundIce2;\n        }\n        if (y === currentLevel.level.height - 1) {\n          sprite = Sprites.groundIce8;\n        }\n        if (x === 0) {\n          sprite = Sprites.groundIce4;\n          if (y === 0) {\n            sprite = Sprites.groundIce1;\n          }\n          if (y === currentLevel.level.height - 1) {\n            sprite = Sprites.groundIce7;\n          }\n        }\n        if (x === currentLevel.level.width - 1) {\n          sprite = Sprites.groundIce6;\n          if (y === 0) {\n            sprite = Sprites.groundIce3;\n          }\n          if (y === currentLevel.level.height - 1) {\n            sprite = Sprites.groundIce9;\n          }\n        }\n        this.drawSprite(sprite, x, y);\n      }\n    }\n\n    // grid\n    if (this.shouldDrawGrid) {\n      ctx.strokeStyle = Color.grid;\n      for (let y = 1; y < currentLevel.level.height; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * blockHeight);\n        ctx.lineTo(width, y * blockHeight);\n        ctx.stroke();\n      }\n      for (let x = 1; x < currentLevel.level.width; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * blockWidth, 0);\n        ctx.lineTo(x * blockWidth, height);\n        ctx.stroke();\n      }\n    }\n\n    // ghosts\n    this.pendingAnimations = this.pendingAnimations.filter(a => a.stopwatch.getRemaining() > 0);\n    this.pendingAnimations.forEach(a => {\n      const { traveled, stopwatch } = a;\n      const opacity = stopwatch.getPercent();\n      this.drawSpriteWithOpacity(\n        opacity,\n        traveled.move === Move.Left ? Sprites.heroLeft : Sprites.heroRight, // todo this is buggy on up/dowh\n        traveled.point.x,\n        traveled.point.y,\n        1.2,\n      );\n    });\n\n    // start square\n    // ctx.fillStyle = 'grey';\n    // ctx.fillRect(currentLevel.level.start.x * blockWidth, currentLevel.level.start.y * blockHeight, blockWidth, blockHeight);\n\n    // goal square\n    this.drawSprite(Sprites.igloo, currentLevel.level.win.x, currentLevel.level.win.y);\n\n    // blocks\n    currentLevel.level.blocks.forEach(block => {\n      const sprite = (block.x + block.y) % 2 === 0 ? Sprites.treeLight : Sprites.treeHeavy;\n      this.drawSprite(sprite, block.x, block.y);\n    });\n\n    // hero\n    // ctx.strokeStyle = Color.glow;\n    // ctx.strokeRect(currentLevel.hero.point.x * blockWidth, currentLevel.hero.point.y * blockHeight, blockWidth, blockHeight);\n    this.drawSprite(\n      this.spriteFacing === Move.Left ? Sprites.heroLeft : Sprites.heroRight,\n      currentLevel.hero.point.x, currentLevel.hero.point.y, 1.2);\n  }\n\n  isMobile() {\n    return this.canvasElm ? this.canvasElm.width < 600 : true;\n  }\n}\n","import React from 'react';\nimport { AudioPlayer } from './AudioPlayer';\nimport { GameView } from './GameView';\nimport styled from 'styled-components';\nimport { MenuView } from './MenuView';\nimport { ScoreView } from './ScoreView';\nimport { connect } from 'react-redux';\nimport { DataState } from '../redux/reducers';\nimport { GameManager } from './manager';\n\nconst Container = styled.div`\n  max-width: 50vh;\n  margin: 0px auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n`;\n\nconst Canvas = styled.canvas`\n  height: 80vh;\n`;\n\ninterface Props {\n  store: DataState;\n}\n\nclass _App extends React.Component<Props> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  gm = new GameManager();\n\n  constructor(props: Props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const canvasElm = this.canvasRef.current;\n    if (canvasElm) {\n      this.gm.setup(canvasElm);\n    }\n  }\n\n  render() {\n    const { gm } = this;\n    return (\n      <Container>\n        <AudioPlayer />\n        <GameView gm={gm}>\n          <Canvas ref={this.canvasRef} />\n        </GameView>\n        <MenuView gm={gm} />\n        <ScoreView gm={gm} />\n      </Container>\n    );\n  }\n}\n\nexport const App = connect(\n  (store: DataState) => ({ store })\n)(_App);\n","import { Generator, Level, Point } from '../utils';\n\nfunction testLevelGen() {\n  const l1 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(2, 4),\n    ]\n  );\n  console.log(l1.print())\n  console.log(l1.solve())\n\n  const l2 = new Level(\n    5, 5, new Point(1, 1), new Point(3, 3), [\n      new Point(4, 0),\n    ]\n  );\n  console.log(l2.print())\n  console.log(l2.solve())\n\n  const gen = new Generator(5, 5, 0.1, 5);\n  const levels = gen.generateLevels(10, 1000);\n  levels.forEach(l => {\n    console.log(l.level.print())\n    console.log('Solution:', l.soln.printMoves())\n    console.log('\\n');\n  });\n};\n\nexport default {\n  testLevelGen,\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './fe/App';\nimport './fe/index.css';\nimport { store } from './redux';\nimport scripts from './script';\n\n// debug scripts via the browser console\nwindow.scripts = scripts;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}